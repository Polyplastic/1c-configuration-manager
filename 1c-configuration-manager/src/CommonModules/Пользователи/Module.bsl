////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции.

// См. одноименную функцию в общем модуле ПользователиКлиентСервер.
Функция АвторизованныйПользователь() Экспорт
	
	Возврат ПользователиКлиентСервер.АвторизованныйПользователь();
	
КонецФункции

// См. одноименную функцию в общем модуле ПользователиКлиентСервер.
Функция ТекущийПользователь() Экспорт
	
	Возврат ПользователиКлиентСервер.ТекущийПользователь();
	
КонецФункции

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы, 
//    имеет роль ПолныеПрава и роль для администрирования системы (если ПроверятьПраваАдминистрированияСистемы = Истина)
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда проверяется наличие
//                 роли для администрирования системы.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - если Истина, пользователь является полноправным.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);
	Свойства = СвойстваПроверяемогоПользователяИБ(Пользователь);
	ПользовательИБ = Свойства.ПользовательИБ;
	
	ПроверитьРольПолныеПрава = Не ПроверятьПраваАдминистрированияСистемы;
	ПроверитьРольАдминистратораСистемы = ПроверятьПраваАдминистрированияСистемы;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Свойства.УказанТекущийПользовательИБ Тогда
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы(Истина)) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Если УчитыватьПривилегированныйРежим И ПривилегированныйРежимУстановлен Тогда
			Возврат Истина;
		КонецЕсли;
		
		//Если СтандартныеПодсистемыПовтИсп.ПривилегированныйРежимУстановленПриЗапуске() Тогда
		//	// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
		//	// пользователь является полноправным, если привилегированный режим установлен.
		//	Возврат Истина;
		//КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
			// Когда основные роли не указаны, тогда у неуказанного пользователя
			// есть все права (как в привилегированном режиме).
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя)
		   И ПривилегированныйРежимУстановлен
		   И ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
			// Когда у неуказанного пользователя есть право Администрирование,
			// тогда привилегированный режим учитывается всегда для поддержки
			// параметра запуска UsePrivilegedMode у не клиентских приложений.
			Возврат Истина;
		КонецЕсли;
		
		// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
		// а роли в текущем сеансе.
		Если ПроверитьРольПолныеПрава
		   И НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда // Не заменять на РолиДоступны.
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ РольДоступна(РольАдминистратораСистемы(Истина)) Тогда // Не заменять на РолиДоступны.
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного).
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(ИменаРолей,
                     Пользователь = Неопределено,
                     УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Если ЭтоПолноправныйПользователь(Пользователь, , УчитыватьПривилегированныйРежим) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Свойства = СвойстваПроверяемогоПользователяИБ(Пользователь);
	ПользовательИБ = Свойства.ПользовательИБ;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивИменРолей = СтрРазделить(ИменаРолей, ",", Ложь);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПередПроверкойДоступностиРолей(МассивИменРолей);
	КонецЕсли;
	
	Для каждого ИмяРоли Из МассивИменРолей Цикл
		
		Если Свойства.УказанТекущийПользовательИБ Тогда
			Если РольДоступна(СокрЛП(ИмяРоли)) Тогда // Не заменять на РолиДоступны.
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти(СокрЛП(ИмяРоли))) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие хотя бы одного вида аутентификации у пользователя ИБ.
//
// Параметры:
//  ОписаниеПользователяИБ - УникальныйИдентификатор - пользователя ИБ.
//                         - Структура - содержит 3 свойства аутентификации:
//                             * АутентификацияСтандартная - Булево -
//                             * АутентификацияОС          - Булево -
//                             * АутентификацияOpenID      - Булево -
//                         - ПользовательИнформационнойБазы -
//                         - СправочникСсылка.Пользователи -
//                         - СправочникСсылка.ВнешниеПользователи -
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одно свойство аутентификации равно Истина.
//
Функция ВходВПрограммуРазрешен(ОписаниеПользователяИБ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УникальныйИдентификатор = Неопределено;
	
	Если ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		УникальныйИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ОписаниеПользователяИБ, "ИдентификаторПользователяИБ");
		
		Если ТипЗнч(ОписаниеПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОписаниеПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = ОписаниеПользователяИБ;
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ОписаниеПользователяИБ;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияСтандартная
		ИЛИ ПользовательИБ.АутентификацияОС
		ИЛИ ПользовательИБ.АутентификацияOpenID;
	
КонецФункции

// Возвращает роль, предоставляющую права администрирования системы.
//
// Параметры:
//  ДляПроверки - Булево - вернуть роль для проверки, а не для установки.
//                 Для базовых версий роль для установки АдминистраторСистемы,
//                 а роль для проверки может быть ПолныеПрава с правом Администрирование.
//
// Возвращаемое значение:
//  ОбъектМетаданных - Роль.
//
Функция РольАдминистратораСистемы(ДляПроверки = Ложь) Экспорт
	
	РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
	
	Если ДляПроверки
	   И ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.ПолныеПрава)
	    Тогда
	
		РольАдминистратораСистемы = Метаданные.Роли.ПолныеПрава;
	КонецЕсли;
	
	Возврат РольАдминистратораСистемы;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для функций ЭтоПолноправныйПользователь и РолиДоступны.

Функция СвойстваПроверяемогоПользователяИБ(Пользователь)
	
	Свойства = Новый Структура;
	Свойства.Вставить("ТекущийПользовательИБ", ПользователиИнформационнойБазы.ТекущийПользователь());
	Свойства.Вставить("ПользовательИБ", Неопределено);
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		Свойства.Вставить("ПользовательИБ", Пользователь);
		
	ИначеЕсли Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		Свойства.Вставить("ПользовательИБ", Свойства.ТекущийПользовательИБ);
	Иначе
		// Задан не текущий пользователь.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Свойства.Вставить("ПользовательИБ", ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ")));
		КонецЕсли;
	КонецЕсли;
	
	Если Свойства.ПользовательИБ <> Неопределено Тогда
		Свойства.Вставить("УказанТекущийПользовательИБ",
			Свойства.ПользовательИБ.УникальныйИдентификатор
				= Свойства.ТекущийПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти
