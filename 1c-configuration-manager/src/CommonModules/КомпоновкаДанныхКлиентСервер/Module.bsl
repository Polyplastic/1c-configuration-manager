
#Область ПрограммныйИнтерфейс


Функция ДобавитьОтборПользовательскиеНастройки(ЭлементСтруктуры, Знач Поле, Значение=Неопределено,  ВидСравнения = Неопределено, Использование = Истина, РежимОтображения=Неопределено, ИдентификаторПользовательскойНастройки=Неопределено, ДополнительныеПараметры=Неопределено) Экспорт
	ЭлементОтбораПользовательский = Неопределено;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ВПользовательскиеНастройки, ЗаменятьСуществующий", Ложь, Истина); 
	Иначе
		Если Не ДополнительныеПараметры.Свойство("ВПользовательскиеНастройки") Тогда
			ДополнительныеПараметры.Вставить("ВПользовательскиеНастройки", Ложь);
		КонецЕсли;
		Если Не ДополнительныеПараметры.Свойство("ЗаменятьСуществующий") Тогда
			ДополнительныеПараметры.Вставить("ЗаменятьСуществующий", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	КонецЕсли;
	
	ПользовательскийОтбор = ЭлементСтруктуры.ПользовательскиеНастройки.Элементы.Найти(
		ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
		
	//найдем 
	Для каждого Элемент из ПользовательскийОтбор.Элементы Цикл
		Если Элемент.ИдентификаторПользовательскойНастройки=ИдентификаторПользовательскойНастройки Тогда
			ЭлементОтбораПользовательский = Элемент;
			Прервать;
		// если не передан идентификатор, тогда ищем по совпадению поля
		ИначеЕсли Элемент.ЛевоеЗначение = ПолеКомпоновки И ИдентификаторПользовательскойНастройки=Неопределено Тогда 
			ЭлементОтбораПользовательский = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнительныеПараметры.ЗаменятьСуществующий=Истина ИЛИ ЭлементОтбораПользовательский=Неопределено Тогда
		Если ЭлементОтбораПользовательский=Неопределено Тогда 
			ЭлементОтбораПользовательский =  ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭлементОтбораПользовательский.ИдентификаторПользовательскойНастройки) Тогда
			ИдентификаторПользовательскойНастройки = новый УникальныйИдентификатор();
		ИначеЕсли ИдентификаторПользовательскойНастройки=Неопределено Тогда
			ИдентификаторПользовательскойНастройки = ЭлементОтбораПользовательский.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
		
		ЭлементОтбораПользовательский.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		ЭлементОтбораПользовательский.ВидСравнения = ВидСравнения;
		ЭлементОтбораПользовательский.ЛевоеЗначение = ПолеКомпоновки;
		ЭлементОтбораПользовательский.ПравоеЗначение = Значение;
		ЭлементОтбораПользовательский.Использование = Использование;	
		ЭлементОтбораПользовательский.РежимОтображения=РежимОтображения;
	КонецЕсли;
		
	Возврат ЭлементОтбораПользовательский;
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов
//
// Параметры:
//	ЭлементСтруктуры        - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - элемент структуры КД
//	Поле                    - Строка - имя поля, по которому добавляется отбор
//	Значение                - Произвольный - значение отбора КД
//	ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнений КД (по умолчанию: Неопределено)
//	Использование           - Булево - признак использования отбора (по умолчанию: Истина)
//	ДополнительныеПараметры - Структура
//		* ВПользовательскиеНастройки - Булево - признак добавления в пользовательские настройки КД (по умолчанию: ложь)
//		* ЗаменятьСуществующий       - Булево - признак полной замены существующего отбора по полю (по умолчанию: истина).
//
// Возвращаемое значение:
//	ЭлементОтбораКомпоновкиДанных - добавленный отбор.
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение = Неопределено, ВидСравнения = Неопределено, Использование = Истина, ДополнительныеПараметры = Неопределено) Экспорт
		
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ВПользовательскиеНастройки, ЗаменятьСуществующий", Ложь, Истина); 
	Иначе
		Если Не ДополнительныеПараметры.Свойство("ВПользовательскиеНастройки") Тогда
			ДополнительныеПараметры.Вставить("ВПользовательскиеНастройки", Ложь);
		КонецЕсли;
		Если Не ДополнительныеПараметры.Свойство("ЗаменятьСуществующий") Тогда
			ДополнительныеПараметры.Вставить("ЗаменятьСуществующий", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ДополнительныеПараметры.ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбора = Неопределено;
	Если ДополнительныеПараметры.ЗаменятьСуществующий Тогда
		Для каждого Элемент Из Отбор.Элементы Цикл
			
			Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.ЛевоеЗначение = Поле Тогда
				ЭлементОтбора = Элемент;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	ЭлементОтбора.Использование		= Использование;
	ЭлементОтбора.ЛевоеЗначение		= Поле;
	ЭлементОтбора.ВидСравнения		= ВидСравнения;
	ЭлементОтбора.ПравоеЗначение	= Значение;
	
	Возврат ЭлементОтбора;
	
КонецФункции

// Удаляет отбор из компоновщика настроек, если поле не указано, очищает отбор
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, ОтборКомпоновкиДанных - элемент структуры компоновки
//	Поле             - Строка, ПолеКомпоновкиДанных - имя или поле компоновки.
//
// Возвращаемое значение:
//	Булево - признак успешного удаления/очистки.
//
Функция УдалитьОтбор(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если Поле = Неопределено Тогда
		Отбор.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	ПолеУдалено = Ложь;
	Элементы = ПолучитьЭлементыОтбора(Отбор);
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.ЛевоеЗначение = Поле Тогда
			МассивУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУдаляемыхЭлементов.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			Отбор.Элементы.Удалить(Элемент);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции


Функция ПолучитьЭлементыОтбора(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	
	ДобавитьЭлементыОтбораВМассив(ЭлементСтруктуры.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьЭлементыОтбораВМассив(Элементы, МассивПолей, ТолькоГруппы = Ложь)
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьЭлементыОтбораВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение истина, если в группировках элементов структуры присутствует Поле.
//
// Параметры:
//	Структура - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных  - Элемент структуры настроек отчета
//	          - КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных   - Элемент структуры настроек отчета
//	          - КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных - Элемент структуры настроек отчета
//	          - ТаблицаКомпоновкиДанных              - Элемент структуры настроек отчета
//	          - ГруппировкаКомпоновкиДанных          - Элемент структуры настроек отчета
//	          - ГруппировкаДиаграммыКомпоновкиДанных - Элемент структуры настроек отчета
//	          - ГруппировкаТаблицыКомпоновкиДанных   - Элемент структуры настроек отчета
//	          - ДиаграммаКомпоновкиДанных            - Элемент структуры настроек отчета
//	Поле - Строка - Имя поля компоновки
//	     - ПолеКомпоновкиДанных - поле компоновки данных
//	ВключаяВложенныеПоля - Булево - Если Истина, то будут проверятся вложенные поля. Например, "Регистратор.Дата".
//	                       По умолчанию Ложь.
//
// Возвращаемое значение:
//	Булево - Истина, если в группировках элементов структуры присутствует Поле.
//
Функция НайтиПоле(Структура, Поле, ВключаяВложенныеПоля = Ложь)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") 
	   И ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
	   И ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);
	Иначе
		ПолеКомпоновки = Поле;
	КонецЕсли;
	ИмяПоляКомпоновкиСТочкой = Строка(Поле) + ".";
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		
		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
		 ИЛИ Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		 ИЛИ Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки.Использование Тогда
					Если ВключаяВложенныеПоля
					   И (ПолеГруппировки.Поле = ПолеКомпоновки
					   ИЛИ СтрНачинаетсяС(Строка(ПолеГруппировки.Поле), ИмяПоляКомпоновкиСТочкой)) Тогда
						ЕстьПоле = Истина;
						Прервать;
					ИначеЕсли НЕ ВключаяВложенныеПоля И ПолеГруппировки.Поле = ПолеКомпоновки Тогда
						ЕстьПоле = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПоле Тогда
			Прервать;
		КонецЕсли;
		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле, ВключаяВложенныеПоля)
			       ИЛИ НайтиПоле(ЭлементСтруктуры.Колонки, Поле, ВключаяВложенныеПоля);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
		      ИЛИ Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		      ИЛИ Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле, ВключаяВложенныеПоля);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Точки.Количество() <> 0 Тогда
				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле, ВключаяВложенныеПоля)
				       ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле, ВключаяВложенныеПоля);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПоле()

#КонецОбласти