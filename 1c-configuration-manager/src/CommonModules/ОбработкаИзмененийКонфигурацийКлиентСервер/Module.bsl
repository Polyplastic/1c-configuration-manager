
#Область ПереносИзмененийЗапись

Процедура ПеренестиИзмененияКодаПоНаборуФайлов(Знач Сценарий,Знач МассивКлючей) Экспорт  

	МассивФайлов = ОбработкаИзмененийКонфигурацийВызовСервера.ПолучитьМассивФайловДляОбработки(Сценарий,МассивКлючей);
	
	Для Каждого стр из МассивФайлов Цикл                        
		// сначала копируем
		СкопироватьФайлыМеждуКаталогами(стр.ПутьФайлНоваяБазовая,стр.ПутьФайлНоваяИзмененая);
		// теперь заменяем
		ПеренестиИзмененияКода(Сценарий,стр.Ключ,стр.ПутьФайлНоваяИзмененая);	
	КонецЦикла;

КонецПроцедуры

Процедура ПеренестиИзмененияКода(Знач Сценарий,Знач Ключ,ПутьФайлНоваяИзмененая) Экспорт  
	
	НаборДанных = ОбработкаИзмененийКонфигурацийВызовСервера.ПолучитьДанныеРассчитанныеИзмененияСУчетомРучнойПравки(Сценарий,Ключ);
	
	ПеренестиИзмененияКодаПоКлючу(ПутьФайлНоваяИзмененая,НаборДанных);
	
КонецПроцедуры

Процедура ПеренестиИзмененияКодаПоКлючу(Знач ПутьФайлНоваяИзмененая,НаборДанных) Экспорт
	
	ТекстЗамена = Новый ТекстовыйДокумент; 
	ТекстЗамена.Прочитать(ПутьФайлНоваяИзмененая,КодировкаТекста.UTF8);
	ТекстЗамена.Очистить();
	Для каждого стр из НаборДанных Цикл                                
		ТекстЗамена.ДобавитьСтроку(стр.Текст);
	КонецЦикла;  
	ТекстЗамена.Записать(ПутьФайлНоваяИзмененая,КодировкаТекста.UTF8);
	
КонецПроцедуры  

Процедура СкопироватьФайлыМеждуКаталогами(Знач ПутьФайлНоваяБазовая,Знач ПутьФайлНоваяИзмененая) Экспорт
	
		КаталогПереносимогоФайла = Новый Файл(ПутьФайлНоваяИзмененая);
		Если НЕ КаталогПереносимогоФайла.Существует() Тогда
			СоздатьКаталог(КаталогПереносимогоФайла.Путь);
		КонецЕсли;
		
		КопироватьФайл(ПутьФайлНоваяБазовая,ПутьФайлНоваяИзмененая);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискФайлов
	
Процедура НайтиЗаписатьИнформациюПоФайламВКаталогеСОтличиями(Знач Сценарий) Экспорт
	
	// ищем файлы bsl
	МассивДанныхПоФайлам = НайтиФайлыВКаталогеСОтличиями(Сценарий);
	
	// очистим регистры перед стартом
	ОбработкаИзмененийКонфигурацийВызовСервера.ОчиститьСтарыеЗаписиПоРегиструСравнения(Сценарий);
	ОбработкаИзмененийКонфигурацийВызовСервера.ОчиститьСтарыеЗаписиПоРегиструИзменений(Сценарий);
	
	// пишем в регистр
	ОбработкаИзмененийКонфигурацийВызовСервера.ЗаписатьНовыеДанныеПоРегиструЗадания(Сценарий,МассивДанныхПоФайлам);
	
КонецПроцедуры

Функция НайтиФайлыВКаталогеСОтличиями(Знач Сценарий,Знач Маска="*.bsl",Знач Тип="bsl") Экспорт
	
	МассивСтруктурФайловДляСравнения = Новый Массив;
	
	КаталогБазовая = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Сценарий,"КаталогБазовая");
	КаталогИзмененная = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Сценарий,"КаталогИзмененная");
	КаталогБазоваяНовая = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Сценарий,"КаталогБазоваяНовая");
	КаталогИзмененнаяНовая = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Сценарий,"КаталогИзмененнаяНовая");
	ИгнорироватьФайлы = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Сценарий,"ИгнорироватьФайлы");	
	ЗагружатьФайлы = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Сценарий,"ЗагружатьФайлы");	
	// ++ ES-16751 2024.07.13 МасленниковЛЛ 
	ВключатьФайлыОтсутствующиеВБазовой = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Сценарий,"ВключатьФайлыОтсутствующиеВБазовой");
	// -- ES-16751 2024.07.13 МасленниковЛЛ
	
	// 1. Получим массив файлов нашей конфы                 
	МассивНашейФайлов = НайтиФайлы(КаталогИзмененная,Маска,Истина);
	
	// 2. Получим массиф файлов исходной конфы                 
	МассивИсходнойФайлов = НайтиФайлы(КаталогБазовая,Маска,Истина);
	
	// 3. Получим массиф файлов новой базовой конфы                 
	МассивНовойФайлов = НайтиФайлы(КаталогБазоваяНовая,Маска,Истина);   
	
	
	// 4. Ищем отключенные ключи и удаляем из наборов файлов исходной
	// остальные не будут учитываться                                
	
	// 4.1 Сначала удаляем по фильтру игнорирования, при наличии данных
	МассивИгнорируемыхПутейЧастей = СтрРазделить(НРег(ИгнорироватьФайлы),Символы.ПС,Ложь);
	
	Если МассивИгнорируемыхПутейЧастей.Количество()>0 Тогда
		
		МассивИндексовФайловДляУдаления = Новый Массив;
		
		// ищем совпадения по фильтру игнорирования
		Для каждого стр_файл из МассивИсходнойФайлов Цикл
			Для каждого стр_уд из МассивИгнорируемыхПутейЧастей Цикл
				Если СтрНайти(НРег(стр_файл.ПолноеИмя),СокрЛП(стр_уд)) Тогда
					Индекс = МассивИсходнойФайлов.Найти(стр_файл);
					МассивИндексовФайловДляУдаления.Добавить(Индекс);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;                                         
		
		// удаляем в обратном порядке по индексам
		Для ш=0 По МассивИндексовФайловДляУдаления.ВГраница() Цикл
			Индекс = МассивИндексовФайловДляУдаления[МассивИндексовФайловДляУдаления.ВГраница()-ш];
			МассивИсходнойФайлов.Удалить(Индекс);	
		КонецЦикла;
		
	КонецЕсли;  

	// 4.2 Удаляем, если не подходит по условию совпадения, при наличии данных
	МассивЗагружаемыхПутейЧастей = СтрРазделить(НРег(ЗагружатьФайлы),Символы.ПС,Ложь);

	Если МассивЗагружаемыхПутейЧастей.Количество()>0 Тогда
		
		МассивИндексовФайловДляУдаления = Новый Массив;
		
		// ищем совпадения по фильтру загрузки
		Для каждого стр_файл из МассивИсходнойФайлов Цикл
			ФайлЗагружать = Ложь;
			Для каждого стр_заг из МассивЗагружаемыхПутейЧастей Цикл
				Если СтрНайти(НРег(стр_файл.ПолноеИмя),СокрЛП(стр_заг)) Тогда
					ФайлЗагружать = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ФайлЗагружать=Ложь Тогда
				Индекс = МассивИсходнойФайлов.Найти(стр_файл);
				МассивИндексовФайловДляУдаления.Добавить(Индекс);
			КонецЕсли;
		КонецЦикла;  
		
		// удаляем в обратном порядке по индексам
		Для ш=0 По МассивИндексовФайловДляУдаления.ВГраница() Цикл
			Индекс = МассивИндексовФайловДляУдаления[МассивИндексовФайловДляУдаления.ВГраница()-ш];
			МассивИсходнойФайлов.Удалить(Индекс);	
		КонецЦикла;
	
	КонецЕсли;
	
	// 5. Кешируем внешнюю
	КешИсходнойКонфигурации = Новый Соответствие;
	Для каждого стр_файл из МассивИсходнойФайлов Цикл
		Ключ = ПолучитьКлючПоПолномуИмениФвйла(стр_файл);
		КешИсходнойКонфигурации.Вставить(Ключ,стр_файл);
	КонецЦикла;  
	
	КешНашейКонфигурации = Новый Соответствие;
	Для каждого стр_файл из МассивНашейФайлов Цикл
		Ключ = ПолучитьКлючПоПолномуИмениФвйла(стр_файл);
		КешНашейКонфигурации.Вставить(Ключ,стр_файл);
	КонецЦикла;  
	
	КешНовойКонфигурации = Новый Соответствие;
	Для каждого стр_файл из МассивНовойФайлов Цикл
		Ключ = ПолучитьКлючПоПолномуИмениФвйла(стр_файл);
		КешНовойКонфигурации.Вставить(Ключ,стр_файл);
	КонецЦикла;  
	

	// 6. Ищем файлы с отличиями    
	
	Для Каждого стр_файл из МассивИсходнойФайлов Цикл
		Ключ = ПолучитьКлючПоПолномуИмениФвйла(стр_файл);  
		наш_файл = КешНашейКонфигурации.Получить(Ключ);

		// ++ ES-16751 2024.07.13 МасленниковЛЛ 
		Если ВключатьФайлыОтсутствующиеВБазовой Тогда
			КешНашейКонфигурации.Удалить(Ключ);
		КонецЕсли;
		// -- ES-16751 2024.07.13 МасленниковЛЛ		
		
		// если нет такого файла, то идем далее
		Если наш_файл=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		// сравним по размеру
		Если стр_файл.Размер()<>наш_файл.Размер() Тогда
		Иначе     
			// если все проверки показали, что файлы одинаковые, то возврат
			Продолжить;
		КонецЕсли;    
		
		// ++ ES-16751 2024.07.13 МасленниковЛЛ 
		Если НЕ ВыполнитьПроверкуПоТипуXML(Тип, стр_файл) Тогда
			Продолжить;
		КонецЕсли;
		// -- ES-16751 2024.07.13 МасленниковЛЛ
		
		СтруктураДанных = Новый Структура("Ключ,Тип,ПутьФайлИзмененная,ПутьФайлБазовая,ПутьФайлНоваяБазовая,ПутьФайлНоваяИзмененая,Этап,Статус,ОтсутствуетВБазовой",Ключ,Тип,наш_файл.ПолноеИмя,стр_файл.ПолноеИмя,"","",2,ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаданий.ТребуетсяОбработка"),Ложь);
		МассивСтруктурФайловДляСравнения.Добавить(СтруктураДанных);
		//найдем в новой
		новый_файл = КешНовойКонфигурации.Получить(Ключ);
		Если НЕ новый_файл=Неопределено Тогда
			СтруктураДанных.Вставить("ПутьФайлНоваяБазовая",новый_файл.ПолноеИмя);	         
			//TODO искать правильный путь
			СтруктураДанных.Вставить("ПутьФайлНоваяИзмененая",КаталогИзмененнаяНовая+"\src"+"\"+Ключ);	
		КонецЕсли;
	КонецЦикла;      
	
	// ++ ES-16751 2024.07.13 МасленниковЛЛ 
	Если ВключатьФайлыОтсутствующиеВБазовой Тогда
		Для каждого стр_файл из МассивНашейФайлов Цикл
			Ключ = ПолучитьКлючПоПолномуИмениФвйла(стр_файл);  
			наш_файл = КешНашейКонфигурации.Получить(Ключ);
			// если нет такого файла, то идем далее
			Если наш_файл=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ВыполнитьПроверкуПоТипуXML(Тип, стр_файл) Тогда
				Продолжить;
			КонецЕсли;
			
			ПустойФайлПуть = КаталогБазовая + "src\" + СтрЗаменить(Ключ,стр_файл.Имя,"");
			КаталогНаДиске = Новый Файл(ПустойФайлПуть);
            Если НЕ КаталогНаДиске.Существует()  Тогда
                СоздатьКаталог(ПустойФайлПуть);
			КонецЕсли;
			
			ПустойФайл = ПустойФайлПуть+стр_файл.Имя;
			
			Запись = Новый ЗаписьТекста(ПустойФайл, КодировкаТекста.UTF8);
			Запись.Записать("");
			Запись.Закрыть();			
			
			СтруктураДанных = Новый Структура("Ключ,Тип,ПутьФайлИзмененная,ПутьФайлБазовая,ПутьФайлНоваяБазовая,ПутьФайлНоваяИзмененая,Этап,Статус,ОтсутствуетВБазовой",
											   Ключ,Тип,наш_файл.ПолноеИмя,ПустойФайл,"","",2,ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаданий.ТребуетсяОбработка"),Истина);
			МассивСтруктурФайловДляСравнения.Добавить(СтруктураДанных);
		КонецЦикла;
	КонецЕсли;
	// -- ES-16751 2024.07.13 МасленниковЛЛ
	
	Возврат МассивСтруктурФайловДляСравнения;	
	
КонецФункции           

Функция ВыполнитьПроверкуПоТипуXML(Тип, стр_файл) // ++ ES-16751 2024.07.13 МасленниковЛЛ 
	
	// проверим по типу xml это форма, объект метаданных или что-то еще?
	Если НЕ НРег(Тип)=НРег("bsl") И Найти(НРег(стр_файл.ПолноеИмя),"xml") Тогда
		Если НРег(Тип)=НРег("Form") Тогда
			Если НЕ ЭтоXMLВыбранныйТип(стр_файл.ПолноеИмя,"Form")=Истина Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли НРег(Тип)=НРег("MetaDataObject") Тогда
			Если НЕ ЭтоXMLВыбранныйТип(стр_файл.ПолноеИмя,"MetaDataObject")=Истина Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли НРег(Тип)=НРег("Rights") Тогда
			Если НЕ ЭтоXMLВыбранныйТип(стр_файл.ПолноеИмя,"Rights")=Истина Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли НРег(Тип)=НРег("xml") И Найти(НРег(стр_файл),"xml") Тогда
			// загружаем все
		Иначе
			// обработка других файлов не предусмотрена
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;		

	Возврат Истина;
	
КонецФункции

Функция ЭтоXMLВыбранныйТип(Знач ПолноеИмя,Знач Тип) Экспорт
	ЭтоИскомыйТип = Ложь;   
	
	ЧтениеФайла = Новый ЧтениеXML;
	ЧтениеФайла.ОткрытьФайл(ПолноеИмя,,,);
	
	// читаем заголоовк xml
	Если ЧтениеФайла.Прочитать() Тогда        
		Если НРег(ЧтениеФайла.Имя)=НРег(Тип) Тогда
			ЭтоИскомыйТип = Истина;
		КонецЕсли;              
		ЧтениеФайла.Прочитать();
		Если НРег(ЧтениеФайла.Имя)=НРег(Тип) Тогда
			ЭтоИскомыйТип = Истина;
		КонецЕсли;              
	КонецЕсли;
	
	ЧтениеФайла.Закрыть();
	
	Возврат ЭтоИскомыйТип;
КонецФункции


Функция ПолучитьКлючПоПолномуИмениФвйла(Знач стр_файл)                      
	Возврат Сред(стр_файл.полноеИмя,Найти(стр_файл.полноеИмя,"src")+4,СтрДлина(стр_файл.полноеИмя)-Найти(стр_файл.полноеИмя,"src")-3);
КонецФункции

#КонецОбласти

#Область РасчетСравнения

Процедура РассчитатьСравненияКонфигурацийПоНаборуФайлов(Знач Сценарий,Знач МассивКлючей) Экспорт

	МассивФайлов = ОбработкаИзмененийКонфигурацийВызовСервера.ПолучитьМассивФайловДляОбработки(Сценарий,МассивКлючей);
	
	Для Каждого стр из МассивФайлов Цикл
		
		ТекстНаша = Новый ТекстовыйДокумент; 
		ТекстНаша.Прочитать(стр.ПутьФайлИзмененная,КодировкаТекста.UTF8);
		ТекстНашегоФайла = ТекстНаша.ПолучитьТекст();
		
		ТекстИсход = Новый ТекстовыйДокумент; 
		ТекстИсход.Прочитать(стр.ПутьФайлБазовая,КодировкаТекста.UTF8);
		ТекстИсходФайла = ТекстИсход.ПолучитьТекст(); 
		
		// сравниваем файлы 
		РезультатСравнения = СравнениеТекстBSLУпрощенныйDiffКлиентСервер.СравнитьТекстыФайлов(ТекстИсходФайла,ТекстНашегоФайла);
		НовыеДанные = Новый Массив;
		
		Если РезультатСравнения<>Неопределено Тогда
			Для каждого рез из РезультатСравнения._stateList Цикл  
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("ПутьФайлИзмененная",стр.ПутьФайлИзмененная);
				СтруктураДанных.Вставить("ПутьФайлБазовая", стр.ПутьФайлБазовая);
				СтруктураДанных.Вставить("Текст", СтрСоединить(рез.lines,Символы.ПС));
				СтруктураДанных.Вставить("ОтНачалаФайла",рез.start);
				СтруктураДанных.Вставить("Длина", рез.dist);
				СтруктураДанных.Вставить("ОтНачалаФункции", рез.funcRelStartPos); 
				СтруктураДанных.Вставить("ОтОкончанияФункции", рез.funcRelEndPos); 
				СтруктураДанных.Вставить("ТипИзменений", рез.state);
				СтруктураДанных.Вставить("ТипПроблемы", ПредопределенноеЗначение("Перечисление.ТипыПроблем.Порядок"));
				СтруктураДанных.Вставить("Проблема", "");
				СтруктураДанных.Вставить("Ключ", стр.Ключ);   
				СтруктураДанных.Вставить("ИмяФункции", рез.funcName);
				СтруктураДанных.Вставить("ИмяПредыдущейФункции", рез.prevNameFunc);  
				СтруктураДанных.Вставить("ЯкорьПеред", рез.anhornBefore);
				СтруктураДанных.Вставить("ЯкорьПосле", рез.anhornAfter);
				СтруктураДанных.Вставить("UID",Строка(Новый UUID())); // ключ для связи со вставкой
				НовыеДанные.Добавить(СтруктураДанных);
			КонецЦикла;
		КонецЕсли;
		
		ОбработкаИзмененийКонфигурацийВызовСервера.ЗаписатьНовыеДанныеПоРегиструСравнения(Сценарий,стр.Ключ,НовыеДанные);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетИзменений

Процедура РассчитатьИзмененияНовойКонфигурацииПоНаборуФайлов(Знач Сценарий,Знач МассивКлючей) Экспорт

	МассивФайлов = ОбработкаИзмененийКонфигурацийВызовСервера.ПолучитьМассивФайловДляОбработки(Сценарий,МассивКлючей);
	
	Для Каждого стр из МассивФайлов Цикл
		
		// сравниваем файлы  
		РасчетИзмененийТекстBSLУпрощенныйКлиентСервер.РассчитатьПланируемуюВставку(Сценарий,стр.Ключ,стр.ПутьФайлНоваяБазовая);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
