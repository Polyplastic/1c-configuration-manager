
#Область СравнениеКонфигураций 

Процедура ОчиститьСтарыеЗаписиПоРегиструСравнения(Знач Сценарий,Знач Ключ=Неопределено) Экспорт
	
	// Стираем старые записи
	НаборЗаписей = РегистрыСведений.СравнениеКонфигураций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	Если НЕ Ключ=Неопределено Тогда
		НаборЗаписей.Отбор.Ключ.Установить(Ключ);
	КонецЕсли;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьНовыеДанныеПоРегиструСравнения(Знач Сценарий,Знач Ключ,НовыеДанные) Экспорт
	
	// мы должны сначала проверить наличие метаданных
	// следующим шагом записывать
	КешКлючей = Новый Соответствие;    
	КешПредставлений = Новый Соответствие;
	МассивПолныхИменОбъектов = новый Массив;
	МассивПолныхИменМодулей = Новый Массив;      
	
	Для каждого стр из НовыеДанные Цикл
		ДанныеКлюча = КешКлючей.Получить(стр.Ключ);
		Если НЕ ДанныеКлюча=Неопределено Тогда
			Продолжить;
		КонецЕсли;     
		
		мРез = ПолучитьПолноеИмяПоПути(стр.ПутьФайлБазовая);
		
		ДанныеКлюча = Новый Структура("Ключ,ПутьФайлБазовая,ПутьФайлИзмененная,ПолноеИмя,ПолноеИмяМодуль");
		ЗаполнитьЗначенияСвойств(ДанныеКлюча,стр);
		ДанныеКлюча.ПолноеИмя = мРез.ПолноеИмя;
		ДанныеКлюча.ПолноеИмяМодуль = мРез.ПолноеИмяМодуль;
		КешКлючей.Вставить(стр.Ключ,ДанныеКлюча);
		
		КешПредставлений.Вставить(мРез.ПолноеИмя,мРез);
		КешПредставлений.Вставить(мРез.ПолноеИмяМодуль,мРез);
		МассивПолныхИменОбъектов.Добавить(мРез.ПолноеИмя);	
		МассивПолныхИменМодулей.Добавить(мРез.ПолноеИмяМодуль);	
	КонецЦикла;  
	
	// I) удаляем старые записи
	Для каждого стр из КешКлючей Цикл
		Ключ = стр.Ключ;
		ОчиститьСтарыеЗаписиПоРегиструСравнения(Сценарий,Ключ);
	КонецЦикла;  
	
	// II) добавляем новые записи
	// 1. Находим создаем модули
	// базовая
	мРезБаз = НайтиСоздатьСправочникиДляРаботы(Сценарий.КонфигурацияБазовая,МассивПолныхИменОбъектов,МассивПолныхИменМодулей,КешПредставлений);
	// по измененной                                                                                       
	мРезИзм = НайтиСоздатьСправочникиДляРаботы(Сценарий.КонфигурацияИзмененная,МассивПолныхИменОбъектов,МассивПолныхИменМодулей,КешПредставлений);
	
	// 2.2. формируем новые
	Ключ = Неопределено;
	НаборЗаписей = Неопределено;
	МодульБазовая = Неопределено;
	МодульИзмененная = Неопределено;
	_counter=0;
	Пока _counter<=НовыеДанные.Количество() И НовыеДанные.Количество()>0 Цикл       
		
		Если _counter=НовыеДанные.Количество() Тогда
			Ключ = Неопределено;
		Иначе
			стр = НовыеДанные[_counter];
		КонецЕсли;	
		
		Если НЕ Ключ = стр.Ключ Тогда
			
			Если НЕ НаборЗаписей=Неопределено Тогда
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
			Если _counter=НовыеДанные.Количество() Тогда
				Прервать;
			КонецЕсли;      
			
			Ключ = стр.Ключ;
			ДанныеКлюча = КешКлючей.Получить(стр.Ключ);
			МодульБазовая = мРезБаз.КешМодулей.Получить(ДанныеКлюча.ПолноеИмяМодуль);
			МодульИзмененная = мРезИзм.КешМодулей.Получить(ДанныеКлюча.ПолноеИмяМодуль);
			
			НаборЗаписей = РегистрыСведений.СравнениеКонфигураций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
			НаборЗаписей.Отбор.Ключ.Установить(стр.Ключ); 
			
		КонецЕсли;
		
		//КлючИзменения	
		Запись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись,стр);
		
		// основные
		Запись.Сценарий = Сценарий;
		Запись.Ключ = Ключ;                   
		Запись.КлючИзменения = ПолучитьПредставлениеКлючИзмененияСтрокой(стр.ТипИзменений,стр.ОтНачалаФайла);
		
		// остальные
		Запись.МодульБазовойКонфигурации = МодульБазовая;
		Запись.МодульИзмененнойКонфигурации = МодульИзмененная;
		Запись.ОтНачалаФайла = стр.ОтНачалаФайла;
		Запись.ОтНачалаФункции = стр.ОтНачалаФункции;
		Запись.ОтОкончанияФункции = стр.ОтОкончанияФункции;
		Запись.UID = стр.UID;    
		Запись.Статус=Перечисления.СтатусыОбработки.НеТребуется;
		Если стр.ТипИзменений="ins" Тогда
			Запись.ТипИзменений = Перечисления.ТипыИзменений.Вставка;
		ИначеЕсли стр.ТипИзменений="del" Тогда
			Запись.ТипИзменений = Перечисления.ТипыИзменений.Удаление;
		ИначеЕсли стр.ТипИзменений="eq" Тогда
			Запись.ТипИзменений = Перечисления.ТипыИзменений.Совпадение;
		Иначе                                                        
			Запись.ТипИзменений = Перечисления.ТипыИзменений.Неизвестно;
		КонецЕсли;
		
		_counter = _counter+1;
	КонецЦикла;   
	
КонецПроцедуры

Функция ПолучитьПредставлениеТипаИзмененийСтрокой(Знач ТипИзменений) Экспорт
	
	ТипИзмененийСтрокой = Строка(ТипИзменений);
	
	Если ТипИзменений=ПредопределенноеЗначение("Перечисление.ТипыИзменений.Вставка") Тогда
		ТипИзмененийСтрокой = "ins";
	ИначеЕсли ТипИзменений=ПредопределенноеЗначение("Перечисление.ТипыИзменений.Удаление") Тогда
		ТипИзмененийСтрокой = "del";
	ИначеЕсли ТипИзменений=ПредопределенноеЗначение("Перечисление.ТипыИзменений.Совпадение") Тогда
		ТипИзмененийСтрокой = "eq";
	ИначеЕсли ТипИзменений=ПредопределенноеЗначение("Перечисление.ТипыИзменений.Замена") Тогда
		ТипИзмененийСтрокой = "repl";
	КонецЕсли;                  
	
	Возврат ТипИзмененийСтрокой;
	
КонецФункции

Функция ПолучитьПредставлениеКлючИзмененияСтрокой(Знач ТипИзменений,Знач Позиция) Экспорт
	ТипИзмененийСтрока = ПолучитьПредставлениеТипаИзмененийСтрокой(ТипИзменений);
	Возврат Строка(ТипИзмененийСтрока+"/"+Позиция);	
КонецФункции

Функция ПолучитьМассивФайловДляОбработки(Сценарий,МассивКлючей) Экспорт
	МассивФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Задания.Сценарий КАК Сценарий,
	|	Задания.Ключ КАК Ключ,
	|	Задания.ПутьФайлБазовая КАК ПутьФайлБазовая,
	|	Задания.ПутьФайлИзмененная КАК ПутьФайлИзмененная,
	|	Задания.ПутьФайлНоваяБазовая КАК ПутьФайлНоваяБазовая,
	|	Задания.ПутьФайлНоваяИзмененая КАК ПутьФайлНоваяИзмененая
	|ИЗ
	|	РегистрСведений.ЗаданияОбработкиИзмененийКонфигураций КАК Задания
	|ГДЕ
	|	Задания.Сценарий = &Сценарий
	|	И Задания.Ключ В(&МассивКлючей)
	|	И Задания.Тип = ""bsl""";
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("МассивКлючей",МассивКлючей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура("Сценарий,Ключ,ПутьФайлБазовая,ПутьФайлИзмененная,ПутьФайлНоваяБазовая,ПутьФайлНоваяИзмененая");
		ЗаполнитьЗначенияСвойств(СтруктураДанных,Выборка);
		МассивФайлов.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат МассивФайлов;
КонецФункции  

Процедура ЗаписатьЕслиЕстьПроблемыПоРегиструСравнения(Знач Сценарий,Знач Ключ,ИзмененныеДанные) Экспорт
	
	// кешируем
	КешДанных = Новый Соответствие;
	Для каждого стр из ИзмененныеДанные Цикл
		КешДанных.Вставить(НРег(стр.КлючИзменения),стр);
	КонецЦикла;
	
	// читаем
	НаборЗаписей = РегистрыСведений.СравнениеКонфигураций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	НаборЗаписей.Отбор.Ключ.Установить(Ключ);
	
	НаборЗаписей.Прочитать();
	
	ЕстьИзменения = Ложь;
	
	Для каждого Запись из НаборЗаписей Цикл
		Данные = КешДанных.Получить(НРег(Запись.КлючИзменения));
		Если НЕ Данные=Неопределено И ЗначениеЗаполнено(Данные.Проблема) Тогда
			ЕстьИзменения=Истина;
			Запись.Проблема=Данные.Проблема;
			Запись.ТипПроблемы=Данные.ТипПроблемы;                         
			Запись.Статус=Перечисления.СтатусыОбработки.ТребуетсяОбработка;
		ИначеЕсли НЕ Данные=Неопределено И НЕ ЗначениеЗаполнено(Данные.Проблема) И ЗначениеЗаполнено(Запись.Проблема) Тогда
			ЕстьИзменения=Истина;
			Запись.Проблема="";                   
			Запись.ТипПроблемы=Перечисления.ТипыПроблем.Порядок;
			Запись.Статус=Перечисления.СтатусыОбработки.НеТребуется;
		КонецЕсли;
	КонецЦикла;
	
	
	Если ЕстьИзменения=Истина Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроставитьСтатусОбработаноПоUID(Сценарий,Ключ,UID) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сравнение.Сценарий КАК Сценарий,
	|	Сравнение.Ключ КАК Ключ,
	|	Сравнение.КлючИзменения КАК КлючИзменения
	|ИЗ
	|	РегистрСведений.СравнениеКонфигураций КАК Сравнение
	|ГДЕ
	|	Сравнение.Сценарий = &Сценарий
	|	И Сравнение.Ключ = &Ключ
	|	И Сравнение.UID = &UID";
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("Ключ",Ключ);
	Запрос.УстановитьПараметр("UID",UID);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// если такие записи вообще есть
	Если Выборка.Следующий() Тогда
		НаборЗаписей = РегистрыСведений.СравнениеКонфигураций.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		НаборЗаписей.Отбор.Ключ.Установить(Ключ);
		НаборЗаписей.Прочитать(); 
		
		ТребуетсяЗапись = Ложь;
		
		Для каждого Запись из НаборЗаписей Цикл
			Если НРег(UID)=Запись.UID И НЕ Запись.Статус=Перечисления.СтатусыОбработки.Обработан Тогда
				Запись.Статус=Перечисления.СтатусыОбработки.Обработан;
				ТребуетсяЗапись=Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяЗапись=Истина Тогда
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти

#Область ПрименениеИзменений

Функция ПолучитьДанныеРассчитанныеИзменения(Знач Сценарий,Знач Ключ=Неопределено) Экспорт
	
	ДанныеИсходныеИзменения = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Изм.Сценарий КАК Сценарий,
	|	Изм.Ключ КАК Ключ,
	|	Изм.КлючИзменения КАК КлючИзменения,
	|	Изм.Текст КАК Текст,
	|	Изм.ТипИзменений КАК ТипИзменений,
	|	Изм.ОтНачалаФайла КАК ОтНачалаФайла,
	|	Изм.ИмяФункции КАК ИмяФункции,
	|	Изм.ОтНачалаФункции КАК ОтНачалаФункции,
	|	Изм.ИмяПредыдущейФункции КАК ИмяПредыдущейФункции,
	|	Изм.ОтОкончанияФункции КАК ОтОкончанияФункции,
	|	Изм.Длина КАК Длина,
	|	Изм.ВероятностьУспеха КАК ВероятностьУспеха,
	|	Изм.Проблема КАК Проблема,
	|	Изм.ЯкорьПеред КАК ЯкорьПеред,
	|	Изм.ЯкорьПосле КАК ЯкорьПосле,
	|	Изм.ТипПроблемы КАК ТипПроблемы,
	|	Изм.UID КАК UID
	|ИЗ
	|	РегистрСведений.РасчетИзмененийКонфигураций КАК Изм
	|ГДЕ
	|	Изм.Сценарий = &Сценарий
	|	И (Изм.Ключ = &Ключ
	|			ИЛИ &Ключ = НЕОПРЕДЕЛЕНО)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтНачалаФайла,
	|	ВЫБОР
	|		КОГДА Изм.ТипИзменений = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.Удаление)
	|			ТОГДА 1
	|		КОГДА Изм.ТипИзменений = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.Вставка)
	|			ТОГДА 2
	|		ИНАЧЕ 10
	|	КОНЕЦ";             
	
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("Ключ",Ключ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл   
		СтруктураСтроки = Новый Структура("Ключ,Текст,ТипИзменений,ИмяФункции,ИмяПредыдущейФункции,ОтНачалаФайла,ОтНачалаФункции,ОтОкончанияФункции,Длина,ЯкорьПеред,ЯкорьПосле,Проблема,ТипПроблемы,UID");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки,Выборка);
		ДанныеИсходныеИзменения.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат ДанныеИсходныеИзменения;
	
КонецФункции      

Функция ПолучитьДанныеРассчитанныеИзмененияСУчетомРучнойПравки(Знач Сценарий,Знач Ключ=Неопределено) Экспорт
	
	ДанныеИсходныеИзменения = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИзмРуч.Сценарий КАК Сценарий,
	|	ИзмРуч.Ключ КАК Ключ,
	|	ИзмРуч.КлючИзменения КАК КлючИзменения,
	|	ИзмРуч.Текст КАК Текст,
	|	ИзмРуч.ТипИзменений КАК ТипИзменений,
	|	ИзмРуч.ОтНачалаФайла КАК ОтНачалаФайла,
	|	ИзмРуч.ИмяФункции КАК ИмяФункции,
	|	ИзмРуч.ОтНачалаФункции КАК ОтНачалаФункции,
	|	ИзмРуч.ИмяПредыдущейФункции КАК ИмяПредыдущейФункции,
	|	ИзмРуч.ОтОкончанияФункции КАК ОтОкончанияФункции,
	|	ИзмРуч.Длина КАК Длина,
	|	ИзмРуч.ВероятностьУспеха КАК ВероятностьУспеха,
	|	ИзмРуч.Проблема КАК Проблема,
	|	ИзмРуч.ЯкорьПеред КАК ЯкорьПеред,
	|	ИзмРуч.ЯкорьПосле КАК ЯкорьПосле,
	|	ИзмРуч.ТипПроблемы КАК ТипПроблемы,
	|	ИзмРуч.UID КАК UID
	|ПОМЕСТИТЬ ВтИзмРуч
	|ИЗ
	|	РегистрСведений.РасчетИзмененийКонфигурацийРучнаяПравка КАК ИзмРуч
	|ГДЕ
	|	ИзмРуч.Сценарий = &Сценарий
	|	И (ИзмРуч.Ключ = &Ключ
	|			ИЛИ &Ключ = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Изм.Сценарий КАК Сценарий,
	|	Изм.Ключ КАК Ключ,
	|	Изм.КлючИзменения КАК КлючИзменения,
	|	Изм.Текст КАК Текст,
	|	Изм.ТипИзменений КАК ТипИзменений,
	|	Изм.ОтНачалаФайла КАК ОтНачалаФайла,
	|	Изм.ИмяФункции КАК ИмяФункции,
	|	Изм.ОтНачалаФункции КАК ОтНачалаФункции,
	|	Изм.ИмяПредыдущейФункции КАК ИмяПредыдущейФункции,
	|	Изм.ОтОкончанияФункции КАК ОтОкончанияФункции,
	|	Изм.Длина КАК Длина,
	|	Изм.ВероятностьУспеха КАК ВероятностьУспеха,
	|	Изм.Проблема КАК Проблема,
	|	Изм.ЯкорьПеред КАК ЯкорьПеред,
	|	Изм.ЯкорьПосле КАК ЯкорьПосле,
	|	Изм.ТипПроблемы КАК ТипПроблемы,
	|	ВЫБОР
	|		КОГДА Изм.ТипИзменений = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.Удаление)
	|			ТОГДА 1
	|		КОГДА Изм.ТипИзменений = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.Вставка)
	|			ТОГДА 2
	|		ИНАЧЕ 10
	|	КОНЕЦ КАК Порядок,
	|	Изм.UID КАК UID
	|ИЗ
	|	РегистрСведений.РасчетИзмененийКонфигураций КАК Изм
	|ГДЕ
	|	Изм.Сценарий = &Сценарий
	|	И (Изм.Ключ = &Ключ
	|			ИЛИ &Ключ = НЕОПРЕДЕЛЕНО)
	|	И НЕ (Изм.Сценарий, Изм.Ключ) В
	|				(ВЫБРАТЬ
	|					ВтИзмРуч.Сценарий,
	|					ВтИзмРуч.Ключ
	|				ИЗ
	|					ВтИзмРуч)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Изм.Сценарий,
	|	Изм.Ключ,
	|	Изм.КлючИзменения,
	|	Изм.Текст,
	|	Изм.ТипИзменений,
	|	Изм.ОтНачалаФайла,
	|	Изм.ИмяФункции,
	|	Изм.ОтНачалаФункции,
	|	Изм.ИмяПредыдущейФункции,
	|	Изм.ОтОкончанияФункции,
	|	Изм.Длина,
	|	Изм.ВероятностьУспеха,
	|	Изм.Проблема,
	|	Изм.ЯкорьПеред,
	|	Изм.ЯкорьПосле,
	|	Изм.ТипПроблемы,
	|	ВЫБОР
	|		КОГДА Изм.ТипИзменений = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.Удаление)
	|			ТОГДА 1
	|		КОГДА Изм.ТипИзменений = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.Вставка)
	|			ТОГДА 2
	|		ИНАЧЕ 10
	|	КОНЕЦ,
	|	Изм.UID
	|ИЗ
	|	ВтИзмРуч КАК Изм
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтНачалаФайла,
	|	Порядок";             
	
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("Ключ",Ключ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл   
		СтруктураСтроки = Новый Структура("Ключ,Текст,ТипИзменений,ИмяФункции,ИмяПредыдущейФункции,ОтНачалаФайла,ОтНачалаФункции,ОтОкончанияФункции,Длина,ЯкорьПеред,ЯкорьПосле,Проблема,ТипПроблемы,UID");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки,Выборка);
		ДанныеИсходныеИзменения.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат ДанныеИсходныеИзменения;
	
КонецФункции 

Функция ПолучитьДанныеИсходныеИзменения(Знач Сценарий,Знач Ключ) Экспорт
	
	ДанныеИсходныеИзменения = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Срав.Сценарий КАК Сценарий,
	|	Срав.Ключ КАК Ключ,
	|	Срав.КлючИзменения КАК КлючИзменения,
	|	Срав.Текст КАК Текст,
	|	Срав.ТипИзменений КАК ТипИзменений,
	|	Срав.ОтНачалаФайла КАК ОтНачалаФайла,
	|	Срав.ИмяФункции КАК ИмяФункции,
	|	Срав.ОтНачалаФункции КАК ОтНачалаФункции,
	|	Срав.ИмяПредыдущейФункции КАК ИмяПредыдущейФункции,
	|	Срав.ОтОкончанияФункции КАК ОтОкончанияФункции,
	|	Срав.Длина КАК Длина,
	|	Срав.ВероятностьУспеха КАК ВероятностьУспеха,
	|	Срав.Проблема КАК Проблема,
	|	Срав.ЯкорьПеред КАК ЯкорьПеред,
	|	Срав.ЯкорьПосле КАК ЯкорьПосле,
	|	Срав.МодульБазовойКонфигурации КАК МодульБазовойКонфигурации,
	|	Срав.МодульИзмененнойКонфигурации КАК МодульИзмененнойКонфигурации,
	|	Срав.ТипПроблемы КАК ТипПроблемы,
	|	Срав.UID КАК UID
	|ИЗ
	|	РегистрСведений.СравнениеКонфигураций КАК Срав
	|ГДЕ
	|	Срав.Сценарий = &Сценарий
	|	И Срав.Ключ = &Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтНачалаФайла,
	|	ВЫБОР
	|		КОГДА Срав.ТипИзменений = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.Удаление)
	|			ТОГДА 1
	|		КОГДА Срав.ТипИзменений = ЗНАЧЕНИЕ(Перечисление.ТипыИзменений.Вставка)
	|			ТОГДА 2
	|		ИНАЧЕ 10
	|	КОНЕЦ";
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("Ключ",Ключ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл   
		СтруктураСтроки = Новый Структура("Ключ,КлючИзменения,Текст,ТипИзменений,ИмяФункции,ИмяПредыдущейФункции,ОтНачалаФайла,ОтНачалаФункции,ОтОкончанияФункции,Длина,ЯкорьПеред,ЯкорьПосле,Проблема,ТипПроблемы,UID");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки,Выборка);
		ДанныеИсходныеИзменения.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат ДанныеИсходныеИзменения;
	
КонецФункции     

Процедура ОчиститьСтарыеЗаписиПоРегиструИзменений(Знач Сценарий,Знач Ключ=Неопределено) Экспорт
	
	// Стираем старые записи
	НаборЗаписей = РегистрыСведений.РасчетИзмененийКонфигураций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	Если НЕ Ключ=Неопределено Тогда
		НаборЗаписей.Отбор.Ключ.Установить(Ключ);
	КонецЕсли;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьНовыеДанныеПоРегиструИзменений(Знач Сценарий,Знач Ключ, НовыеДанные) Экспорт
	
	// мы должны сначала проверить наличие метаданных
	// следующим шагом записывать
	КешКлючей = Новый Соответствие;    
	КешПредставлений = Новый Соответствие;
	МассивПолныхИменОбъектов = новый Массив;
	МассивПолныхИменМодулей = Новый Массив;      
	
	Для каждого стр из НовыеДанные Цикл
		ДанныеКлюча = КешКлючей.Получить(стр.Ключ);
		Если НЕ ДанныеКлюча=Неопределено Тогда
			Продолжить;
		КонецЕсли;     
		
		мРез = ПолучитьПолноеИмяПоПути(стр.Ключ);
		
		ДанныеКлюча = Новый Структура("Ключ,ПолноеИмя,ПолноеИмяМодуль");
		ЗаполнитьЗначенияСвойств(ДанныеКлюча,стр);
		ДанныеКлюча.ПолноеИмя = мРез.ПолноеИмя;
		ДанныеКлюча.ПолноеИмяМодуль = мРез.ПолноеИмяМодуль;
		КешКлючей.Вставить(стр.Ключ,ДанныеКлюча);
		
		КешПредставлений.Вставить(мРез.ПолноеИмя,мРез);
		КешПредставлений.Вставить(мРез.ПолноеИмяМодуль,мРез);
		МассивПолныхИменОбъектов.Добавить(мРез.ПолноеИмя);	
		МассивПолныхИменМодулей.Добавить(мРез.ПолноеИмяМодуль);	
	КонецЦикла; 
	
	
	
	// I) Сначала удаляем
	Для каждого стр из КешКлючей Цикл                          
		Ключ = стр.Ключ;
		ОчиститьСтарыеЗаписиПоРегиструИзменений(Сценарий,Ключ);
	КонецЦикла;
	
	// II) Добавляем
	
	// 2.1. Находим создаем модули
	// по новой
	мРезНов = НайтиСоздатьСправочникиДляРаботы(Сценарий.КонфигурацияБазоваяНовая,МассивПолныхИменОбъектов,МассивПолныхИменМодулей,КешПредставлений);
	// по измененной                                                                                       
	мРезИзм = НайтиСоздатьСправочникиДляРаботы(Сценарий.КонфигурацияИзмененная,МассивПолныхИменОбъектов,МассивПолныхИменМодулей,КешПредставлений);
	
	// 2.2. формируем новые
	Ключ = Неопределено;
	НаборЗаписей = Неопределено;
	МодульНовая = Неопределено;
	МодульИзмененная = Неопределено;
	_counter=0;
	Пока _counter<=НовыеДанные.Количество() И НовыеДанные.Количество()>0 Цикл       
		
		Если _counter=НовыеДанные.Количество() Тогда
			Ключ = Неопределено;
		Иначе
			стр = НовыеДанные[_counter];
		КонецЕсли;	
		
		Если НЕ Ключ = стр.Ключ Тогда
			
			Если НЕ НаборЗаписей=Неопределено Тогда
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
			Если _counter=НовыеДанные.Количество() Тогда
				Прервать;
			КонецЕсли;      
			
			Ключ = стр.Ключ;
			ДанныеКлюча = КешКлючей.Получить(стр.Ключ);
			МодульИзмененная = мРезИзм.КешМодулей.Получить(ДанныеКлюча.ПолноеИмяМодуль);
			МодульНовая = мРезНов.КешМодулей.Получить(ДанныеКлюча.ПолноеИмяМодуль);
			
			НаборЗаписей = РегистрыСведений.РасчетИзмененийКонфигураций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
			НаборЗаписей.Отбор.Ключ.Установить(стр.Ключ); 
			
		КонецЕсли;
		
		//КлючИзменения	
		Запись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись,стр);
		
		// основные
		Запись.Сценарий = Сценарий;
		Запись.Ключ = Ключ;                           
		Запись.КлючИзменения = ПолучитьПредставлениеКлючИзмененияСтрокой(стр.ТипИзменений,стр.ОтНачалаФайла);
		
		// остальное
		Запись.МодульИсходнойКонфигурации = МодульИзмененная;
		Запись.МодульЦелевойКонфигурации = МодульНовая;
		Запись.ОтНачалаФайла = стр.ОтНачалаФайла;
		Запись.ОтНачалаФункции = стр.ОтНачалаФункции;
		Запись.ОтОкончанияФункции = стр.ОтОкончанияФункции;
		Если ТипЗнч(стр.ТипИзменений)=Тип("Строка") Тогда
			Если стр.ТипИзменений="ins" Тогда
				Запись.ТипИзменений = Перечисления.ТипыИзменений.Вставка;
			ИначеЕсли стр.ТипИзменений="del" Тогда
				Запись.ТипИзменений = Перечисления.ТипыИзменений.Удаление;
			ИначеЕсли стр.ТипИзменений="eq" Тогда
				Запись.ТипИзменений = Перечисления.ТипыИзменений.Совпадение;
			Иначе                                                        
				Запись.ТипИзменений = Перечисления.ТипыИзменений.Неизвестно;
			КонецЕсли;                      
		Иначе   
			Запись.ТипИзменений = стр.ТипИзменений;
		КонецЕсли;
		
		_counter = _counter+1;
	КонецЦикла;
	
КонецПроцедуры        

Функция ПолучитьПолноеИмяПоПути(ПутьФайл) Экспорт
	
	мРез = Новый Структура("ПолноеИмя,ПолноеИмяМодуль,ТипОбъекта,ИмяОбъекта,ИмяФормы,ИмяМодуля");
	
	МассивЧастей = СтрРазделить(ПутьФайл,"\/",Ложь);
	
	Counter = 0;
	
	// 1. Найдем имя объекта
	Пока Counter<МассивЧастей.Количество() Цикл                                    
		// имя модуля
		Если Найти(МассивЧастей[Counter],".bsl") Тогда
			мРез.Вставить("ИмяМодуля",СтрЗаменить(МассивЧастей[Counter],".bsl",""));
			Если НРег(мРез.ИмяМодуля)=Нрег("Module") Тогда
				мРез.Вставить("ИмяМодуля","Модуль");
			ИначеЕсли НРег(мРез.ИмяМодуля)=Нрег("ManagerModule") Тогда
				мРез.Вставить("ИмяМодуля","МодульМенеджера");
			ИначеЕсли НРег(мРез.ИмяМодуля)=Нрег("RecordSetModule") Тогда
				мРез.Вставить("ИмяМодуля","МодульНабораЗаписей");
			ИначеЕсли НРег(мРез.ИмяМодуля)=Нрег("ObjectModule") Тогда
				мРез.Вставить("ИмяМодуля","МодульОбъекта");
			Иначе
				мРез.Вставить("ИмяМодуля","Модуль");
			КонецЕсли;
			// тип объекта
		ИначеЕсли мРез.ТипОбъекта=Неопределено Тогда  
			Если НРег(МассивЧастей[Counter])=НРег("Documents") Тогда
				мРез.Вставить("ТипОбъекта","Документ");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("CommonModules") Тогда
				мРез.Вставить("ТипОбъекта","ОбщийМодуль");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("Catalogs") Тогда
				мРез.Вставить("ТипОбъекта","Справочник");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("AccumulationRegisters") Тогда
				мРез.Вставить("ТипОбъекта","РегистрНакопления");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("BusinessProcesses") Тогда
				мРез.Вставить("ТипОбъекта","БизнесПроцесс");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("ChartsOfCharacteristicTypes") Тогда
				мРез.Вставить("ТипОбъекта","ПланВидовХарактеристик");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("CommonForms") Тогда
				мРез.Вставить("ТипОбъекта","ОбщаяФорма");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("CommonCommands") Тогда
				мРез.Вставить("ТипОбъекта","ОбщаяКоманда");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("Constants") Тогда
				мРез.Вставить("ТипОбъекта","Константа");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("DataProcessors") Тогда
				мРез.Вставить("ТипОбъекта","Обработка");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("DocumentJournals") Тогда
				мРез.Вставить("ТипОбъекта","ЖурналДокументов");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("Enums") Тогда
				мРез.Вставить("ТипОбъекта","Перечисление");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("ExchangePlans") Тогда
				мРез.Вставить("ТипОбъекта","ПланОбмена");          
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("FilterCriteria") Тогда
				мРез.Вставить("ТипОбъекта","КритерийОтбора");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("InformationRegisters") Тогда
				мРез.Вставить("ТипОбъекта","РегистрСведений");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("Reports") Тогда
				мРез.Вставить("ТипОбъекта","Отчет");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("ScheduledJobs") Тогда
				мРез.Вставить("ТипОбъекта","РегламентноеЗадание");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("Tasks") Тогда
				мРез.Вставить("ТипОбъекта","Задача");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("WebServices") Тогда
				мРез.Вставить("ТипОбъекта","ВебСервис");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("HTTPServices") Тогда
				мРез.Вставить("ТипОбъекта","HTTPСервис");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("AccountingRegisters") Тогда
				мРез.Вставить("ТипОбъекта","РегистрБухгалтерии");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("CalculationRegisters") Тогда
				мРез.Вставить("ТипОбъекта","РегистрРасчетов");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("ChartsOfAccounts") Тогда
				мРез.Вставить("ТипОбъекта","ПланСчетов");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("ChartsOfCalculationTypes") Тогда
				мРез.Вставить("ТипОбъекта","ПланВидовРасчетов");
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("Ext") Тогда
				мРез.Вставить("ТипОбъекта","Конфигурация");             
			ИначеЕсли НРег(МассивЧастей[Counter])=НРег("SettingsStorages") Тогда
				мРез.Вставить("ТипОбъекта","ХранилищаНастроек");
				//ИначеЕсли НРег(МассивЧастей[Counter])=НРег("") Тогда
				//	мРез.Вставить("ТипОбъекта","");
			КонецЕсли;                      
		ИначеЕсли НЕ мРез.ТипОбъекта=Неопределено И мРез.ИмяОбъекта=Неопределено Тогда 
			мРез.Вставить("ИмяОбъекта",МассивЧастей[Counter]);   
			// формы
		ИначеЕсли НРег(МассивЧастей[Counter])=НРег("Forms") Тогда
			Если Counter<МассивЧастей.Количество() Тогда         
				мРез.Вставить("ИмяФормы",МассивЧастей[Counter+1]);   
			КонецЕсли;
		КонецЕсли;   
		
		Counter = Counter+1;
	КонецЦикла;
	
	//"Documents"     
	
	Если мРез.ИмяОбъекта=Неопределено И мРез.ТипОбъекта=Неопределено Тогда
		мРез.Вставить("ПолноеИмя","Тест");  
	ИначеЕсли мРез.ИмяОбъекта=Неопределено Тогда                         
		мРез.Вставить("ПолноеИмя",мРез.ТипОбъекта);  
	Иначе                                                                
		мРез.Вставить("ПолноеИмя",мРез.ТипОбъекта+"."+мРез.ИмяОбъекта);  
	КонецЕсли;             
	
	// если модули конфигурации
	Если мРез.ТипОбъекта="Конфигурация" Тогда
		мРез.Вставить("ПолноеИмяМодуль",мРез.ИмяМодуля);
	ИначеЕсли НЕ мРез.ИмяФормы=Неопределено Тогда
		мРез.Вставить("ПолноеИмяМодуль",мРез.ТипОбъекта+"."+мРез.ИмяОбъекта+".Форма."+мРез.ИмяФормы+"."+мРез.ИмяМодуля);
	ИначеЕсли  НЕ мРез.ИмяОбъекта=Неопределено Тогда
		мРез.Вставить("ПолноеИмяМодуль",мРез.ТипОбъекта+"."+мРез.ИмяОбъекта+"."+мРез.ИмяМодуля);
	Иначе
		мРез.Вставить("ПолноеИмяМодуль",мРез.ИмяМодуля);
	КонецЕсли;                                                                                 
	
	Возврат мРез;
КонецФункции

Функция НайтиСоздатьСправочникиДляРаботы(Конфигурация,МассивПолныхИменОбъектов,МассивПолныхИменМодулей,КешПредставлений)    
	
	мРез = Новый Структура;        
	мРез.Вставить("КешОбъектов",Новый Соответствие);
	мРез.Вставить("КешМодулей",Новый Соответствие);
	
	Для каждого стр из МассивПолныхИменОбъектов Цикл
		мРез.КешОбъектов.Вставить(стр,Справочники.ОбъектыКонфигурации.ПустаяСсылка());	
	КонецЦикла;
	
	Для каждого стр из МассивПолныхИменМодулей Цикл
		мРез.КешМодулей.Вставить(стр,Справочники.СвойстваОбъектаКонфигурации.ПустаяСсылка());	
	КонецЦикла;
	
	// Теперь создаем метаданные, если нужны  
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбКонф.Ссылка КАК Ссылка,
	|	ОбКонф.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	Справочник.ОбъектыКонфигурации КАК ОбКонф
	|ГДЕ
	|	ОбКонф.Конфигурация = &Конфигурация
	|	И НЕ ОбКонф.ПометкаУдаления
	|	И ОбКонф.ПолноеИмя В(&МассивПолныхИменОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Модуль.Ссылка КАК Ссылка,
	|	Модуль.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	Справочник.СвойстваОбъектаКонфигурации КАК Модуль
	|ГДЕ
	|	Модуль.ОбъектКонфигурации.Конфигурация = &Конфигурация
	|	И НЕ Модуль.ПометкаУдаления
	|	И Модуль.ПолноеИмя В(&МассивПолныхИменМодулей)";
	Запрос.УстановитьПараметр("Конфигурация",Конфигурация);
	Запрос.УстановитьПараметр("МассивПолныхИменМодулей",МассивПолныхИменМодулей);
	Запрос.УстановитьПараметр("МассивПолныхИменОбъектов",МассивПолныхИменОбъектов);
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	// I) Ищем объекты
	Выборка = РезультатПакет[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		мРез.КешОбъектов.Вставить(Выборка.ПолноеИмя,Выборка.Ссылка);
	КонецЦикла;      
	
	// II) Ищем свойства
	Выборка = РезультатПакет[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		мРез.КешМодулей.Вставить(Выборка.ПолноеИмя,Выборка.Ссылка);
	КонецЦикла;    
	
	КешДанных = Новый Соответствие;
	
	// теперь создаем, где пустая ссылка
	Для каждого стр из мРез.КешОбъектов Цикл
		Если ЗначениеЗаполнено(стр.Значение) Тогда
			Продолжить;
		КонецЕсли;                
		Описание = КешПредставлений.Получить(стр.Ключ);
		Если Описание=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// создаем новый объект
		ОбКонф = Справочники.ОбъектыКонфигурации.СоздатьЭлемент();
		ОбКонф.Конфигурация = Конфигурация;
		ОбКонф.ПолноеИмя = стр.Ключ;
		ОбКонф.Наименование = стр.Ключ;        
		Если ЗначениеЗаполнено(Описание.ТипОбъекта) Тогда
			ОбКонф.Родитель = ПолучитьРодителяОбъектаКонфигурации(Конфигурация,Описание.ТипОбъекта,КешДанных);
			ОбКонф.Тип = Перечисления.ТипыОбъектов[Описание.ТипОбъекта]; 
		КонецЕсли;
		ОбКонф.Записать();
		мРез.КешОбъектов.Вставить(стр.Ключ,ОбКонф.Ссылка);
	КонецЦикла;
	
	// тперь свойства создаем
	Для каждого стр из мРез.КешМодулей Цикл
		Если ЗначениеЗаполнено(стр.Значение) Тогда
			Продолжить;
		КонецЕсли;                
		Описание = КешПредставлений.Получить(стр.Ключ);
		Если Описание=Неопределено Тогда
			Продолжить;
		КонецЕсли;             
		ОбъектКонфигурации = мРез.КешОбъектов.Получить(Описание.ПолноеИмя);
		// создаем новый объект
		ОбКонф = Справочники.СвойстваОбъектаКонфигурации.СоздатьЭлемент();
		ОбКонф.ОбъектКонфигурации = ОбъектКонфигурации;
		ОбКонф.ПолноеИмя = стр.Ключ;
		ОбКонф.Наименование = стр.Ключ;  
		
		ОбКонф.ТипСвойства = Перечисления.ТипыСвойств[Описание.ИмяМодуля];
		
		ОбКонф.Записать();
		мРез.КешМодулей.Вставить(стр.Ключ,ОбКонф.Ссылка);
	КонецЦикла;
	
	Возврат мРез;
КонецФункции     

Функция ПолучитьРодителяОбъектаКонфигурации(Конфигурация,Знач ТипОбъекта,КешДанных)
	
	РодительСсылка = КешДанных.Получить(ТипОбъекта+Строка(Конфигурация.UUID()));
	
	Если НЕ РодительСсылка=Неопределено Тогда
		Возврат РодительСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыКонфигурации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыКонфигурации КАК ОбъектыКонфигурации
	|ГДЕ
	|	ОбъектыКонфигурации.ПолноеИмя = &ПолноеИмя
	|	И НЕ ОбъектыКонфигурации.ПометкаУдаления
	|	И ОбъектыКонфигурации.Конфигурация = &Конфигурация";
	Запрос.УстановитьПараметр("Конфигурация",Конфигурация);
	Запрос.УстановитьПараметр("ПолноеИмя",ТипОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РодительСсылка = Выборка.Ссылка;
	Иначе
		ОбКонф = Справочники.ОбъектыКонфигурации.СоздатьЭлемент();
		ОбКонф.Конфигурация = Конфигурация;                                             
		Если НЕ ТипОбъекта="Конфигурация" Тогда
			ОбКонф.Родитель = ПолучитьРодителяОбъектаКонфигурации(Конфигурация,"Конфигурация",КешДанных);
		КонецЕсли;                    
		ОбКонф.Тип = Перечисления.ТипыОбъектов[ТипОбъекта];
		ОбКонф.ПолноеИмя = ТипОбъекта;
		ОбКонф.Наименование = ТипОбъекта;        
		ОбКонф.Записать();
		РодительСсылка = ОбКонф.Ссылка;
	КонецЕсли;   
	
	КешДанных.Вставить(ТипОбъекта+Строка(Конфигурация.UUID()),РодительСсылка);
	
	Возврат РодительСсылка;
	
КонецФункции


#КонецОбласти    

#Область Задания


Процедура ОчиститьСтарыеЗаписиПоРегиструЗадания(Знач Сценарий,Знач Ключ=Неопределено) Экспорт
	
	// Стираем старые записи
	НаборЗаписей = РегистрыСведений.ЗаданияОбработкиИзмененийКонфигураций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	Если НЕ Ключ=Неопределено Тогда
		НаборЗаписей.Отбор.Ключ.Установить(Ключ);
	КонецЕсли;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьНовыеДанныеПоРегиструЗадания(Знач Сценарий,НовыеДанные) Экспорт
	
	// I) Удалим
	ОчиститьСтарыеЗаписиПоРегиструЗадания(Сценарий);
	
	// II) Добавим новые данные
	НаборЗаписей = РегистрыСведений.ЗаданияОбработкиИзмененийКонфигураций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	
	Для каждого Данные из НовыеДанные Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,Данные);
		Запись.Сценарий = Сценарий;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ОбновитьДанныеПоРегиструЗадания(Знач Сценарий,ИзменяемыеДанные) Экспорт
	
	// I) Обновим данные       
	Для каждого Данные из ИзменяемыеДанные Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаданияОбработкиИзмененийКонфигураций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		НаборЗаписей.Отбор.Ключ.Установить(Данные.Ключ);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись,Данные);
			Запись.Сценарий = Сценарий;
		Иначе
			Запись = НаборЗаписей[0];
			ЗаполнитьЗначенияСвойств(Запись,Данные);
			Запись.Сценарий = Сценарий;
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СоздатьНовоеЗадание(Знач Сценарий,Знач Тип="bsl") Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЗаданияОбработкиИзмененийКонфигураций.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сценарий = Сценарий;
	МенеджерЗаписи.Этап = 1;
	МенеджерЗаписи.Тип = Тип;
	МенеджерЗаписи.Статус = Перечисления.СтатусыОбработкиЗаданий.ТребуетсяОбработка;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область МенеджерЗаданий

#Область Вспомогательные

Функция ПолучитьКоличествоПотоковДоступныхДляЗапуска()
	
	Перем Выборка;
	
	ДоступноДляЗапуска = 1;
	
	// получим задания и будем их отрабатывать по порядку
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ПОМЕСТИТЬ ВтКолВоВРаботе
	|ИЗ
	|	РегистрСведений.ЗаданияОбработкиИзмененийКонфигураций КАК Задания
	|ГДЕ
	|	Задания.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаданий.ВРаботе))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Настройки.ЗначениеЧисло - ВтКолВоВРаботе.Количество КАК ДоступноДляЗапуска
	|ИЗ
	|	РегистрСведений.НастройкиМеханизмаИзмененийКонфигураций КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКолВоВРаботе КАК ВтКолВоВРаботе
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Настройки.Ключ = ЗНАЧЕНИЕ(Справочник.КлючиНастроекОбработкиДанных.КоличествоПотоков)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// если есть, то берем доступное для запуска
	// иначе будет по умолчанию 1
	Если Выборка.Следующий() Тогда   
		ДоступноДляЗапуска = Выборка.ДоступноДляЗапуска;
	КонецЕсли;
	
	Возврат ДоступноДляЗапуска;
КонецФункции             

Функция ПолучитьИнформациюПоДобавлениюКомментариев() Экспорт
	
	мРез = Новый Структура();
	мРез.Вставить("ДобавлятьКомментарииПриВставке",Истина);
	мРез.Вставить("ДобавлятьКомментарииПриУдалении",Истина);
	мРез.Вставить("УдалятьУдаленныеСтрокиИзИтоговогоФайла",Ложь);
	мРез.Вставить("ШаблоНачалаВставки",">>> auto_insert_start");
	мРез.Вставить("ШаблоОкончанияВставки","<<< auto_insert_end");
	мРез.Вставить("ШаблоНачалаУдаления",">>> auto_delete_start");
	мРез.Вставить("ШаблоОкончанияУдаления","<<< auto_delete_end");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Настройки.Ключ КАК Ключ,
	|	Настройки.ЗначениеЧисло КАК ЗначениеЧисло,
	|	Настройки.ЗначениеБулево КАК ЗначениеБулево,
	|	Настройки.ЗначениеСтрока КАК ЗначениеСтрока
	|ИЗ
	|	РегистрСведений.НастройкиМеханизмаИзмененийКонфигураций КАК Настройки
	|ГДЕ
	|	Настройки.Ключ В(&МассивКлючей)";           
	МассивКлючей = Новый Массив;
	МассивКлючей.Добавить(Справочники.КлючиНастроекОбработкиДанных.ДобавлятьКомментарииПриВставке);
	МассивКлючей.Добавить(Справочники.КлючиНастроекОбработкиДанных.ДобавлятьКомментарииПриУдалении);
	МассивКлючей.Добавить(Справочники.КлючиНастроекОбработкиДанных.ШаблонКомментарияПриВставке);
	МассивКлючей.Добавить(Справочники.КлючиНастроекОбработкиДанных.ШаблонКомментарияПриУдалении);
	МассивКлючей.Добавить(Справочники.КлючиНастроекОбработкиДанных.УдалятьУдаленныеСтрокиИзИтоговогоФайла);
	Запрос.УстановитьПараметр("МассивКлючей",МассивКлючей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ключ=Справочники.КлючиНастроекОбработкиДанных.ДобавлятьКомментарииПриВставке Тогда
			мРез.ДобавлятьКомментарииПриВставке=Выборка.ЗначениеБулево;
		ИначеЕсли Выборка.Ключ=Справочники.КлючиНастроекОбработкиДанных.ДобавлятьКомментарииПриУдалении Тогда
			мРез.ДобавлятьКомментарииПриУдалении=Выборка.ЗначениеБулево;
		ИначеЕсли Выборка.Ключ=Справочники.КлючиНастроекОбработкиДанных.УдалятьУдаленныеСтрокиИзИтоговогоФайла Тогда
			мРез.УдалятьУдаленныеСтрокиИзИтоговогоФайла=Выборка.ЗначениеБулево;
		ИначеЕсли Выборка.Ключ=Справочники.КлючиНастроекОбработкиДанных.ШаблонКомментарияПриВставке Тогда
			мЧастей = СтрРазделить(Выборка.ЗначениеСтрока,Символы.ПС+",;",Ложь);
			Если мЧастей.Количество()>=2 Тогда
				мРез.ШаблоНачалаВставки=мЧастей[0];
				мРез.ШаблоОкончанияВставки=мЧастей[1];
			КонецЕсли;
		ИначеЕсли Выборка.Ключ=Справочники.КлючиНастроекОбработкиДанных.ШаблонКомментарияПриУдалении Тогда
			мЧастей = СтрРазделить(Выборка.ЗначениеСтрока,Символы.ПС+",;",Ложь);
			Если мЧастей.Количество()>=2 Тогда
				мРез.ШаблоНачалаУдаления=мЧастей[0];
				мРез.ШаблоОкончанияУдаления=мЧастей[1];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат мРез;
КонецФункции

#КонецОбласти

#Область Менеджер

// выполняет поиск заданий для чтения файлов
Функция ПолучитьНовыеЗаданияЗагрузкиФайлов()
	
	МассивЗаданий = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.Сценарий КАК Сценарий
	|ИЗ
	|	РегистрСведений.ЗаданияОбработкиИзмененийКонфигураций КАК Задания
	|ГДЕ
	|	Задания.Этап = 1
	|	И Задания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаданий.ТребуетсяОбработка)
	|	И НЕ Задания.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииОбработкиДанных.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура("Сценарий",Выборка.Сценарий);
		МассивЗаданий.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат МассивЗаданий;
	
КонецФункции  

Функция ПолучитьНовыеЗаданияСравненияКонфигураций()
	
	МассивЗаданий = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.Сценарий КАК Сценарий,
	|	Задания.Ключ КАК Ключ
	|ИЗ
	|	РегистрСведений.ЗаданияОбработкиИзмененийКонфигураций КАК Задания
	|ГДЕ
	|	Задания.Этап = 2
	|	И Задания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаданий.ТребуетсяОбработка)
	|	И НЕ Задания.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииОбработкиДанных.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура("Сценарий,Ключ",Выборка.Сценарий,Выборка.Ключ);
		МассивЗаданий.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат МассивЗаданий;
	
КонецФункции

Функция ПолучитьНовыеЗаданияРасчетаИзменений()
	
	МассивЗаданий = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.Сценарий КАК Сценарий,
	|	Задания.Ключ КАК Ключ
	|ИЗ
	|	РегистрСведений.ЗаданияОбработкиИзмененийКонфигураций КАК Задания
	|ГДЕ
	|	Задания.Этап = 3
	|	И Задания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаданий.ТребуетсяОбработка)
	|	И НЕ Задания.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииОбработкиДанных.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура("Сценарий,Ключ",Выборка.Сценарий,Выборка.Ключ);
		МассивЗаданий.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат МассивЗаданий;
	
КонецФункции   

Функция ПолучитьНовыеЗаданияЗаписиИзменений()
	
	МассивЗаданий = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.Сценарий КАК Сценарий,
	|	Задания.Ключ КАК Ключ
	|ИЗ
	|	РегистрСведений.ЗаданияОбработкиИзмененийКонфигураций КАК Задания
	|ГДЕ
	|	Задания.Этап = 4
	|	И Задания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаданий.ТребуетсяОбработка)
	|	И НЕ Задания.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииОбработкиДанных.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура("Сценарий,Ключ",Выборка.Сценарий,Выборка.Ключ);
		МассивЗаданий.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат МассивЗаданий;
	
КонецФункции

// выполняет поиск заданий для чтения файлов
Функция ПолучитьВсеЗаданияВРаботе()
	
	МассивЗаданий = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.Сценарий КАК Сценарий,
	|	Задания.Ключ КАК Ключ,
	|	Задания.GuidЗадания КАК GuidЗадания
	|ИЗ
	|	РегистрСведений.ЗаданияОбработкиИзмененийКонфигураций КАК Задания
	|ГДЕ
	|	Задания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаданий.ВРаботе)
	|	И НЕ Задания.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииОбработкиДанных.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура("Сценарий,Ключ,GuidЗадания",Выборка.Сценарий,Выборка.Ключ,Выборка.GuidЗадания);
		МассивЗаданий.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат МассивЗаданий;
	
КонецФункции

Функция ЗапуститьФоновоеВыполнение(ИмяФоновогоЗадания,ПараметрыВыполнения=Неопределено) Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	НовоеЗадание = ФоновыеЗадания.Выполнить(ИмяФоновогоЗадания,ПараметрыВыполнения,УникальныйИдентификатор);
	
	Возврат НовоеЗадание.УникальныйИдентификатор;
КонецФункции

Функция ПолучитьСведенияФоновогоЗадания(Знач GuidЗадания)
	
	Результат = Новый Структура("Состояние,ТекстОшибки,Конец",Неопределено,Неопределено,Неопределено);
	
	Если ТипЗнч(GuidЗадания)=Тип("Строка") Тогда
		UUID = Новый UUID(GuidЗадания);
	Иначе
		UUID = GuidЗадания;
	КонецЕсли;
	
		
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(UUID);
	
	Если Задание=Неопределено Тогда
		Результат.Конец = Дата(1,1,1);
		Результат.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно;
		Результат.ТекстОшибки = "Не обнаружено фоновое задение";
	Иначе      
		Результат.Конец = Задание.Конец;
		Результат.Состояние = Задание.Состояние;          
		Если НЕ Задание.ИнформацияОбОшибке=Неопределено Тогда
			Результат.ТекстОшибки = Задание.ИнформацияОбОшибке.Описание+Символы.ПС+Задание.ИнформацияОбОшибке.ИсходнаяСтрока;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции

Процедура УстановитьПараметрыЗаданияПриЗапускеВыполнении(Сценарий,Ключ,GuidЗадания,Статус,ТекстОшибки)
	
	Менеджер = РегистрыСведений.ЗаданияОбработкиИзмененийКонфигураций.СоздатьМенеджерЗаписи();
	Менеджер.Сценарий = Сценарий;
	Менеджер.Ключ = Ключ;  
	
	Менеджер.Прочитать();
	
	Менеджер.Статус = Статус;
	Менеджер.ТекстОшибки = ТекстОшибки;
	Менеджер.GuidЗадания = GuidЗадания;
	Менеджер.Записать(Истина);
	
КонецПроцедуры    

Процедура УстановитьПараметрыЗаданияПриПереключенииЭтапа(Сценарий,Ключ,Статус,Этап)
	
	Менеджер = РегистрыСведений.ЗаданияОбработкиИзмененийКонфигураций.СоздатьМенеджерЗаписи();
	Менеджер.Сценарий = Сценарий;
	Менеджер.Ключ = Ключ;  
	
	Менеджер.Прочитать();
	
	Менеджер.Статус = Статус;
	Менеджер.GuidЗадания = "";
	Менеджер.Этап = Этап;
	Менеджер.Записать(Истина);
	
КонецПроцедуры  

Процедура УдалитьПараметрыЗаданияПриПереключенииЭтапа(Сценарий,Ключ)
	
	Менеджер = РегистрыСведений.ЗаданияОбработкиИзмененийКонфигураций.СоздатьМенеджерЗаписи();
	Менеджер.Сценарий = Сценарий;
	Менеджер.Ключ = Ключ;  
	
	Менеджер.Удалить();
	
КонецПроцедуры

Функция ПолучитьЭтапыПоСтроке(ТекстоваяСтрока) 
	
	Этапы = Новый Соответствие;
	
	МассивЭтапов = СтрРазделить(ТекстоваяСтрока,", "+Символы.ПС,Ложь);
	Для каждого Этап из МассивЭтапов Цикл                             
		Попытка
			Этапы.Вставить(Число(Этап),Истина);
		Исключение                                                         
			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ПолучитьЭтапыПоСтроке",УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;
	КонецЦикла;   
	
	Возврат Этапы;
	
КонецФункции

Процедура ПереключитьСтатусыПоПроцессу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Сценарий КАК Сценарий,
	|	Задания.Сценарий.ОстанавливатьсяНаЭтапах КАК ОстанавливатьсяНаЭтапах,
	|	Задания.Сценарий.ЗавершитьПослеЭтапа КАК ЗавершитьПослеЭтапа
	|ИЗ
	|	РегистрСведений.ЗаданияОбработкиИзмененийКонфигураций КАК Задания
	|ГДЕ
	|	Задания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаданий.Обработан)
	|	И НЕ Задания.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииОбработкиДанных.ПустаяСсылка)
	|	И Задания.Этап В (2, 3, 4)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задания.Сценарий КАК Сценарий,
	|	Задания.Ключ КАК Ключ,
	|	Задания.Этап КАК Этап,
	|	Задания.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.ЗаданияОбработкиИзмененийКонфигураций КАК Задания
	|ГДЕ
	|	Задания.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаданий.Обработан)
	|	И НЕ Задания.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииОбработкиДанных.ПустаяСсылка)
	|	И Задания.Этап В (2, 3, 4)";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	НастройкиВыполненияЗадания = Новый Соответствие;
	// получим настройки сценариев
	Выборка = ПакетЗапросов[0].Выбрать();
	Пока Выборка.Следующий() Цикл                                              
		СтруктураНастройки = Новый Структура();  
		СтруктураНастройки.Вставить("ОстанавливатьсяНаЭтапах",ПолучитьЭтапыПоСтроке(Выборка.ОстанавливатьсяНаЭтапах));
		СтруктураНастройки.Вставить("ЗавершитьПослеЭтапа",ПолучитьЭтапыПоСтроке(Выборка.ЗавершитьПослеЭтапа));
		НастройкиВыполненияЗадания.Вставить(Выборка.Сценарий,СтруктураНастройки);
	КонецЦикла;
	
	// обработаем
	Выборка = ПакетЗапросов[1].Выбрать();
	
	// идем по статусам
	Пока Выборка.Следующий() Цикл        

		НовыйСтатус = Перечисления.СтатусыОбработкиЗаданий.ТребуетсяОбработка;
		
		СтруктураНастройки = НастройкиВыполненияЗадания.Получить(Выборка.Сценарий);
		// поставим на паузу, если надо
		Если СтруктураНастройки.ОстанавливатьсяНаЭтапах.Получить(Выборка.Этап)=Истина Тогда
			НовыйСтатус = Перечисления.СтатусыОбработкиЗаданий.Пауза;
		КонецЕсли;
		
		// переключим на следующий этап
		Если Выборка.Этап = 2 Тогда
			УстановитьПараметрыЗаданияПриПереключенииЭтапа(Выборка.Сценарий,Выборка.Ключ,НовыйСтатус,3);
		ИначеЕсли Выборка.Этап = 3 Тогда 
			УстановитьПараметрыЗаданияПриПереключенииЭтапа(Выборка.Сценарий,Выборка.Ключ,НовыйСтатус,4);
		ИначеЕсли Выборка.Этап = 4 Тогда 
			// тут можно удалить чтобы не висело
			УдалитьПараметрыЗаданияПриПереключенииЭтапа(Выборка.Сценарий,Выборка.Ключ);
		КонецЕсли;
		
		
		// Удаляем, если требуется удаление после этапа
		Если СтруктураНастройки.ЗавершитьПослеЭтапа.Получить(Выборка.Этап)=Истина Тогда
			УдалитьПараметрыЗаданияПриПереключенииЭтапа(Выборка.Сценарий,Выборка.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура МенеджерОбработкиИзмененийКонфигураций() Экспорт
	
	//I) сначала обработка фоновых, которые в работе
	МассивЗаданийВработе = ПолучитьВсеЗаданияВРаботе();
	
	Для каждого стр из МассивЗаданийВработе Цикл
		мРез = ПолучитьСведенияФоновогоЗадания(стр.GuidЗадания);
		Если мРез.Состояние=СостояниеФоновогоЗадания.Завершено Тогда
			УстановитьПараметрыЗаданияПриЗапускеВыполнении(стр.Сценарий,стр.Ключ,стр.GuidЗадания,Перечисления.СтатусыОбработкиЗаданий.Обработан,"");	
		ИначеЕсли мРез.Состояние=СостояниеФоновогоЗадания.Активно Тогда
			// ничего не делаем
		Иначе // это ошибка
			УстановитьПараметрыЗаданияПриЗапускеВыполнении(стр.Сценарий,стр.Ключ,стр.GuidЗадания,Перечисления.СтатусыОбработкиЗаданий.Ошибка,мРез.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;  
	
	// II) Переключим статусы заданий
	ПереключитьСтатусыПоПроцессу();
	
	// III) запуск новых   
	КоличествоДоступноДляЗапуска = ПолучитьКоличествоПотоковДоступныхДляЗапуска();
	
	// Загружаем файлы для задания
	МассивЗаданийНовые = ПолучитьНовыеЗаданияЗагрузкиФайлов();
	Для каждого стр из МассивЗаданийНовые Цикл
		Если КоличествоДоступноДляЗапуска<=0 Тогда
			Прервать;
		КонецЕсли;    
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(стр.Сценарий);
		GuidЗадания = ЗапуститьФоновоеВыполнение("ОбработкаИзмененийКонфигурацийКлиентСервер.НайтиЗаписатьИнформациюПоФайламВКаталогеСОтличиями",ПараметрыВыполнения);
		УстановитьПараметрыЗаданияПриЗапускеВыполнении(стр.Сценарий,"",Строка(GuidЗадания),Перечисления.СтатусыОбработкиЗаданий.ВРаботе,"");
		КоличествоДоступноДляЗапуска = КоличествоДоступноДляЗапуска - 1;
	КонецЦикла;   
	
	// Сравниваем файлы базовой и изменной
	МассивЗаданийНовые = ПолучитьНовыеЗаданияСравненияКонфигураций();
	Для каждого стр из МассивЗаданийНовые Цикл
		Если КоличествоДоступноДляЗапуска<=0 Тогда
			Прервать;
		КонецЕсли;    
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(стр.Сценарий);
		МассивКлючей = Новый Массив;
		МассивКлючей.Добавить(стр.Ключ);
		ПараметрыВыполнения.Добавить(МассивКлючей);
		GuidЗадания = ЗапуститьФоновоеВыполнение("ОбработкаИзмененийКонфигурацийКлиентСервер.РассчитатьСравненияКонфигурацийПоНаборуФайлов",ПараметрыВыполнения);
		УстановитьПараметрыЗаданияПриЗапускеВыполнении(стр.Сценарий,стр.Ключ,Строка(GuidЗадания),Перечисления.СтатусыОбработкиЗаданий.ВРаботе,"");
		КоличествоДоступноДляЗапуска = КоличествоДоступноДляЗапуска - 1;
	КонецЦикла;   
	
	// Рассчитываем изменения к новой базовой
	МассивЗаданийНовые = ПолучитьНовыеЗаданияРасчетаИзменений();
	Для каждого стр из МассивЗаданийНовые Цикл
		Если КоличествоДоступноДляЗапуска<=0 Тогда
			Прервать;
		КонецЕсли;    
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(стр.Сценарий);
		МассивКлючей = Новый Массив;
		МассивКлючей.Добавить(стр.Ключ);
		ПараметрыВыполнения.Добавить(МассивКлючей);
		GuidЗадания = ЗапуститьФоновоеВыполнение("ОбработкаИзмененийКонфигурацийКлиентСервер.РассчитатьИзмененияНовойКонфигурацииПоНаборуФайлов",ПараметрыВыполнения);
		УстановитьПараметрыЗаданияПриЗапускеВыполнении(стр.Сценарий,стр.Ключ,Строка(GuidЗадания),Перечисления.СтатусыОбработкиЗаданий.ВРаботе,"");
		КоличествоДоступноДляЗапуска = КоличествоДоступноДляЗапуска - 1;
	КонецЦикла;  
	
	// Применяем изменения и копируем в новый каталог
	МассивЗаданийНовые = ПолучитьНовыеЗаданияЗаписиИзменений();
	Для каждого стр из МассивЗаданийНовые Цикл
		Если КоличествоДоступноДляЗапуска<=0 Тогда
			Прервать;
		КонецЕсли;    
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(стр.Сценарий);
		МассивКлючей = Новый Массив;
		МассивКлючей.Добавить(стр.Ключ);
		ПараметрыВыполнения.Добавить(МассивКлючей);
		GuidЗадания = ЗапуститьФоновоеВыполнение("ОбработкаИзмененийКонфигурацийКлиентСервер.ПеренестиИзмененияКодаПоНаборуФайлов",ПараметрыВыполнения);
		УстановитьПараметрыЗаданияПриЗапускеВыполнении(стр.Сценарий,стр.Ключ,Строка(GuidЗадания),Перечисления.СтатусыОбработкиЗаданий.ВРаботе,"");
		КоличествоДоступноДляЗапуска = КоличествоДоступноДляЗапуска - 1;
	КонецЦикла;  
	
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти