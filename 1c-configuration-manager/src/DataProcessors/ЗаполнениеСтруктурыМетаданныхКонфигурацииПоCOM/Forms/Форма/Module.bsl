&НаКлиенте
Перем КомБазаПерваяКонфигурация;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
                  
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ ЗначениеЗаполнено(СтрокаТиповМетаданных) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПолучаемыеТипы;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипОбработки) Тогда
		ТипОбработки = "ДобавитьНовые";
	КонецЕсли;
	
	Элементы.ТипОбработки.СписокВыбора.Добавить("ДобавитьНовые","(+) новые");
	Элементы.ТипОбработки.СписокВыбора.Добавить("ОбновитьСуществующие","(@) обновить");
	Элементы.ТипОбработки.СписокВыбора.Добавить("УдалитьЛишние","(-) удалить");
	Элементы.ТипОбработки.СписокВыбора.Добавить("ДобавитьНовыеИУдалитьЛишние","(+) и (-)");
	Элементы.ТипОбработки.СписокВыбора.Добавить("ДобавитьНовыеИУдалитьЛишниеИОбновитьСуществующие","(+) и (-) и (@)");
	
	Элементы.ТаблицаМетаданныхДействие.РежимВыбораИзСписка = Истина;
	Элементы.ТаблицаМетаданныхДействие.СписокВыбора.Добавить("","---");
	Элементы.ТаблицаМетаданныхДействие.СписокВыбора.Добавить("Добавить","(+)");
	Элементы.ТаблицаМетаданныхДействие.СписокВыбора.Добавить("Удалить","(-)");
	Элементы.ТаблицаМетаданныхДействие.СписокВыбора.Добавить("Обновить","(@)");
	
	Если СоздаваемыеТипыСвойств.Количество()=0 Тогда
		стр_н = СоздаваемыеТипыСвойств.Добавить();
		стр_н.ТипСвойства = ПредопределенноеЗначение("Перечисление.ТипыСвойств.Форма");
		стр_н = СоздаваемыеТипыСвойств.Добавить();
		стр_н.ТипСвойства = ПредопределенноеЗначение("Перечисление.ТипыСвойств.Команда");
		стр_н = СоздаваемыеТипыСвойств.Добавить();
		стр_н.ТипСвойства = ПредопределенноеЗначение("Перечисление.ТипыСвойств.Макет");
		стр_н = СоздаваемыеТипыСвойств.Добавить();
		стр_н.ТипСвойства = ПредопределенноеЗначение("Перечисление.ТипыСвойств.ТабличнаяЧасть");
	КонецЕсли;
	
	Конфигурация = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(БазаДанныхПерваяКонфигурация,"Конфигурация");
	
КонецПроцедуры

	 
&НаКлиенте
Функция ПолучитьКомПодключение(КомБаза,БазаДанных)
	Попытка                                                 
		СтрокаПодключения = ОбщегоНазначенияКлиентСервер.ЗначениеРеквизитаОбъекта(БазаДанных,"СтрокаПодключения");
		Если НЕ ЗначениеЗаполнено(СтрокаПодключения) Тогда
			ВызватьИсключение "Не заполнена строка соединения в базе: "+БазаДанных;
		КонецЕсли;
		Если КомБаза=Неопределено Тогда
			КомОбъект = Новый COMОбъект("V83.COMConnector");
			КомБаза = КомОбъект.Connect(СтрокаПодключения);
		КонецЕсли;
	Исключение                                                       
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = "Ошибка при создании COM объекта по причине: " + ИнформацияОбОшибке.Описание;
		Если НЕ ИнформацияОбОшибке.Причина=Неопределено Тогда
			ТекстСообщения = ТекстСообщения+Символы.ПС+"Причина: "+ИнформацияОбОшибке.Причина.Описание
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки; 	
	Возврат КомБаза;
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеВнешнейБазы(Команда)
	
	Состояние("Проверка и подключение com...Первая");
	КомБазаПерваяКонфигурация = ПолучитьКомПодключение(КомБазаПерваяКонфигурация,БазаДанныхПерваяКонфигурация);
	
	Если КомБазаПерваяКонфигурация=Неопределено Тогда
		Сообщить("Не удалось установить COM соединение с базой источником!");
		Возврат;
	КонецЕсли;
	
	МассивТиповМетаданных = СтрРазделить(СтрокаТиповМетаданных,", "+Символы.ПС,Ложь);	
	
	// добавим все типы
	Если МассивТиповМетаданных.Количество()=0 Тогда
		МассивТиповМетаданных = ПолучитьМассивТиповПоУмолчанияю();
	КонецЕсли;
	
	СтруктураКонфигурацииПерваяКонфигурация = Новый Структура;
	
	Состояние("Начало получение данных...");		
	
	ш = 1;
	// формируем стуркутры для сравнения
	Для каждого стр из МассивТиповМетаданных Цикл   
		ш=ш+1;
		Состояние("Получение метаданных..."+стр,Окр(ш/МассивТиповМетаданных.Количество()*100));		
		// формируем структуру метаданных первая конфигурация
		ПоискВМетаданныхПолныйКом(КомБазаПерваяКонфигурация,стр,СтруктураКонфигурацииПерваяКонфигурация);
	КонецЦикла;               
	
	Состояние("Заполняем таблицу...");
	
	// заполняем таблицу
	Для каждого стр из МассивТиповМетаданных Цикл 
		
		СоответствиеПерваяКонфигурация = СтруктураКонфигурацииПерваяКонфигурация[стр];
		
		Для каждого элем из СоответствиеПерваяКонфигурация Цикл
			
			стр_н = ТаблицаМетаданных.Добавить();
			ЗаполнитьЗначенияСвойств(стр_н,элем.Значение);
			стр_н.ПолноеИмя = ПреобразоватьАнглийскийРусский(элем.Значение.ПолноеИмя);  
			стр_н.Тип = элем.Значение.ТипТаблицы;
			стр_н.ИндексКартинки = ПолучитьИндексКартинки(стр_н.ПолноеИмя); 
			СтруктураПерваяКонфигурация = СоответствиеПерваяКонфигурация.Получить(элем.Ключ);
			
		КонецЦикла;
		
	КонецЦикла;           
	Состояние("Завершена обработка!");	

	
	
КонецПроцедуры   


&НаКлиенте
Функция ПреобразоватьАнглийскийРусский(Знач Наименование)
	
	Преобразование = Наименование;
	
	Преобразование = СтрЗаменить(Преобразование,".Form.",".Форма.");
	Преобразование = СтрЗаменить(Преобразование,".Template.",".Макет.");
	Преобразование = СтрЗаменить(Преобразование,".TabularSection.",".ТабличнаяЧасть.");
	Преобразование = СтрЗаменить(Преобразование,".Command.",".Команда.");
	Преобразование = СтрЗаменить(Преобразование,".Attribute.",".Атрибут.");
	
	Возврат Преобразование;
	
КонецФункции


&НаКлиенте
Процедура БазаДанныхПерваяКонфигурацияПриИзменении(Элемент)
	КомБазаПерваяКонфигурация = Неопределено;
	Конфигурация = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(БазаДанныхПерваяКонфигурация,"Конфигурация");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,ИмяСвойства)
	
	Попытка
		СтруктураОписания.Вставить(ИмяСвойства,ЭлементМетаданных[ИмяСвойства]);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискВМетаданныхПолныйКом(КомБаза,ИмяМетаданных,СтруктураКонфигурации)
	
	КлючСоответствиеМетаданных = Новый Соответствие;
	СтруктураКонфигурации.Вставить(ИмяМетаданных,КлючСоответствиеМетаданных);
	
	Для каждого ЭлементМетаданных из КомБаза.Метаданные[ИмяМетаданных] Цикл
		
		МассивЧастей = СтрРазделить(ЭлементМетаданных.ПолноеИмя(),".");
		ТипТаблицы = МассивЧастей[0];
		ИмяТаблицы = МассивЧастей[1];
		
		СтруктураОписания = Новый Структура("ТипТаблицы, ПолноеИмя, ИмяТаблицы, ЭтоМетаданные",ТипТаблицы,ЭлементМетаданных.ПолноеИмя(),ЭлементМетаданных.Имя,Истина);
		ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"Синоним");
		ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"Комментарий");
		Если НРег(ИмяМетаданных)="справочник" 
			ИЛИ НРег(ИмяМетаданных)="планвидовхарактеристик" Тогда 
			ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"Иерархический");
			ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"ВидИерархии");
			ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"ОграничиватьКоличествоУровней");
			ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"КоличествоУровней");
		КонецЕсли;                                                                                   
		Если НРег(ИмяМетаданных)="справочник" 
			ИЛИ НРег(ИмяМетаданных)="планвидовхарактеристик"
			ИЛИ НРег(ИмяМетаданных)="плансчетов" Тогда 
			ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"СерииКодов");
		КонецЕсли;
		ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"АвтоНумерация");
		ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"Периодичность");
		ПолучитьСвойствоМетаданныхКом(СтруктураОписания,ЭлементМетаданных,"Подчиненный");
		
		Если Найти(НРег("ОпределяемыйТип  Константа КритерийОтбора ПланВидовХарактеристик "),НРег(ТипТаблицы)) Тогда
			МассивТипов = ДобавитьТипыВТаблицуСравнения(КомБаза,ЭлементМетаданных);
			СтруктураОписания.Вставить("Тип",МассивТипов);         
		КонецЕсли;
		
		Ключ = СтрЗаменить(ЭлементМетаданных.ПолноеИмя(),".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);
		
		// реквизиты                                  
		Если Найти(НРег("Перечисление "),НРег(ТипТаблицы)) Тогда
			ДобавитьЗначенияВТаблицуСравнения(КомБаза,ТипТаблицы,"ЗначенияПеречисления",КлючСоответствиеМетаданных, ЭлементМетаданных);
		// ссылочные
		ИначеЕсли Найти(НРег("Справочник Документ Задача БизнесПроцесс ПланОбмена"),НРег(ТипТаблицы)) Тогда
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Реквизиты",КлючСоответствиеМетаданных, ЭлементМетаданных);
			ДобавитьТабличныеЧастиВТаблицуСравнения(КомБаза,ТипТаблицы,"ТабличныеЧасти",КлючСоответствиеМетаданных, ЭлементМетаданных);
			// регистры
		ИначеЕсли Найти(НРег("РегистрНакопления РегистрСведений РегистрРасчетов РегистрБухгалтерии"),НРег(ТипТаблицы)) Тогда
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Измерения",КлючСоответствиеМетаданных, ЭлементМетаданных);
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Ресурсы",КлючСоответствиеМетаданных, ЭлементМетаданных);
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Реквизиты",КлючСоответствиеМетаданных, ЭлементМетаданных);
		КонецЕсли;     
		
		
		// движения
		Если Найти(НРег("Документ"),НРег(ТипТаблицы)) Тогда
			МассивДвижений = ДобавитьДвиженияВТаблицуСравнения(КомБаза,"Движения",КлючСоответствиеМетаданных, ЭлементМетаданных);
			СтруктураОписания.Вставить("Движения",МассивДвижений);
		КонецЕсли;
		
		// роли	
		Если Найти(НРег("Роль"),НРег(ТипТаблицы)) Тогда
			МассивПрав = ДобавитьПраваВТаблицуСравнения(КомБаза,"Права",КлючСоответствиеМетаданных, ЭлементМетаданных);
			СтруктураОписания.Вставить("Права",МассивПрав);
		КонецЕсли;  
		

		
		
		// предопределенные
		Если Найти(НРег("Справочник ПланВидовХарактеристик"),НРег(ТипТаблицы)) Тогда
			МассивПредопределенных = ДобавитьПредопределенныеВТаблицуСравнения(КомБаза,"Предопределенные",КлючСоответствиеМетаданных, ЭлементМетаданных);
			СтруктураОписания.Вставить("Предопределенные",МассивПредопределенных);
		КонецЕсли;		
		
		// формы     
		Попытка
			ДобавитьФормыВТаблицуСравнения(КомБаза,ТипТаблицы,"Формы",КлючСоответствиеМетаданных, ЭлементМетаданных);
		Исключение
		Конецпопытки;
		
		// команды   
		Попытка
			ДобавитьФормыВТаблицуСравнения(КомБаза,ТипТаблицы,"Команды",КлючСоответствиеМетаданных, ЭлементМетаданных);
		Исключение
		КонецПопытки;
		
		// Макеты   
		Попытка
			ДобавитьФормыВТаблицуСравнения(КомБаза,ТипТаблицы,"Макеты",КлючСоответствиеМетаданных, ЭлементМетаданных);
		Исключение
		КонецПопытки;
		
		
	КонецЦикла;

КонецПроцедуры  

&НаКлиенте
Функция ДобавитьПредопределенныеВТаблицуСравнения(КомБаза,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	Представление = "Predefined";    
	МассивПредопределнных = Новый Массив;
	
	КомФисМасс = ЭлементМетаданных.ПолучитьИменаПредопределенных();
	
	Для каждого стр из КомФисМасс Цикл
		МассивПредопределнных.Добавить(стр);
	КонецЦикла;
	
	Возврат МассивПредопределнных;

КонецФункции

&НаКлиенте
Функция ДобавитьПраваВТаблицуСравнения(КомБаза,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	Представление = "Rights";    
	МассивДвижений = Новый Массив;
	
	// не доступно программно
	//Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл    
	//	МассивДвижений.Добавить(ЭлементРеквизит.Имя);
	//КонецЦикла;
	// Брать из файла	
	//СписокМетаданных = "Константы, Справочники, Документы, РегистрыНакопления, РегистрыСведений, Задачи, БизнесПроцессы";
	//МассивМетаданных = СтрРазделить(СписокМетаданных," ,",Ложь);
	//Для каждого ИмяМетаданных из МассивМетаданных Цикл
	//	Для каждого ком_метаданные из КомБаза.Метаданные[ИмяМетаданных] Цикл
	//		Чтение=Ложь;
	//		Имзенение=Ложь;
	//		Добавление=Ложь;			
	//		Попытка Чтение = КомБаза.ПравоДоступа("Чтение",ком_метаданные); Исключение КонецПопытки;
	//		Попытка Изменение = КомБаза.ПравоДоступа("Изменение",ком_метаданные); Исключение КонецПопытки;
	//		Попытка Добавление = КомБаза.ПравоДоступа("Добавление",ком_метаданные); Исключение КонецПопытки;
	//		Если Чтение=Истина Тогда МассивДвижений.Добавить("Чтение_"+ком_метаданные.Имя); КонецЕсли;
	//		Если Изменение=Истина Тогда МассивДвижений.Добавить("Изменение_"+ком_метаданные.Имя); КонецЕсли;
	//		Если Добавление=Истина Тогда МассивДвижений.Добавить("Добавление_"+ком_метаданные.Имя); КонецЕсли;
	//	КонецЦикла;		
	//КонецЦикла;
	
	Возврат МассивДвижений;

КонецФункции

&НаКлиенте
Функция ДобавитьДвиженияВТаблицуСравнения(КомБаза,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	Представление = "RegisterRecords";    
	МассивДвижений = Новый Массив;
	
	Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл    
		МассивДвижений.Добавить(ЭлементРеквизит.Имя);
	КонецЦикла;
	
	Возврат МассивДвижений;

КонецФункции

&НаКлиенте
Процедура ДобавитьЗначенияВТаблицуСравнения(КомБаза,ТипТаблицы,Имя, КлючСоответствиеМетаданных, ЭлементМетаданных);
	
	Представление = "EnumValue";
	
	
	Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл                                           
		ПолноеИмяРеквизита = ЭлементМетаданных.ПолноеИмя()+"."+Представление+"."+ЭлементРеквизит.Имя;
		СтруктураОписания = Новый Структура("ТипТаблицы,ПолноеИмя, ИмяТаблицы",ТипТаблицы,ПолноеИмяРеквизита,ЭлементРеквизит.Имя);
		Ключ = СтрЗаменить(ПолноеИмяРеквизита,".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);				
	КонецЦикла;

КонецПроцедуры  

&НаКлиенте
Процедура ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных,ИмяТЧ="")
	
	Представление = "";
	Если Имя="Реквизиты" Тогда
		Представление = "Attribute";
	ИначеЕсли Имя="Измерения" Тогда
		Представление = "Dimension";
	ИначеЕсли Имя="Ресурсы" Тогда
		Представление = "Resource";
	КонецЕсли;  
	
	
	Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл                                           
		
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			ПолноеИмяРеквизита = ИмяТЧ+"."+Представление+"."+ЭлементРеквизит.Имя;
		Иначе
			ПолноеИмяРеквизита = ЭлементМетаданных.ПолноеИмя()+"."+Представление+"."+ЭлементРеквизит.Имя;
		КонецЕсли;
		СтруктураОписания = Новый Структура("ТипТаблицы,ПолноеИмя, ИмяТаблицы",ТипТаблицы,ПолноеИмяРеквизита,ЭлементРеквизит.Имя);
		Ключ = СтрЗаменить(ПолноеИмяРеквизита,".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);				
		МассивТипов = ДобавитьТипыВТаблицуСравнения(КомБаза,ЭлементРеквизит);
		СтруктураОписания.Вставить("Тип",МассивТипов);
	КонецЦикла;  
	
	
КонецПроцедуры  

&НаКлиенте
Процедура ДобавитьТабличныеЧастиВТаблицуСравнения(КомБаза,ТипТаблицы,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	
	Представление = "";
	Если Имя="ТабличныеЧасти" Тогда
		Представление = "TabularSection";
	КонецЕсли; 	

	Для каждого ЭлементТабличнаяЧасть из ЭлементМетаданных[Имя] Цикл     
		// сама ТЧ
		ПолноеИмяРеквизита = ЭлементМетаданных.ПолноеИмя()+"."+Представление+"."+ЭлементТабличнаяЧасть.Имя;
		СтруктураОписания = Новый Структура("ТипТаблицы,ПолноеИмя, ИмяТаблицы",ТипТаблицы,ПолноеИмяРеквизита,ЭлементТабличнаяЧасть.Имя);
		Ключ = СтрЗаменить(ПолноеИмяРеквизита,".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);				
		// ее реквизиты
		ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Реквизиты",КлючСоответствиеМетаданных, ЭлементТабличнаяЧасть,ПолноеИмяРеквизита);
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьФормыВТаблицуСравнения(КомБаза,ТипТаблицы,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	Представление = "";
	Если Имя="Формы" Тогда
		Представление = "Form";
	ИначеЕсли Имя="Команды" Тогда
		Представление = "Command";
	ИначеЕсли Имя="Макеты" Тогда
		Представление = "Template";
	КонецЕсли;
	
	
	Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл    
		ПолноеИмяРеквизита = ЭлементМетаданных.ПолноеИмя()+"."+Представление+"."+ЭлементРеквизит.Имя;
		СтруктураОписания = Новый Структура("ТипТаблицы,ПолноеИмя, ИмяТаблицы",ТипТаблицы,ПолноеИмяРеквизита,ЭлементРеквизит.Имя);
		Ключ = СтрЗаменить(ПолноеИмяРеквизита,".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);				
		Если Имя="Команды" Тогда 
			МассивТипов = ДобавитьТипыВТаблицуСравнения(КомБаза,ЭлементРеквизит,"CommandParameterType");
			СтруктураОписания.Вставить("Тип",МассивТипов);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ДобавитьТипыВТаблицуСравнения(КомБаза, ЭлементМетаданных, Имя="Тип")
	
	// типы
	МассивТипов = Новый Массив;                       
	Попытка                                                          
		Для каждого стр из  ЭлементМетаданных.Тип.Типы() Цикл
			МассивТипов.Добавить(КомБаза.XMLТип(стр).ИмяТипа);
		КонецЦикла;
	Исключение
	КонецПопытки;

	Возврат МассивТипов;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТипамиПоУмолчанию(Команда)
	
	МассивТиповМетаданных = ПолучитьМассивТиповПоУмолчанияю();
	
	СтрокаТиповМетаданных = СтрСоединить(МассивТиповМетаданных,", "+Символы.ПС);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивТиповПоУмолчанияю()
	
	Перем МассивТиповМетаданных;
	
	СтрокаТиповМетаданных = "ПланыОбмена, ОбщиеМодули, ОпределяемыеТипы, ОбщиеКартинки, ОбщиеКоманды, ОбщиеМакеты, ГруппыКоманд, ЭлементыСтиля, Стили, Языки, ОбщиеФормы, "; 
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"Подсистемы, ПодпискиНаСобытия, ПараметрыСеанса, Роли, РегламентныеЗадания, ФункциональныеОпции, ";
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"HTTPСервисы, WSСсылки, ПакетыXDTO, WebСервисы, КритерииОтбора, ";
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"Константы, Справочники, НумераторыДокументов, Документы, ЖурналыДокументов, Последовательности, Перечисления, ";	
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"РегистрыСведений, РегистрыНакопления, РегистрыБухгалтерии, РегистрыРасчета, ";         
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"Отчеты, Обработки, ";         
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыСчетов, ";
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"Задачи, БизнесПроцессы, ";
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"ВнешниеИсточникиДанных, ";
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"Боты, ВнешниеИсточникиДанных, ОбщиеРеквизиты, ПараметрыСеанса, ";
	СтрокаТиповМетаданных = СтрокаТиповМетаданных+"ПараметрыФункциональныхОпций,  ";
	
	
	МассивТиповМетаданных = СтрРазделить(СтрокаТиповМетаданных,", "+Символы.ПС,Ложь);
	Возврат МассивТиповМетаданных;

КонецФункции

&НаКлиенте
Функция ПолучитьИндексКартинки(Знач ПолноеИмя)
	ИндексКартинки = 0;   
	ПолноеИмя = НРег(ПолноеИмя);
	
	Если Найти(ПолноеИмя,".form.") Тогда
		ИндексКартинки = 6;
	ИначеЕсли Найти(ПолноеИмя,"константа.") Тогда
		ИндексКартинки = 1;
	ИначеЕсли Найти(ПолноеИмя,"справочник.") Тогда
		ИндексКартинки = 2;
	ИначеЕсли Найти(ПолноеИмя,"перечисление.") Тогда
		ИндексКартинки = 2;
	ИначеЕсли Найти(ПолноеИмя,"документ.") Тогда
		ИндексКартинки = 5;
	ИначеЕсли Найти(ПолноеИмя,"регистрсведений.") Тогда
		ИндексКартинки = 9;
	ИначеЕсли Найти(ПолноеИмя,"регистрнакопления.") Тогда
		ИндексКартинки = 10;
	ИначеЕсли Найти(ПолноеИмя,"бизнеспроцесс.") Тогда
		ИндексКартинки = 13;
	ИначеЕсли Найти(ПолноеИмя,"задача.") Тогда
		ИндексКартинки = 14;
	КонецЕсли;
	
	Возврат ИндексКартинки;
КонецФункции


&НаСервереБезКонтекста
Функция НайтиСправочникОбъектКонфигурации(Знач Конфигурация,Знач ПолноеИмя)
	Ссылка = Неопределено;       
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыКонфигурации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыКонфигурации КАК ОбъектыКонфигурации
	|ГДЕ
	|	ОбъектыКонфигурации.Конфигурация = &Конфигурация
	|	И ОбъектыКонфигурации.ПолноеИмя = &ПолноеИмя";
	Запрос.УстановитьПараметр("Конфигурация",Конфигурация);
	Запрос.УстановитьПараметр("ПолноеИмя",ПолноеИмя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

&НаСервере
Функция СоздатьСправочникСвойствоОбъектаКонфигурации(Источник,КешТиповСоздаваемыхСвойств)
	
	СправочникСвойстваОбъект = Справочники.СвойстваОбъектаКонфигурации.СоздатьЭлемент();

	ЗаполнитьЗначенияСвойств(СправочникСвойстваОбъект,Источник);
	
	СправочникСвойстваОбъект.Наименование = Источник.ПолноеИмя; 
	
	МассивЧастей = СтрРазделить(Источник.ПолноеИмя,".");
	ПолноеИмя = "";
	Если МассивЧастей.Количество()>2 Тогда
		ПолноеИмя = МассивЧастей[0]+"."+МассивЧастей[1];
	КонецЕсли;
	
	СправочникСвойстваОбъект.ОбъектКонфигурации = НайтиСправочникОбъектКонфигурации(Конфигурация,ПолноеИмя);
	
	Если НЕ ЗначениеЗаполнено(СправочникСвойстваОбъект.ОбъектКонфигурации) Тогда 
		Возврат СправочникСвойстваОбъект.Ссылка;
	КонецЕсли;

	//TODO родитель  
	Если СтрНайти(Источник.ПолноеИмя,".Атрибут.") Тогда // пока не обрабатываем
		Возврат СправочникСвойстваОбъект.Ссылка;
	ИначеЕсли СтрНайти(Источник.ПолноеИмя,".Форма.") Тогда
		СправочникСвойстваОбъект.ТипСвойства=Перечисления.ТипыСвойств.Форма;
	ИначеЕсли СтрНайти(Источник.ПолноеИмя,".Макет.") Тогда
		СправочникСвойстваОбъект.ТипСвойства=Перечисления.ТипыСвойств.Макет;
	ИначеЕсли СтрНайти(Источник.ПолноеИмя,".Команда.") Тогда
		СправочникСвойстваОбъект.ТипСвойства=Перечисления.ТипыСвойств.Команда;
	ИначеЕсли СтрНайти(Источник.ПолноеИмя,".ТабличнаяЧасть.") Тогда
		СправочникСвойстваОбъект.ТипСвойства=Перечисления.ТипыСвойств.ТабличнаяЧасть;
	Иначе
		Возврат СправочникСвойстваОбъект.Ссылка;
	КонецЕсли;   
	
	Если НЕ КешТиповСоздаваемыхСвойств.Получить(СправочникСвойстваОбъект.ТипСвойства)=Истина Тогда
		Возврат СправочникСвойстваОбъект.Ссылка;
	КонецЕсли;
	
	Попытка
		СправочникСвойстваОбъект.Записать();		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	Возврат СправочникСвойстваОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьСправочникОбъектыКонфигурации(Источник,ТипТаблицы,ИмяРодителя="",ТипТаблицыРодителя="")
	
	СправочникОбъект = Справочники.ОбъектыКонфигурации.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(СправочникОбъект,Источник);
	МассивСтрок = СтрРазделить(Источник.ПолноеИмя,".",Ложь);
	ИнверсныйМассив = Новый Массив;
	Для ш=0 по МассивСтрок.ВГраница() Цикл
		ИнверсныйМассив.Добавить(МассивСтрок[МассивСтрок.ВГраница()-ш]);		
	КонецЦикла;
	СправочникОбъект.Наименование = СтрСоединить(ИнверсныйМассив,".");; 
	СправочникОбъект.Конфигурация = Конфигурация;
	//TODO найти тип 
	Попытка      
		СправочникОбъект.Тип = Перечисления.ТипыОбъектов[ТипТаблицы];
	Исключение
	КонецПопытки;
	//TODO родитель                
	Если ЗначениеЗаполнено(ИмяРодителя) И НЕ Источник.ПолноеИмя="Конфигурация" Тогда 
		СправочникОбъект.Родитель = ФункцияНайтиСоздатьРодителя(ИмяРодителя,ТипТаблицыРодителя,СправочникОбъект.Конфигурация);
	КонецЕсли;
	
	Попытка
		СправочникОбъект.Записать();		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	Возврат СправочникОбъект.Ссылка;
КонецФункции

&НаСервере
Функция ФункцияНайтиСоздатьРодителя(ИмяРодителя,ТипТаблицыРодителя,Конфигурация)
	Ссылка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбъектыКонфигурации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыКонфигурации КАК ОбъектыКонфигурации
	|ГДЕ
	|	НЕ ОбъектыКонфигурации.ПометкаУдаления
	|	И ОбъектыКонфигурации.ПолноеИмя = &ПолноеИмя
	|	И ОбъектыКонфигурации.Конфигурация = &Конфигурация";      
	Запрос.УстановитьПараметр("Конфигурация",Конфигурация);
	Запрос.УстановитьПараметр("ПолноеИмя",ИмяРодителя);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	Иначе                                                   
		Источник = Новый Структура("ПолноеИмя,ТипТаблицы",ИмяРодителя,ТипТаблицыРодителя);
		Ссылка = СоздатьСправочникОбъектыКонфигурации(Источник,ТипТаблицыРодителя,"Конфигурация","Конфигурация");	                                      
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

&НаСервере
Процедура СоздатьОбновитьОбъектыНаСервере()      
	
	КешТиповСоздаваемыхСвойств = Новый Соответствие;
	
	Для каждого стр из СоздаваемыеТипыСвойств Цикл
		КешТиповСоздаваемыхСвойств.Вставить(стр.ТипСвойства,стр.Выбрана);
	КонецЦикла;
	
	Для каждого стр из ТаблицаМетаданных Цикл
		Если НЕ стр.Выбрана=Истина Тогда
			Продолжить;
		КонецЕсли;
		Если стр.Действие = "Добавить" Тогда   
			Если стр.ЭтоМетаданные=Истина Тогда
				стр.ОбъектКонфигурации = СоздатьСправочникОбъектыКонфигурации(стр,стр.ТипТаблицы,стр.ТипТаблицы,стр.ТипТаблицы);
			Иначе                                                                                                          
				стр.ПолеОбъекта = СоздатьСправочникСвойствоОбъектаКонфигурации(стр,КешТиповСоздаваемыхСвойств);
				стр.ОбъектКонфигурации = стр.ПолеОбъекта.ОбъектКонфигурации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьОбъекты(Команда)
	СоздатьОбновитьОбъектыНаСервере();
КонецПроцедуры

&НаСервере
Процедура НайтиСоотвествиеНаСервере()
	
	// проходим и создаем нужные объекты
	СоответсвтвиеМетаданныхКонфигурации = Новый Соответствие;
	СоответсвтвиеПолейМетаданныхКонфигурации = Новый Соответствие;
	
	// выбираем старые
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбъектыКонфигурации.Ссылка КАК Ссылка,
	|	ОбъектыКонфигурации.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	Справочник.ОбъектыКонфигурации КАК ОбъектыКонфигурации
	|ГДЕ
	|	ОбъектыКонфигурации.Конфигурация = &Конфигурация
	|	И НЕ ОбъектыКонфигурации.ПометкаУдаления
	|	И ОбъектыКонфигурации.ЭтоМетаданные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоляОбъекта.Ссылка КАК Ссылка,
	|	ПоляОбъекта.ПолноеИмя КАК ПолноеИмя
	|ИЗ
	|	Справочник.СвойстваОбъектаКонфигурации КАК ПоляОбъекта
	|ГДЕ
	|	НЕ ПоляОбъекта.ПометкаУдаления
	|	И ПоляОбъекта.ОбъектКонфигурации.Конфигурация = &Конфигурация";
	Запрос.УстановитьПараметр("Конфигурация",Конфигурация);

	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[0].Выбрать();  
	
	
	Пока Выборка.Следующий() Цикл
		СоответсвтвиеМетаданныхКонфигурации.Вставить(Выборка.ПолноеИмя,Новый Структура("Ссылка,Обработан",Выборка.Ссылка,Ложь));
	КонецЦикла;                  
	
	Выборка = Пакет[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответсвтвиеПолейМетаданныхКонфигурации.Вставить(Выборка.ПолноеИмя,Новый Структура("Ссылка,Обработан",Выборка.Ссылка,Ложь));
	КонецЦикла;       
	
	// сбросим
	Для каждого стр из ТаблицаМетаданных Цикл
		стр.Действие = "";
		стр.Выбрана = Ложь;
	КонецЦикла;
	
	// Теперь проходим по метаданным и делаем что-то
	Для каждого стр из ТаблицаМетаданных Цикл            
		ОбъектМетаданных  =  СоответсвтвиеМетаданныхКонфигурации.Получить(стр.ПолноеИмя);
		ПолеОбъектМетаданных  =  СоответсвтвиеПолейМетаданныхКонфигурации.Получить(стр.ПолноеИмя);
		Если НЕ ОбъектМетаданных=Неопределено Тогда
			стр.ОбъектКонфигурации=ОбъектМетаданных.ССылка;
			ОбъектМетаданных.Обработан = Истина;
		КонецЕсли;
		Если НЕ ПолеОбъектМетаданных=Неопределено Тогда    
			стр.ОбъектКонфигурации=ПолеОбъектМетаданных.Ссылка.ОбъектКонфигурации;
			стр.ПолеОбъекта=ПолеОбъектМетаданных.ССылка;
			ПолеОбъектМетаданных.Обработан = Истина;
		КонецЕсли; 
		Если ПолеОбъектМетаданных=Неопределено И ОбъектМетаданных=Неопределено Тогда
			стр.Действие = "Добавить";
		КонецЕсли;
	КонецЦикла;  
	
	// добавляем новые
	Для каждого стр из СоответсвтвиеМетаданныхКонфигурации Цикл
		Если стр.Значение.Обработан=Истина Тогда
			Продолжить;
		КонецЕсли;
		стр_н = ТаблицаМетаданных.Добавить();
		стр_н.ОбъектКонфигурации = стр.Значение.Ссылка;
		стр_н.Действие = "Удалить";
	КонецЦикла;
	
	Для каждого стр из СоответсвтвиеПолейМетаданныхКонфигурации Цикл
		Если стр.Значение.Обработан=Истина Тогда
			Продолжить;
		КонецЕсли;
		стр_н = ТаблицаМетаданных.Добавить();
		стр_н.ПолеОбъекта = стр.Значение.Ссылка;
		стр_н.Действие = "Удалить";
	КонецЦикла;
	
КонецПроцедуры      

&НаСервере
Функция ПолучитьМассивИспользуемыхТипов() 
	МассивТиповМетаданных = Новый Массив;
	МассивСтрок = СтрРазделить(НРег(СтрокаТиповМетаданных),",;: "+Символы.ПС,Ложь);	
	
	Для Каждого стр из МассивСтрок Цикл     
		
		// метаданные  ссылочные
		Если стрНайти(стр,"справочник") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.Справочник);
		ИначеЕсли стрНайти(стр,"перечислен") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.Перечисление);
		ИначеЕсли стрНайти(стр,"констант") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.НаборКонстант);
		ИначеЕсли стрНайти(стр,"документ") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.Документ);
		ИначеЕсли стрНайти(стр,"бизнес") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.БизнесПроцесс);
		ИначеЕсли стрНайти(стр,"внешн") И стрНайти(стр,"источник") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.ВнешнийИсточникДанных);
		ИначеЕсли стрНайти(стр,"задача") Тогда                                              
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.Задача);
			
		// планы
		ИначеЕсли стрНайти(стр,"план") И стрНайти(стр,"расчет") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.ПланВидовРасчета);
		ИначеЕсли стрНайти(стр,"план") И стрНайти(стр,"характер") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.ПланВидовХарактеристик);
		ИначеЕсли стрНайти(стр,"план") И стрНайти(стр,"счет") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.ПланСчетов);
		ИначеЕсли стрНайти(стр,"план") И стрНайти(стр,"обмен") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.ПланОбмена);
			
		// регистры
		ИначеЕсли стрНайти(стр,"регистр") И стрНайти(стр,"бух") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.РегистрБухгалтерии);
		ИначеЕсли стрНайти(стр,"регистр") И стрНайти(стр,"сведен") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.РегистрСведений);
		ИначеЕсли стрНайти(стр,"регистр") И стрНайти(стр,"накоплен") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.РегистрНакопления);
		ИначеЕсли стрНайти(стр,"регистр") И стрНайти(стр,"расчет") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.РегистрРасчета);
			
		ИначеЕсли стрНайти(стр,"вид") И стрНайти(стр,"расчет") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.ВидРасчета);
		ИначеЕсли стрНайти(стр,"вид") И стрНайти(стр,"субконто") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.ВидСубконто);

		ИначеЕсли стрНайти(стр,"общи") И стрНайти(стр,"моду") Тогда
			МассивТиповМетаданных.Добавить(Перечисления.ТипыОбъектов.ОбщийМодуль);			
		
		КонецЕсли;
	КонецЦикла;

	Возврат МассивТиповМетаданных;
КонецФункции


&НаКлиенте
Процедура НайтиСоотвествие(Команда)
	НайтиСоотвествиеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для каждого стр из ТаблицаМетаданных Цикл
		стр.Выбрана = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для каждого стр из ТаблицаМетаданных Цикл
		стр.Выбрана = Ложь;
	КонецЦикла;
КонецПроцедуры
