&НаКлиенте
Перем КомБазаИзмененнаяКонфигурация;
&НаКлиенте
Перем КомБазаБазоваяКонфигурация;
&НаКлиенте
Перем КомБазаБазоваяНоваяКонфигурация;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика. 
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                        
	
	// варианты поиска отличий                                                      
	Элементы.РежимОбработкиФайлаСравнения.СписокВыбора.Добавить("Base1C","тек. база");
	Элементы.РежимОбработкиФайлаСравнения.СписокВыбора.Добавить("ComConnect","com");
	Элементы.РежимОбработкиФайлаСравнения.СписокВыбора.Добавить("Prefix","префикс");
	Элементы.РежимОбработкиФайлаСравнения.СписокВыбора.Добавить("Files","по файлам");
	
	Если НЕ ЗначениеЗаполнено(РежимОбработкиФайлаСравнения) Тогда
		РежимОбработкиФайлаСравнения="ComConnect";
	КонецЕсли;
	
	//варианты отборов в таблице отличий                                                 
	Элементы.ОтборТаблицыОтличий.СписокВыбора.Добавить("Нет","нет");
	Элементы.ОтборТаблицыОтличий.СписокВыбора.Добавить("ОтличияМеждуБазовойИзмененной","между баз. и изм.");
	Элементы.ОтборТаблицыОтличий.СписокВыбора.Добавить("ЕстьВПервойИТретьейНетВоВторой","есть в базовых и нет изм.");
	Элементы.ОтборТаблицыОтличий.СписокВыбора.Добавить("ЕстьВоВторойНетВТретьей","есть изм. и нет баз. нов.");

	Если НЕ ЗначениеЗаполнено(ОтборТаблицыОтличий) Тогда
		ОтборТаблицыОтличий="Нет";
	КонецЕсли;       
	
	ОтборТаблицыОтличийПриИзменении(Неопределено);
	
	Если ЗначениеЗаполнено(СравниватьТипыМетаданных) И Элементы.ГруппаВыбранныеТипыМетаданных.Скрыта()=Истина Тогда
		Элементы.ГруппаВыбранныеТипыМетаданных.Показать();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборТаблицыОтличийПриИзменении(Элемент)
	
	мОтбор = Новый Структура();
	
	Если ОтборТаблицыОтличий="Нет" Тогда
		мОтбор=Неопределено;
	ИначеЕсли ОтборТаблицыОтличий="ОтличияМеждуБазовойИзмененной" Тогда
		мОтбор=Новый ФиксированнаяСтруктура( Новый Структура("ЕстьОтличия",Истина) );
	ИначеЕсли ОтборТаблицыОтличий="ЕстьВПервойИТретьейНетВоВторой" Тогда
		мОтбор=Новый ФиксированнаяСтруктура( Новый Структура("ЕстьВПервойИТретьейНетВоВторой",Истина) );
	ИначеЕсли ОтборТаблицыОтличий="ЕстьВоВторойНетВТретьей" Тогда
		мОтбор=Новый ФиксированнаяСтруктура( Новый Структура("ЕстьВоВторойНетВТретьей",Истина) );
	КонецЕсли;                                                      
	
	Элементы.ТаблицаСравненияМетаданных.ОтборСтрок=мОтбор;
	
КонецПроцедуры


&НаКлиенте
Процедура ПутьКФайлуСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите файл"; 
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "XML-файл (*.xml)|*.xml"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь; 
	ВыборФайлаОткрытияСтруктурыКонфигурации = новый ОписаниеОповещения("ВыборФайлаОткрытияСтруктурыКонфигурации",ЭтотОбъект);
	Диалог.Показать(ВыборФайлаОткрытияСтруктурыКонфигурации);
КонецПроцедуры


&НаКлиенте
Процедура ВыборФайлаОткрытияСтруктурыКонфигурации(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	 Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		ПутьКФайлуСравнения = ВыбранныеФайлы[0]; 
	КонецЕсли; 
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьФайл(Команда)
	ВыполнитьОбработкуФайлаСравнения(ПутьКФайлуСравнения);
КонецПроцедуры    


&НаКлиенте
Процедура БазаДанныхИзмененнаяКонфигурацияПриИзменении(Элемент)
	КомБазаИзмененнаяКонфигурация=Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура БазаДанныхБазоваяКонфигурацияПриИзменении(Элемент)
	КомБазаБазоваяКонфигурация=Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура БазаДанныхБазоваяНоваяКонфигурацияПриИзменении(Элемент)
	КомБазаБазоваяНоваяКонфигурация=Неопределено;
КонецПроцедуры


#Область Сравнения   

&НаСервере
Функция РеквизитыОбработкиЗаполнены()

	Возврат ПроверитьЗаполнение();

КонецФункции

&НаКлиенте
Процедура СформироватьТаблицуСравнения(Команда)

	Если НЕ РеквизитыОбработкиЗаполнены() Тогда
		Возврат;
	КонецЕсли;   
	
	// получим данные из сценария
	СтрокаСоединениеИзмененнаяКонфигурация = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(БазаДанныхИзмененнаяКонфигурация,"СтрокаПодключения");
	СтрокаСоединениеБазоваяКонфигурация = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(БазаДанныхБазоваяКонфигурация,"СтрокаПодключения");
	СтрокаСоединениеБазоваяНоваяКонфигурация = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(БазаДанныхБазоваяНоваяКонфигурация,"СтрокаПодключения");
	
	Состояние("Проверка и подключение com...Первая");
	КомБазаИзмененнаяКонфигурация = ПолучитьКомПодключение(КомБазаИзмененнаяКонфигурация,СтрокаСоединениеИзмененнаяКонфигурация);
	Состояние("Проверка и подключение com...Вторая");
	КомБазаБазоваяКонфигурация = ПолучитьКомПодключение(КомБазаБазоваяКонфигурация,СтрокаСоединениеБазоваяКонфигурация);
	Состояние("Проверка и подключение com...Третья");
	КомБазаБазоваяНоваяКонфигурация = ПолучитьКомПодключение(КомБазаБазоваяНоваяКонфигурация,СтрокаСоединениеБазоваяНоваяКонфигурация);
	
	Если КомБазаИзмененнаяКонфигурация=Неопределено  Тогда
		Сообщить("Ошибка подключения к ком 1 конф!");
	КонецЕсли;  
	
	Если КомБазаИзмененнаяКонфигурация=Неопределено  Тогда
		Сообщить("Ошибка подключения к ком 1 конф!");
	КонецЕсли;  
	
	Если КомБазаБазоваяНоваяКонфигурация=Неопределено Тогда
		Сообщить("Ошибка подключения к ком 3 конф.!");
	КонецЕсли;    
	
	Если КомБазаИзмененнаяКонфигурация=Неопределено 
		ИЛИ КомБазаИзмененнаяКонфигурация=Неопределено
		ИЛИ  КомБазаБазоваяНоваяКонфигурация=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСравненияМетаданных.Очистить();
	
	Если ЗначениеЗаполнено(СравниватьТипыМетаданных) И НЕ СтрНайти(НРег(СравниватьТипыМетаданных)," все ")Тогда
		СтрокаТиповМетаданных = СравниватьТипыМетаданных;	
	Иначе
		СтрокаТиповМетаданных = " ПланыОбмена, ОбщиеМодули, ОпределяемыеТипы, ОбщиеКартинки, ОбщиеКоманды, ОбщиеМакеты, ГруппыКоманд, ЭлементыСтиля, Стили, ОбщиеФормы, "; 
		СтрокаТиповМетаданных = СтрокаТиповМетаданных+" Подсистемы, ПодпискиНаСобытия, ПараметрыСеанса, Роли, РегламентныеЗадания, ФункциональныеОпции, ";
		СтрокаТиповМетаданных = СтрокаТиповМетаданных+" HTTPСервисы, КритерииОтбора, ";
		СтрокаТиповМетаданных = СтрокаТиповМетаданных+" Константы, Справочники, НумераторыДокументов, Документы, Перечисления, ";	
		СтрокаТиповМетаданных = СтрокаТиповМетаданных+" РегистрыСведений, РегистрыНакопления, ";         
		СтрокаТиповМетаданных = СтрокаТиповМетаданных+" Отчеты, Обработки, ";         
		СтрокаТиповМетаданных = СтрокаТиповМетаданных+" ПланыВидовХарактеристик, ";
		СтрокаТиповМетаданных = СтрокаТиповМетаданных+" Задачи, БизнесПроцессы, ";
		СтрокаТиповМетаданных = СтрокаТиповМетаданных+" ВнешниеИсточникиДанных ";
	КонецЕсли;
	
	
	//СтрокаТиповМетаданных = "Справочники, Документы, Роли";
	
	МассивТиповМетаданных = СтрРазделить(СтрокаТиповМетаданных,", "+Символы.ПС,Ложь);
	
	
	СтруктураКонфигурацииИзмененнаяКонфигурация = Новый Структура;
	СтруктураКонфигурацииБазоваяКонфигурация = Новый Структура;  
	СтруктураКонфигурацииБазоваяНоваяКонфигурация = Новый Структура;  
	
	Состояние("Начало получение данных...");		
	
	ш = 1;
	// формируем стуркутры для сравнения
	Для каждого стр из МассивТиповМетаданных Цикл   
		стр = СокрЛП(стр);
		ш=ш+1;
		Состояние("Получение метаданных..."+стр,Окр(ш/МассивТиповМетаданных.Количество()*100));		
		// формируем структуру метаданных первая конфигурация
		ПоискВМетаданныхПолныйКом(КомБазаИзмененнаяКонфигурация,стр,СтруктураКонфигурацииИзмененнаяКонфигурация);
		// формируем вторая конфигурация                                         
		ПоискВМетаданныхПолныйКом(КомБазаБазоваяКонфигурация,стр,СтруктураКонфигурацииБазоваяКонфигурация);
		// формируем третья конфигурация                                         
		ПоискВМетаданныхПолныйКом(КомБазаБазоваяНоваяКонфигурация,стр,СтруктураКонфигурацииБазоваяНоваяКонфигурация);
	КонецЦикла;
	
	Состояние("Завершено получение данных!");		
	Состояние("Начало обработки сравнения...");		
	
	// заполняем таблицу
	Для каждого стр из МассивТиповМетаданных Цикл 
		
		СоответствиеИзмененнаяКонфигурация = СтруктураКонфигурацииИзмененнаяКонфигурация[стр];
		СоответствиеБазоваяКонфигурация = СтруктураКонфигурацииБазоваяКонфигурация[стр];
		СоответствиеБазоваяНоваяКонфигурация = СтруктураКонфигурацииБазоваяНоваяКонфигурация[стр];
		
		Для каждого элем из СоответствиеИзмененнаяКонфигурация Цикл
			
			стр_н = ТаблицаСравненияМетаданных.Добавить();
			стр_н.ПолноеИмяИзмененнаяКонфигурация = элем.Значение.ПолноеИмя;  
			стр_н.ТипМетаданных = элем.Значение.ТипТаблицы;
			стр_н.ИндексКартинки = ПолучитьИндексКартинки(стр_н.ПолноеИмяИзмененнаяКонфигурация); 
			СтруктураИзмененнаяКонфигурация = СоответствиеИзмененнаяКонфигурация.Получить(элем.Ключ);
			
			стр_н.Исключить=ЭтоНенужныйТип(стр_н.ПолноеИмяИзмененнаяКонфигурация);
			
			// игнорируем отличия для таких типов
			Если стр_н.Исключить=Истина Тогда
				Продолжить;
			КонецЕсли;         
			
			
			//// Индексировать
			//Если СтруктураИзмененнаяКонфигурация.Свойство("Индексировать") Тогда   
			//	стр_н.ИмяПараметра = "Индексировать";
			//	стр_н.ПараметрИзмененнаяКонфигурация = СтруктураИзмененнаяКонфигурация.Индексировать;
			//КонецЕсли; 				
			
			// ТИПЫ
			Если СтруктураИзмененнаяКонфигурация.Свойство("Тип") Тогда
				стр_н.ТипИзмененнаяКонфигурация = СтрСоединить(СтруктураИзмененнаяКонфигурация.Тип,Символы.ПС);
			КонецЕсли;   
			
			// Движения
			Если СтруктураИзмененнаяКонфигурация.Свойство("Движения") Тогда   
				стр_н.ИмяПараметра = "Движения";
				стр_н.ПараметрИзмененнаяКонфигурация = СтрСоединить(СтруктураИзмененнаяКонфигурация.Движения,Символы.ПС);
			КонецЕсли;  
			
			// Права
			Если СтруктураИзмененнаяКонфигурация.Свойство("Права") Тогда   
				стр_н.ИмяПараметра = "Права";
				стр_н.ПараметрИзмененнаяКонфигурация = СтрСоединить(СтруктураИзмененнаяКонфигурация.Права,Символы.ПС);
			КонецЕсли; 	
			
			// Предопределенные
			Если СтруктураИзмененнаяКонфигурация.Свойство("Предопределенные") Тогда   
				стр_н.ИмяПараметра = "Предопределенные";
				стр_н.ПараметрИзмененнаяКонфигурация = СтрСоединить(СтруктураИзмененнаяКонфигурация.Предопределенные,Символы.ПС);
			КонецЕсли; 		
			
	
			
					
			СтруктураБазоваяКонфигурация = СоответствиеБазоваяКонфигурация.Получить(элем.Ключ);
			Если НЕ СтруктураБазоваяКонфигурация=Неопределено Тогда
				стр_н.ПолноеИмяБазоваяКонфигурация = СтруктураБазоваяКонфигурация.ПолноеИмя;   
				
				//// Индексировать
				//Если СтруктураБазоваяКонфигурация.Свойство("Индексировать") Тогда   
				//	стр_н.ПараметрБазоваяКонфигурация = СтруктураБазоваяКонфигурация.Индексировать;
				//КонецЕсли; 		
				
				// ТИПЫ
				Если СтруктураБазоваяКонфигурация.Свойство("Тип") Тогда
					стр_н.ТипБазоваяКонфигурация = СтрСоединить(СтруктураБазоваяКонфигурация.Тип,Символы.ПС);
				КонецЕсли; 
				
				// Движения
				Если СтруктураБазоваяКонфигурация.Свойство("Движения") Тогда   
					стр_н.ПараметрБазоваяКонфигурация = СтрСоединить(СтруктураБазоваяКонфигурация.Движения,Символы.ПС);
				КонецЕсли;     
				
				// Права
				Если СтруктураБазоваяКонфигурация.Свойство("Права") Тогда   
					стр_н.ПараметрБазоваяКонфигурация = СтрСоединить(СтруктураБазоваяКонфигурация.Права,Символы.ПС);
				КонецЕсли; 			
				
				// Предопределенные
				Если СтруктураБазоваяКонфигурация.Свойство("Предопределенные") Тогда   
					стр_н.ПараметрБазоваяКонфигурация = СтрСоединить(СтруктураБазоваяКонфигурация.Предопределенные,Символы.ПС);
				КонецЕсли; 
				
				
				стр_н.ОтличияТип = СравнитьМассивы(?(СтруктураИзмененнаяКонфигурация.Свойство("Тип"),СтруктураИзмененнаяКонфигурация.Тип,Новый Массив),?(СтруктураБазоваяКонфигурация.Свойство("Тип"),СтруктураБазоваяКонфигурация.Тип,Новый Массив));				
				стр_н.СовпаденияТип = НайтиОдинаковыеМассивы(?(СтруктураИзмененнаяКонфигурация.Свойство("Тип"),СтруктураИзмененнаяКонфигурация.Тип,Новый Массив),?(СтруктураБазоваяКонфигурация.Свойство("Тип"),СтруктураБазоваяКонфигурация.Тип,Новый Массив));
				
				Если стр_н.ИмяПараметра = "Права" Тогда
					стр_н.ОтличияПараметра = СравнитьМассивы(?(СтруктураИзмененнаяКонфигурация.Свойство("Права"),СтруктураИзмененнаяКонфигурация.Права,Новый Массив),?(СтруктураБазоваяКонфигурация.Свойство("Права"),СтруктураБазоваяКонфигурация.Права,Новый Массив));				
					стр_н.ОтличияПараметра = "всегда объединяем при сравнении метаданных";
				ИначеЕсли стр_н.ИмяПараметра = "Предопределенные" Тогда
					стр_н.ОтличияПараметра = СравнитьМассивы(?(СтруктураИзмененнаяКонфигурация.Свойство("Предопределенные"),СтруктураИзмененнаяКонфигурация.Предопределенные,Новый Массив),?(СтруктураБазоваяКонфигурация.Свойство("Предопределенные"),СтруктураБазоваяКонфигурация.Предопределенные,Новый Массив));				
				ИначеЕсли стр_н.ИмяПараметра = "Движения" Тогда
					стр_н.ОтличияПараметра = СравнитьМассивы(?(СтруктураИзмененнаяКонфигурация.Свойство("Движения"),СтруктураИзмененнаяКонфигурация.Движения,Новый Массив),?(СтруктураБазоваяКонфигурация.Свойство("Движения"),СтруктураБазоваяКонфигурация.Движения,Новый Массив));				
				ИначеЕсли стр_н.ИмяПараметра = "Индексировать" Тогда
					стр_н.ОтличияПараметра = НЕ (СтруктураИзмененнаяКонфигурация.Индексировать=СтруктураБазоваяКонфигурация.Индексировать);				
				КонецЕсли;               
				
				стр_н.ЕстьОтличия=ЗначениеЗаполнено(стр_н.ОтличияТип) ИЛИ ЗначениеЗаполнено(стр_н.ОтличияПараметра);
				
				// отличия по доп параметрам   
				// Индексирование 
				Если СтруктураИзмененнаяКонфигурация.Свойство("Индексировать") И СтруктураБазоваяКонфигурация.Свойство("Индексировать") Тогда
					ИндексированиеОтличия = НЕ (СтруктураИзмененнаяКонфигурация.Индексировать=СтруктураБазоваяКонфигурация.Индексировать);
					стр_н.ЕстьОтличия = стр_н.ЕстьОтличия ИЛИ ИндексированиеОтличия;
					Если ИндексированиеОтличия=Истина Тогда
						стр_н.Комментарий = стр_н.Комментарий+" Индексировать "+Символы.ПС;
					КонецЕсли;
				КонецЕсли;               
				// Длина строки
				Если СтруктураИзмененнаяКонфигурация.Свойство("StringLength") И СтруктураБазоваяКонфигурация.Свойство("StringLength") Тогда
					StringLengthОтличия = НЕ (СтруктураИзмененнаяКонфигурация.StringLength=СтруктураБазоваяКонфигурация.StringLength);
					стр_н.ЕстьОтличия = стр_н.ЕстьОтличия ИЛИ StringLengthОтличия;
					Если StringLengthОтличия=Истина Тогда
						стр_н.Комментарий = стр_н.Комментарий+" ДлинаСтроки "+Символы.ПС;
					КонецЕсли;
				КонецЕсли; 				
				
				
				// Свойства, иерархический и др
				Если СтруктураИзмененнаяКонфигурация.Свойство("Свойства") И СтруктураБазоваяКонфигурация.Свойство("Свойства") Тогда
					
					Если СтруктураИзмененнаяКонфигурация.Свойства.Свойство("Hierarchical") И 
						СтруктураБазоваяКонфигурация.Свойства.Свойство("Hierarchical") И
						НЕ СтруктураИзмененнаяКонфигурация.Свойства.Hierarchical= СтруктураБазоваяКонфигурация.Свойства.Hierarchical Тогда
						стр_н.ЕстьОтличия = стр_н.ЕстьОтличия ИЛИ Истина;
						стр_н.Комментарий = стр_н.Комментарий+" Hierarchical "+Символы.ПС;
					КонецЕсли;
					
					Если СтруктураИзмененнаяКонфигурация.Свойства.Свойство("HierarchyType") И 
						СтруктураБазоваяКонфигурация.Свойства.Свойство("HierarchyType") И
						НЕ СтруктураИзмененнаяКонфигурация.Свойства.HierarchyType= СтруктураБазоваяКонфигурация.Свойства.HierarchyType Тогда
						стр_н.ЕстьОтличия = стр_н.ЕстьОтличия ИЛИ Истина;
						стр_н.Комментарий = стр_н.Комментарий+" HierarchyType "+Символы.ПС;
					КонецЕсли;      
					
					Если СтруктураИзмененнаяКонфигурация.Свойства.Свойство("CheckUnique") И 
						СтруктураБазоваяКонфигурация.Свойства.Свойство("CheckUnique") И
						НЕ СтруктураИзмененнаяКонфигурация.Свойства.CheckUnique= СтруктураБазоваяКонфигурация.Свойства.CheckUnique Тогда
						стр_н.ЕстьОтличия = стр_н.ЕстьОтличия ИЛИ Истина;
						стр_н.Комментарий = стр_н.Комментарий+" CheckUnique "+Символы.ПС;
					КонецЕсли;					
					
					Если СтруктураИзмененнаяКонфигурация.Свойства.Свойство("Autonumbering") И 
						СтруктураБазоваяКонфигурация.Свойства.Свойство("Autonumbering") И
						НЕ СтруктураИзмененнаяКонфигурация.Свойства.Autonumbering= СтруктураБазоваяКонфигурация.Свойства.Autonumbering Тогда
						стр_н.ЕстьОтличия = стр_н.ЕстьОтличия ИЛИ Истина;
						стр_н.Комментарий = стр_н.Комментарий+" Autonumbering "+Символы.ПС;
					КонецЕсли;		
					
					Если СтруктураИзмененнаяКонфигурация.Свойства.Свойство("BasedOn") И 
						СтруктураБазоваяКонфигурация.Свойства.Свойство("BasedOn") И
						НЕ СтруктураИзмененнаяКонфигурация.Свойства.BasedOn= СтруктураБазоваяКонфигурация.Свойства.BasedOn Тогда
						стр_н.ЕстьОтличия = стр_н.ЕстьОтличия ИЛИ Истина;
						стр_н.Комментарий = стр_н.Комментарий+" BasedOn "+Символы.ПС;
					КонецЕсли;		
					
					
					
				КонецЕсли;

				
			КонецЕсли;   
			
			стр_н.ЕстьОтличия=стр_н.ЕстьОтличия 
				ИЛИ (НЕ ЗначениеЗаполнено(стр_н.ПолноеИмяИзмененнаяКонфигурация) И ЗначениеЗаполнено(стр_н.ПолноеИмяБазоваяКонфигурация))
				ИЛИ (ЗначениеЗаполнено(стр_н.ПолноеИмяИзмененнаяКонфигурация) И НЕ ЗначениеЗаполнено(стр_н.ПолноеИмяБазоваяКонфигурация));
				
			// теперь третья конфигурация
			СтруктураБазоваяНоваяКонфигурация = СоответствиеБазоваяНоваяКонфигурация.Получить(элем.Ключ);
			Если НЕ СтруктураБазоваяНоваяКонфигурация=Неопределено Тогда
				стр_н.ПолноеИмяБазоваяНоваяКонфигурация = СтруктураБазоваяНоваяКонфигурация.ПолноеИмя;
				// ТИПЫ
				Если СтруктураБазоваяНоваяКонфигурация.Свойство("Тип") Тогда
					стр_н.ТипБазоваяНоваяКонфигурация = СтрСоединить(СтруктураБазоваяНоваяКонфигурация.Тип,Символы.ПС);
				КонецЕсли;
			КонецЕсли;
			Если СтруктураБазоваяНоваяКонфигурация=Неопределено И НЕ СтруктураБазоваяКонфигурация=Неопределено Тогда
				стр_н.ЕстьВоВторойНетВТретьей=Истина;
			КонецЕсли;
			
			Если НЕ СтруктураБазоваяНоваяКонфигурация=Неопределено И СтруктураБазоваяКонфигурация=Неопределено Тогда
				стр_н.ЕстьВПервойИТретьейНетВоВторой=Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;           
	Состояние("Завершена обработка сравнения!");		
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискВМетаданныхПолныйКом(КомБаза,ИмяМетаданных,СтруктураКонфигурации)
	
	КлючСоответствиеМетаданных = Новый Соответствие;
	СтруктураКонфигурации.Вставить(ИмяМетаданных,КлючСоответствиеМетаданных);    
	
	МассивСтрокВыбранныхИмен = СтрРазделить(СравниватьВыбранныеИменаМетаданных," ,"+Символы.ПС,Ложь);
	КэшВыбранныхИмен = Новый Соответствие;
	Для каждого стр из МассивСтрокВыбранныхИмен Цикл
		КэшВыбранныхИмен.Вставить(НРег(СокрЛП(стр)),Истина);
	КонецЦикла;       
	
	Если КэшВыбранныхИмен.Получить("все")<>Неопределено Тогда
		КэшВыбранныхИмен = Новый Соответствие;
	КонецЕсли;        
	
	НетФормСтрокой = "Подсистема ОбщийМодуль ОпределяемыйТип НумераторДокументов ОбщийМакет Стиль ЭлементСтиля 
						| ОбщаяКоманда ПодпискаНаСобытие ПараметрСеанса Роль 
						| РегламентноеЗадание ФункциональнаяОпция";
	МассивЧастей = СтрРазделить(НетФормСтрокой," "+Символы.ПС,Ложь);  
	КэшНетФорм = Новый Соответствие;
	Для каждого стр из МассивЧастей Цикл
		КэшНетФорм.Вставить(СокрЛП(НРег(стр)),Истина);
	КонецЦикла;
	
	Для каждого ЭлементМетаданных из КомБаза.Метаданные[ИмяМетаданных] Цикл
		
		МассивЧастей = СтрРазделить(ЭлементМетаданных.ПолноеИмя(),".");
		ТипТаблицы = МассивЧастей[0];
		ИмяТаблицы = МассивЧастей[1];
		
		Если НЕ КэшВыбранныхИмен.Количество()=0 И КэшВыбранныхИмен.Получить(НРег(ИмяТаблицы))=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОписания = Новый Структура("ТипТаблицы, ПолноеИмя, ИмяТаблицы",ТипТаблицы,ЭлементМетаданных.ПолноеИмя(),ЭлементМетаданных.Имя);
		
		Если Найти(НРег("ОпределяемыйТип  Константа КритерийОтбора ПланВидовХарактеристик "),НРег(ТипТаблицы)) Тогда
			МассивТипов = ДобавитьТипыВТаблицуСравнения(КомБаза,ЭлементМетаданных);
			СтруктураОписания.Вставить("Тип",МассивТипов);         
		КонецЕсли;
		
		Ключ = СтрЗаменить(ЭлементМетаданных.ПолноеИмя(),".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);   
		
		// иерархия подсистем
		Если Найти(НРег("Подсистема "),НРег(ТипТаблицы)) Тогда
		 	ДобавитьПодчиненныеПодсистемыВТаблицуСравнения(КомБаза,КлючСоответствиеМетаданных, ЭлементМетаданных);
		// реквизиты                                  
		ИначеЕсли Найти(НРег("Перечисление "),НРег(ТипТаблицы)) Тогда
			ДобавитьЗначенияВТаблицуСравнения(КомБаза,ТипТаблицы,"ЗначенияПеречисления",КлючСоответствиеМетаданных, ЭлементМетаданных);
		ИначеЕсли Найти(НРег("Обработка Отчет"),НРег(ТипТаблицы)) Тогда                  
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Реквизиты",КлючСоответствиеМетаданных, ЭлементМетаданных);
			ДобавитьТабличныеЧастиВТаблицуСравнения(КомБаза,ТипТаблицы,"ТабличныеЧасти",КлючСоответствиеМетаданных, ЭлементМетаданных);
		// ссылочные
		ИначеЕсли Найти(НРег("Справочник Документ Задача БизнесПроцесс ПланОбмена ПланВидовХарактеристик ПланСчетов"),НРег(ТипТаблицы)) Тогда                  
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"СтандартныеРеквизиты",КлючСоответствиеМетаданных, ЭлементМетаданных);
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Реквизиты",КлючСоответствиеМетаданных, ЭлементМетаданных);
			ДобавитьТабличныеЧастиВТаблицуСравнения(КомБаза,ТипТаблицы,"ТабличныеЧасти",КлючСоответствиеМетаданных, ЭлементМетаданных);
			// регистры
		ИначеЕсли Найти(НРег("РегистрНакопления РегистрСведений РегистрРасчетов РегистрБухгалтерии"),НРег(ТипТаблицы)) Тогда
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Измерения",КлючСоответствиеМетаданных, ЭлементМетаданных);
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Ресурсы",КлючСоответствиеМетаданных, ЭлементМетаданных);
			ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Реквизиты",КлючСоответствиеМетаданных, ЭлементМетаданных);
		КонецЕсли;     
		
		
		// движения
		Если Найти(НРег("Документ"),НРег(ТипТаблицы)) Тогда
			МассивДвижений = ДобавитьДвиженияВТаблицуСравнения(КомБаза,"Движения",КлючСоответствиеМетаданных, ЭлементМетаданных);
			СтруктураОписания.Вставить("Движения",МассивДвижений);
		КонецЕсли;
		
		// роли	
		Если Найти(НРег("Роль"),НРег(ТипТаблицы)) Тогда
			МассивПрав = ДобавитьПраваВТаблицуСравнения(КомБаза,"Права",КлючСоответствиеМетаданных, ЭлементМетаданных);
			СтруктураОписания.Вставить("Права",МассивПрав);
		КонецЕсли;  
		
		// предопределенные
		Если Найти(НРег("Справочник ПланВидовХарактеристик ПланСчетов ПланВидовРасчетов"),НРег(ТипТаблицы)) Тогда
			МассивПредопределенных = ДобавитьПредопределенныеВТаблицуСравнения(КомБаза,"Предопределенные",КлючСоответствиеМетаданных, ЭлементМетаданных);
			СтруктураОписания.Вставить("Предопределенные",МассивПредопределенных);
		КонецЕсли;	
		
		// свойства справочников документов
		Если Найти(НРег("Справочник Документ БизнесПроцесс "),НРег(ТипТаблицы)) Тогда
			СтруктураСвойств = ДобавитьСвойстваВТаблицуСравнения(КомБаза,"Свойства",КлючСоответствиеМетаданных, ЭлементМетаданных);
			СтруктураОписания.Вставить("Свойства",СтруктураСвойств);
		КонецЕсли;	
		
		// нет форм и команд и т.п.
		Если КэшНетФорм.Получить(НРег(ТипТаблицы))=Истина Тогда
			Продолжить;
		КонецЕсли;
		
		// формы     
		Попытка
			ДобавитьФормыВТаблицуСравнения(КомБаза,ТипТаблицы,"Формы",КлючСоответствиеМетаданных, ЭлементМетаданных);
		Исключение
		Конецпопытки;
		
		// команды   
		Попытка
			ДобавитьФормыВТаблицуСравнения(КомБаза,ТипТаблицы,"Команды",КлючСоответствиеМетаданных, ЭлементМетаданных);
		Исключение
		КонецПопытки;
		
		// Макеты   
		Попытка
			ДобавитьФормыВТаблицуСравнения(КомБаза,ТипТаблицы,"Макеты",КлючСоответствиеМетаданных, ЭлементМетаданных);
		Исключение
		КонецПопытки;
		
		
	КонецЦикла;

КонецПроцедуры       

#Область КомПараметры


&НаКлиенте
Процедура ДобавитьПодчиненныеПодсистемыВТаблицуСравнения(КомБаза,КлючСоответствиеМетаданных, РодительЭлементМетаданных)
	
	Для каждого ЭлементМетаданных из РодительЭлементМетаданных.Subsystems Цикл
		
		МассивЧастей = СтрРазделить(ЭлементМетаданных.ПолноеИмя(),".");
		ТипТаблицы = МассивЧастей[0];
		ИмяТаблицы = МассивЧастей[1];
		
		СтруктураОписания = Новый Структура("ТипТаблицы, ПолноеИмя, ИмяТаблицы",ТипТаблицы,ЭлементМетаданных.ПолноеИмя(),ЭлементМетаданных.Имя);
		
		Ключ = СтрЗаменить(ЭлементМетаданных.ПолноеИмя(),".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);
		
		ДобавитьПодчиненныеПодсистемыВТаблицуСравнения(КомБаза,КлючСоответствиеМетаданных,ЭлементМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры   



&НаКлиенте
Функция ДобавитьСвойстваВТаблицуСравнения(КомБаза,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	Представление = "Свойства";    
	СтруктураСвойств = Новый Структура;
	
	Попытка
		СтруктураСвойств.Вставить("Hierarchical",ЭлементМетаданных.Hierarchical);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураСвойств.Вставить("HierarchyType",ЭлементМетаданных.Hierarchical);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураСвойств.Вставить("CheckUnique",ЭлементМетаданных.CheckUnique);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураСвойств.Вставить("Autonumbering",ЭлементМетаданных.Autonumbering);
	Исключение
	КонецПопытки;                     
	Попытка
		СтруктураСвойств.Вставить("BasedOn",ЭлементМетаданных.BasedOn.Count());
	Исключение
	КонецПопытки; 	
	
	//СтруктураСвойств.Вставить("StandardAttributes",Неопределено);
	
	Возврат СтруктураСвойств;

КонецФункции


&НаКлиенте
Функция ДобавитьПредопределенныеВТаблицуСравнения(КомБаза,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	Представление = "Predefined";    
	МассивПредопределнных = Новый Массив;
	
	КомФисМасс = ЭлементМетаданных.ПолучитьИменаПредопределенных();
	
	Для каждого стр из КомФисМасс Цикл
		МассивПредопределнных.Добавить(стр);
	КонецЦикла;
	
	Возврат МассивПредопределнных;

КонецФункции

&НаКлиенте
Функция ДобавитьПраваВТаблицуСравнения(КомБаза,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	Представление = "Rights";    
	МассивДвижений = Новый Массив;
	
	// не доступно программно
	//Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл    
	//	МассивДвижений.Добавить(ЭлементРеквизит.Имя);
	//КонецЦикла;
	// Брать из файла	
	//СписокМетаданных = "Константы, Справочники, Документы, РегистрыНакопления, РегистрыСведений, Задачи, БизнесПроцессы";
	//МассивМетаданных = СтрРазделить(СписокМетаданных," ,",Ложь);
	//Для каждого ИмяМетаданных из МассивМетаданных Цикл
	//	Для каждого ком_метаданные из КомБаза.Метаданные[ИмяМетаданных] Цикл
	//		Чтение=Ложь;
	//		Имзенение=Ложь;
	//		Добавление=Ложь;			
	//		Попытка Чтение = КомБаза.ПравоДоступа("Чтение",ком_метаданные); Исключение КонецПопытки;
	//		Попытка Изменение = КомБаза.ПравоДоступа("Изменение",ком_метаданные); Исключение КонецПопытки;
	//		Попытка Добавление = КомБаза.ПравоДоступа("Добавление",ком_метаданные); Исключение КонецПопытки;
	//		Если Чтение=Истина Тогда МассивДвижений.Добавить("Чтение_"+ком_метаданные.Имя); КонецЕсли;
	//		Если Изменение=Истина Тогда МассивДвижений.Добавить("Изменение_"+ком_метаданные.Имя); КонецЕсли;
	//		Если Добавление=Истина Тогда МассивДвижений.Добавить("Добавление_"+ком_метаданные.Имя); КонецЕсли;
	//	КонецЦикла;		
	//КонецЦикла;
	
	Возврат МассивДвижений;

КонецФункции

&НаКлиенте
Функция ДобавитьДвиженияВТаблицуСравнения(КомБаза,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	Представление = "RegisterRecords";    
	МассивДвижений = Новый Массив;
	
	Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл    
		МассивДвижений.Добавить(ЭлементРеквизит.Имя);
	КонецЦикла;
	
	Возврат МассивДвижений;

КонецФункции

&НаКлиенте
Процедура ДобавитьЗначенияВТаблицуСравнения(КомБаза,ТипТаблицы,Имя, КлючСоответствиеМетаданных, ЭлементМетаданных);
	
	Представление = "EnumValue";
	
	
	Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл                                           
		ПолноеИмяРеквизита = ЭлементМетаданных.ПолноеИмя()+"."+Представление+"."+ЭлементРеквизит.Имя;
		СтруктураОписания = Новый Структура("ТипТаблицы,ПолноеИмя, ИмяТаблицы",ТипТаблицы,ПолноеИмяРеквизита,ЭлементРеквизит.Имя);
		Ключ = СтрЗаменить(ПолноеИмяРеквизита,".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);				
	КонецЦикла;

КонецПроцедуры   

&НаКлиенте
Процедура ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных,ИмяТЧ="")
	
	Представление = "";
	Если Имя="СтандартныеРеквизиты" Тогда
		Представление = "StandartAttribute";
	ИначеЕсли Имя="Реквизиты" Тогда
		Представление = "Attribute";
	ИначеЕсли Имя="Измерения" Тогда
		Представление = "Dimension";
	ИначеЕсли Имя="Ресурсы" Тогда
		Представление = "Resource";
	КонецЕсли;  
	
	
	Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл                                           
		
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			ПолноеИмяРеквизита = ИмяТЧ+"."+Представление+"."+ЭлементРеквизит.Имя;
		Иначе
			ПолноеИмяРеквизита = ЭлементМетаданных.ПолноеИмя()+"."+Представление+"."+ЭлементРеквизит.Имя;
		КонецЕсли;
		СтруктураОписания = Новый Структура("ТипТаблицы,ПолноеИмя, ИмяТаблицы",ТипТаблицы,ПолноеИмяРеквизита,ЭлементРеквизит.Имя);
		Ключ = СтрЗаменить(ПолноеИмяРеквизита,".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);				
		МассивТипов = ДобавитьТипыВТаблицуСравнения(КомБаза,ЭлементРеквизит);
		СтруктураОписания.Вставить("Тип",МассивТипов);

		// индексы                                             
		Попытка                                       
			СтруктураОписания.Вставить("Индексировать",КомБаза.String(ЭлементРеквизит.Indexing));	
		Исключение
		Конецпопытки;
		
		// длина кода
		Попытка                                       
			СтруктураОписания.Вставить("StringLength",ЭлементРеквизит.Type.StringQualifiers.Length);	
		Исключение
		Конецпопытки; 
		
	КонецЦикла;

КонецПроцедуры  

&НаКлиенте
Процедура ДобавитьТабличныеЧастиВТаблицуСравнения(КомБаза,ТипТаблицы,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	
	Представление = "";
	Если Имя="ТабличныеЧасти" Тогда
		Представление = "TabularSection";
	КонецЕсли; 	

	Для каждого ЭлементТабличнаяЧасть из ЭлементМетаданных[Имя] Цикл     
		// сама ТЧ
		ПолноеИмяРеквизита = ЭлементМетаданных.ПолноеИмя()+"."+Представление+"."+ЭлементТабличнаяЧасть.Имя;
		СтруктураОписания = Новый Структура("ТипТаблицы,ПолноеИмя, ИмяТаблицы",ТипТаблицы,ПолноеИмяРеквизита,ЭлементТабличнаяЧасть.Имя);
		Ключ = СтрЗаменить(ПолноеИмяРеквизита,".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);				
		// ее реквизиты
		ДобавитьРеквизитыВТаблицуСравнения(КомБаза,ТипТаблицы,"Реквизиты",КлючСоответствиеМетаданных, ЭлементТабличнаяЧасть,ПолноеИмяРеквизита);
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьФормыВТаблицуСравнения(КомБаза,ТипТаблицы,Имя,КлючСоответствиеМетаданных, ЭлементМетаданных)
	
	Представление = "";
	Если Имя="Формы" Тогда
		Представление = "Form";
	ИначеЕсли Имя="Команды" Тогда
		Представление = "Command";
	ИначеЕсли Имя="Макеты" Тогда
		Представление = "Template";
	КонецЕсли;
	
	
	Для каждого ЭлементРеквизит из ЭлементМетаданных[Имя] Цикл    
		ПолноеИмяРеквизита = ЭлементМетаданных.ПолноеИмя()+"."+Представление+"."+ЭлементРеквизит.Имя;
		СтруктураОписания = Новый Структура("ТипТаблицы,ПолноеИмя, ИмяТаблицы",ТипТаблицы,ПолноеИмяРеквизита,ЭлементРеквизит.Имя);
		Ключ = СтрЗаменить(ПолноеИмяРеквизита,".","_");
		КлючСоответствиеМетаданных.Вставить(Ключ,СтруктураОписания);				
		Если Имя="Команды" Тогда 
			МассивТипов = ДобавитьТипыВТаблицуСравнения(КомБаза,ЭлементРеквизит,"CommandParameterType");
			СтруктураОписания.Вставить("Тип",МассивТипов);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Функция ДобавитьТипыВТаблицуСравнения(КомБаза, ЭлементМетаданных, Имя="Тип")
	
	// типы
	МассивТипов = Новый Массив;                       
	Попытка                                                          
		Для каждого стр из  ЭлементМетаданных.Тип.Типы() Цикл
			МассивТипов.Добавить(КомБаза.XMLТип(стр).ИмяТипа);
		КонецЦикла;
	Исключение
	КонецПопытки;

	Возврат МассивТипов;
	
КонецФункции


#КонецОбласти

&НаКлиенте
Процедура ВыполнитьОбработкуФайлаСравнения(ИмяФайла)
	Попытка
		ИмяФайлаОбменаКИСУС=ИмяФайла; 
		ФайлОбменаКИСУС = Новый ЧтениеXML; 
		ФайлОбменаКИСУС.ОткрытьФайл(ИмяФайлаОбменаКИСУС); 
		
		ПостроительDOM = Новый ПостроительDOM; 
		ДокументDOM = ПостроительDOM.Прочитать(ФайлОбменаКИСУС); 
		ФайлОбменаКИСУС.Закрыть();          
		
		ДанныеДляПоиска = Неопределено;
	
		Если РежимОбработкиФайлаСравнения="Prefix" Тогда
			
			ДанныеДляПоиска = СтрРазделить(СписокПрефиксов," ;"+Символы.ПС,Ложь);		
			
		ИначеЕсли РежимОбработкиФайлаСравнения="Files" Тогда
			
			ДанныеДляПоиска = Новый Соответствие;

			Для каждого стр из ТаблицаНашихИзмененийМетаданных Цикл
				Ключ = НРег(ПолучитьСинонимEngИзКаталога(стр.Метаданные)+"."+стр.Объект);
				ДанныеДляПоиска.Вставить(Ключ,Истина);
			КонецЦикла;	
			
		ИначеЕсли РежимОбработкиФайлаСравнения="ComConnect" Тогда
			
			ДанныеДляПоиска = Новый Соответствие;
			
			Для каждого стр из ТаблицаСравненияМетаданных Цикл
				
				Если ЗначениеЗаполнено(стр.ПолноеИмяБазоваяКонфигурация) Тогда
					МассивЧастей = СтрРазделить(стр.ПолноеИмяБазоваяКонфигурация,".",Ложь);
				ИначеЕсли ЗначениеЗаполнено(стр.ПолноеИмяИзмененнаяКонфигурация) Тогда             
					МассивЧастей = СтрРазделить(стр.ПолноеИмяИзмененнаяКонфигурация,".",Ложь);
				Иначе
					Продолжить;
				КонецЕсли;        
				
				// подставим eng
				Для ш=0 по МассивЧастей.ВГраница() Цикл  
					Если ш=1 или ш=3 Тогда
						Продолжить;
					КонецЕсли;
					МассивЧастей[ш] = ПолучитьСинонимМетаданныхEng(МассивЧастей[ш]);
				КонецЦикла;
				Ключ = СтрСоединить(МассивЧастей,".");
				Ключ = НРег(Ключ);
				
				// удалить типы 
				Если стр.ЕстьВоВторойНетВТретьей=Истина Тогда
					ДанныеДляПоиска.Вставить(Ключ+"/удалить",Истина);
				КонецЕсли;
				
				Если стр.Исключить=Истина Тогда
					Продолжить;
				КонецЕсли;
				Если НЕ стр.ЕстьОтличия=Истина Тогда
					Продолжить;
				КонецЕсли;                        
				
				
				СтруктураОтличий = Новый Структура();
				
				// типы
				Если ЗначениеЗаполнено(стр.ОтличияТип) Тогда          
					СтруктураОтличий.Вставить("Types",стр.ОтличияТип);
				КонецЕсли;       
				
				// длина строки
				Если Найти(НРег(стр.Комментарий),НРег("ДлинаСтроки")) Тогда
					СтруктураОтличий.Вставить("StringLength",Истина);
				КонецЕсли;
				
				// типы совпадения
				Если ЗначениеЗаполнено(стр.ОтличияТип) Тогда          
					СтруктураОтличий.Вставить("Types_equal",стр.СовпаденияТип);
				КонецЕсли;       
				
				// движения
				Если ЗначениеЗаполнено(стр.ОтличияПараметра) И стр.ИмяПараметра="Движения" Тогда
					СтруктураОтличий.Вставить("RegisterRecords",стр.ОтличияПараметра);
				КонецЕсли;        
				
				// права
				Если ЗначениеЗаполнено(стр.ОтличияПараметра) И стр.ИмяПараметра="Права" Тогда
					СтруктураОтличий.Вставить("Rights",стр.ОтличияПараметра);
				КонецЕсли; 	
				
				// Предопределенные
				Если ЗначениеЗаполнено(стр.ОтличияПараметра) И стр.ИмяПараметра="Предопределенные" Тогда
					СтруктураОтличий.Вставить("Predefined",стр.ОтличияПараметра);
				КонецЕсли;				
				
				// есть в исходной, но нет в сравниваемой
				Если ЗначениеЗаполнено(стр.ПолноеИмяИзмененнаяКонфигурация) И НЕ ЗначениеЗаполнено(стр.ПолноеИмяБазоваяКонфигурация) Тогда
					СтруктураОтличий.Вставить("Metadata",стр.ПолноеИмяИзмененнаяКонфигурация);					
				КонецЕсли;     
				
				ДанныеДляПоиска.Вставить(Ключ,СтруктураОтличий);	
				// не переносить   
				
				// стандартные реквизиты
				// TODO: костыль, потом переделать
				Если Найти(Ключ,".standartattribute.") Тогда
					НовыйКлюч = НРег(МассивЧастей[0]+"."+МассивЧастей[1]+".StandartAttribute");
					ТекущиеНастройки = ДанныеДляПоиска.Получить(НовыйКлюч);
					Если ТекущиеНастройки=Неопределено Тогда
						ТекущиеНастройки = Новый Структура();
					КонецЕсли;                
					Если НРег(МассивЧастей[3])=НРег("Наименование") Тогда
						ТекущиеНастройки.Вставить("DescriptionLength",Истина);       
					ИначеЕсли НРег(МассивЧастей[3])=НРег("Код") Тогда                
						ТекущиеНастройки.Вставить("CodeLength",Истина);       
					КонецЕсли;
					ДанныеДляПоиска.Вставить(НовыйКлюч,ТекущиеНастройки);	
				КонецЕсли;
				                                                               
				// вставляем свойства Autonumbering и др
				ВставитьНаличиеСвойстваДляПоиска("Hierarchical", стр.Комментарий, ДанныеДляПоиска, МассивЧастей );
				ВставитьНаличиеСвойстваДляПоиска("HierarchyType", стр.Комментарий, ДанныеДляПоиска, МассивЧастей );
				ВставитьНаличиеСвойстваДляПоиска("CheckUnique", стр.Комментарий, ДанныеДляПоиска, МассивЧастей );
				ВставитьНаличиеСвойстваДляПоиска("Autonumbering", стр.Комментарий, ДанныеДляПоиска, МассивЧастей );
				ВставитьНаличиеСвойстваДляПоиска("StandardAttributes", стр.Комментарий, ДанныеДляПоиска, МассивЧастей );
				ВставитьНаличиеСвойстваДляПоиска("BasedOn", стр.Комментарий, ДанныеДляПоиска, МассивЧастей );
				
			КонецЦикла;
			
		КонецЕсли;                 
		
		
		Состояние("Обработка DOM XML...");
		
		
		Для каждого стр из ДокументDOM.ДочерниеУзлы цИКЛ 
			для каждого стр1 из стр.ДочерниеУзлы Цикл 
				
				ш=0;  
				к=0;
				для каждого стр2 из стр1.ДочерниеУзлы Цикл 
					
					ш=ш+1;      
					к=к-1;

					Если стр2.ИмяУзла="Object" Тогда
						
						fullName = НРег(стр2.ПолучитьАтрибут("fullName"));       
						
						Если ЗначениеЗаполнено(fullName)  Тогда
							// стандартные атрибуты, если
							fullNameStandartAttribute = ""+fullName+Нрег(".StandartAttribute");
							Если НЕ ДанныеДляПоиска.Получить(fullNameStandartAttribute)=Неопределено Тогда
								Обработать_МетаданныеСвойства(ДокументDOM,стр2,ДанныеДляПоиска);
							КонецЕсли;
						КонецЕсли;
						
						
						// проставляем флажки, только тем у которых есть отличия
						// когда дело касается существующих метаданных
						Если ЗначениеЗаполнено(fullName) И ДанныеДляПоиска.Получить(fullName)=Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						// TODO отрефакторить
						
						ОбновитьМодулиИзмененияКонфы_ЗаданыВручную(ДокументDOM, стр2);
						
						ОбработатьРеквизитыОбъекты_ПоВариантам(ДокументDOM, стр2, ДанныеДляПоиска);
						
					КонецЕсли; 
					
					Если к<=0 Тогда
						Состояние("Обработка узлов Object..."+стр,Окр(ш/стр1.ДочерниеУзлы.Количество()*100));						
						к=1000;
					КонецЕсли;
					
				КонецЦикла;
				
			кОНЕЦцИКЛА;	
		кОНЕЦцИКЛА; 
		
		Состояние("Завершение обработки DOM XML...");
		
		ЗаписьXML = Новый ЗаписьXML; 
		Файл = новый Файл(ИмяФайла);
		ПутьКФайлуВыхода = Файл.Путь+Файл.ИмяБезРасширения+"-обработан"+ФАйл.Расширение;
		ЗаписьXML.ОткрытьФайл(ПутьКФайлуВыхода); 
		ЗаписьDOM = Новый ЗаписьDOM; 
		ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML); 
		ЗаписьXML.Закрыть();
		
		Сообщить("Успешно!"+ПутьКФайлуВыхода);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНаличиеСвойстваДляПоиска(Имя, Источник, ДанныеДляПоиска, МассивЧастей )
	
	Если Найти(НРег(Источник),Нрег(Имя)) Тогда
		НовыйКлюч = НРег(МассивЧастей[0]+"."+МассивЧастей[1]+".StandartAttribute");	
		ТекущиеНастройки = ДанныеДляПоиска.Получить(НовыйКлюч);
		Если ТекущиеНастройки=Неопределено Тогда
			ТекущиеНастройки = Новый Структура();
		КонецЕсли;   
		ТекущиеНастройки.Вставить(Имя,Истина);
		ДанныеДляПоиска.Вставить(НовыйКлюч,ТекущиеНастройки);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодулиИзмененияКонфы_ЗаданыВручную(ДокументDOM, стр2)
	
	
	// модуль есть
	Если НЕ стр2.ПолучитьАтрибут("fullName")=Неопределено И Найти(НРег(МетаданныеДляПереноса),НРег(стр2.ПолучитьАтрибут("fullName"))) Тогда 
		
		Properties = НайтиУзлаПоИмениИАтрибуту(стр2.ДочерниеУзлы,"Properties");			
		Если НЕ Properties=Неопределено Тогда
			Property = НайтиУзлаПоИмениИАтрибуту(Properties.ДочерниеУзлы,"Property","name","Module");			
			Если НЕ Property=Неопределено Тогда                          
				MergeRule = НайтиУзлаПоИмениИАтрибуту(Property.ДочерниеУзлы,"MergeRule");
				Если MergeRule=Неопределено Тогда
					MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Property,"MergeRule","GetFromSecondConfiguration");
				Иначе
					MergeRule.ТекстовоеСодержимое="GetFromSecondConfiguration";
				КонецЕсли;						
			КонецЕсли;			
		КонецЕсли;
		
		// модуля нет
	Иначеесли НЕ стр2.ПолучитьАтрибут("fullNameInSecondConfiguration")=Неопределено И Найти(НРег(МетаданныеДляПереноса),НРег(стр2.ПолучитьАтрибут("fullNameInSecondConfiguration"))) Тогда
		
		MergeRule = НайтиУзлаПоИмениИАтрибуту(стр2.ДочерниеУзлы,"MergeRule");
		Если MergeRule=Неопределено Тогда
			MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр2,"MergeRule","GetFromSecondConfiguration");
		Иначе
			MergeRule.ТекстовоеСодержимое="GetFromSecondConfiguration";
		КонецЕсли;		
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_ПоВариантам(ДокументDOM, стр2, ДанныеДляПоиска)
	
	Если РежимОбработкиФайлаСравнения="Prefix" Тогда 
		
		// получим все        
		Для каждого Префикс из ДанныеДляПоиска Цикл 
			
			Если НЕ стр2.ПолучитьАтрибут("fullNameInSecondConfiguration")=Неопределено И Найти(НРег(стр2.ПолучитьАтрибут("fullNameInSecondConfiguration")),НРег(Префикс)) Тогда
				ОбработатьРеквизитыОбъекты_ПоВариантамФрагментСтарый(ДокументDOM, стр2);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли РежимОбработкиФайлаСравнения="Files" Тогда
		
		Если стр2.ПолучитьАтрибут("fullNameInSecondConfiguration")=Неопределено Тогда
			Возврат;
		КонецЕсли;
		МассивЧастей =  СтрРазделить(стр2.ПолучитьАтрибут("fullNameInSecondConfiguration"),".",Истина);
		Если МассивЧастей.Количество()>1 Тогда
			Ключ = МассивЧастей[0]+"."+МассивЧастей[1];
		Иначе     
			Ключ = стр2.ПолучитьАтрибут("fullNameInSecondConfiguration");
		КонецЕсли;
		Если ДанныеДляПоиска.Получить(НРег(Ключ))=Истина Тогда
			ОбработатьРеквизитыОбъекты_ПоВариантамФрагментСтарый(ДокументDOM, стр2);
		КонецЕсли; 
		
	ИначеЕсли РежимОбработкиФайлаСравнения="ComConnect" Тогда
		
		
		// типы
		ОбработатьРеквизитыОбъекты_Типы(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// Движения
		ОбработатьРеквизитыОбъекты_Движения(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// метаданные   
		ОбработатьОбъекты_Метаданные(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// реквизиты     
		ОбработатьРеквизиты_Метаданные(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// критерии                                                        
		ОбработатьСостав_Метаданные(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// права
		ОбработатьРеквизитыОбъекты_Права(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// Предопределенные
		ОбработатьРеквизитыОбъекты_Предопределенные(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// Индексы
		ОбработатьРеквизитыОбъекты_Индексы(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// Состав
		ОбработатьРеквизитыОбъекты_Состав(ДокументDOM, стр2, ДанныеДляПоиска);

		// Нумератор
		ОбработатьРеквизитыОбъекты_Нумератор(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// Источник
		ОбработатьРеквизитыОбъекты_Источник(ДокументDOM, стр2, ДанныеДляПоиска);
		
		// Ввод на основании  все
		ОбработатьРеквизитыОбъекты_ВводНаОсновании(ДокументDOM, стр2, ДанныеДляПоиска);

		// бизнес процессы
		ОбработатьРеквизитыОбъекты_БизнесПроцессы(ДокументDOM, стр2, ДанныеДляПоиска);

		
		
		// EnumValue
		//<Object fullNameInSecondConfiguration="Enum.ВариантыОплатыПоставщику.EnumValue.ппк_ПредоплатаОтПлановойДатыОтгрузки">
		
		// Form 
		//<Object fullNameInSecondConfiguration="Report.СтруктураЗаказаНаПроизводство2_2.Form.ппк_СтруктураЗаказа">
		
		// Command
		//<Object fullNameInSecondConfiguration="Report.СтруктураЗаказаНаПроизводство2_2.Form.ппк_СтруктураЗаказа">
		
		// TabularSection
		//<Object fullNameInSecondConfiguration="DataProcessor.ПодборТоваровВДокументПродажи.TabularSection.Корзина.Attribute.ппк_КоличествоХарактеристик">
		//<Object fullName="DataProcessor.ПодборТоваровВДокументПродажи.TabularSection.Корзина.Attribute.Артикул">
		
		// Template
		//<Object fullNameInSecondConfiguration="DataProcessor.УправлениеПоступлением.Template.ппк_ПриемкаПоЗаданиямНаПеревозку">
		
		// Table
		//<Object fullNameInSecondConfiguration="ExternalDataSource.ппк_РедукционыНаТранспортныеУслуги.Table.ппк_ПрицепыПартнеров.Field.Прицеп">
		
	КонецЕсли;
	
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_ПоВариантамФрагментСтарый(Знач ДокументDOM, Знач стр2)
	
	СуществуетObjectOrder = Ложь;
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="MergeRule" Тогда
			стр3.ТекстовоеСодержимое = "GetFromSecondConfiguration";
		ИначеЕсли стр3.ИмяУзла="ObjectOrder" Тогда
			стр3.ТекстовоеСодержимое = "GetFromMainConfiguration";
			СуществуетObjectOrder = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ СуществуетObjectOrder Тогда
		новый_эл = ДокументDOM.СоздатьЭлемент("ObjectOrder");
		новый_эл.ТекстовоеСодержимое = "GetFromMainConfiguration";
		стр2.ДобавитьДочерний(новый_эл);
	КонецЕсли;

КонецПроцедуры    

&НаКлиенте
Функция ЭтоНенужныйТип(Знач ПолноеИмя)
	ЭтоНенужныйТип=Ложь;   
	
	Если Найти(НРег(СписокМетаданныхДляУдаления),НРег(ПолноеИмя)) Тогда
		ЭтоНенужныйТип=Истина;
	КонецЕсли;
	
	Возврат ЭтоНенужныйТип;	
КонецФункции

#Область ВспомогательныеФункции

&НаКлиенте
Функция ПолучитьКомПодключение(КомБаза,СтрокаСоединение)
	Попытка   
		Если КомБаза=Неопределено Тогда
			КомОбъект = Новый COMОбъект("V83.COMConnector");
			КомБаза = КомОбъект.Connect(СтрокаСоединение);
		КонецЕсли;
	Исключение
		ТекстСообщения = "Ошибка при создании COM объекта по причине: " + ИнформацияОбОшибке().Описание;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки; 	
	Возврат КомБаза;
КонецФункции

&НаКлиенте
Функция ПолучитьИндексКартинки(Знач ПолноеИмя)
	ИндексКартинки = 0;   
	ПолноеИмя = НРег(ПолноеИмя);
	
	Если Найти(ПолноеИмя,".form.") Тогда
		ИндексКартинки = 6;
	ИначеЕсли Найти(ПолноеИмя,"константа.") Тогда
		ИндексКартинки = 1;
	ИначеЕсли Найти(ПолноеИмя,"справочник.") Тогда
		ИндексКартинки = 2;
	ИначеЕсли Найти(ПолноеИмя,"перечисление.") Тогда
		ИндексКартинки = 2;
	ИначеЕсли Найти(ПолноеИмя,"документ.") Тогда
		ИндексКартинки = 5;
	ИначеЕсли Найти(ПолноеИмя,"регистрсведений.") Тогда
		ИндексКартинки = 9;
	ИначеЕсли Найти(ПолноеИмя,"регистрнакопления.") Тогда
		ИндексКартинки = 10;
	ИначеЕсли Найти(ПолноеИмя,"бизнеспроцесс.") Тогда
		ИндексКартинки = 13;
	ИначеЕсли Найти(ПолноеИмя,"задача.") Тогда
		ИндексКартинки = 14;
	КонецЕсли;
	
	Возврат ИндексКартинки;
КонецФункции

&НаКлиенте
Функция НайтиОдинаковыеМассивы(Знач вх_м1,Знач вх_м2)
	
	м1 = СкопироватьМассив(вх_м1);
	м2 = СкопироватьМассив(вх_м2);	
	МассивОдинаковых = Новый Массив;
	Индекс = м1.Количество()-1;
	Пока Индекс >= 0 Цикл
		НайденВм2 = м2.Найти(м1[Индекс]);
		Если НайденВм2 <> Неопределено Тогда
			МассивОдинаковых.Добавить(м2[НайденВм2]);
			м2.Удалить(НайденВм2);
			м1.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс-1;
	КонецЦикла;
	
	Если МассивОдинаковых.Количество()>0 Тогда
		Возврат "="+СтрСоединить(МассивОдинаковых,Символы.ПС+"=");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СкопироватьМассив(м1)
	сз = Новый СписокЗначений;
	сз.ЗагрузитьЗначения(м1);
	//выгружаем результат в новый массив
	Возврат сз.ВыгрузитьЗначения();
КонецФункции

&НаКлиенте
Функция СравнитьМассивы(Знач вх_м1,Знач вх_м2)
	
	м1 = СкопироватьМассив(вх_м1);
	м2 = СкопироватьМассив(вх_м2);
	Индекс = м1.Количество()-1;
	Пока Индекс >= 0 Цикл
		НайденВм2 = м2.Найти(м1[Индекс]);
		Если НайденВм2 <> Неопределено Тогда
			м2.Удалить(НайденВм2);
			м1.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс-1;
	КонецЦикла;
	
	Текст = ?(м1.количество()>0,"+","")+СтрСоединить(м1,Символы.ПС+"+"); 
	Возврат Текст+?(ЗначениеЗаполнено(Текст),Символы.ПС,"")+?(м2.количество()>0,"+","")+СтрСоединить(м2,Символы.ПС+"-");
	
КонецФункции

&НаКлиенте
Функция НайтиУзлаПоИмениИАтрибуту(ДочерниеУзлы,Знач ИмяУзла,Знач ИмяАтрибута="",Знач ЗначениеАтрибута="")
	Для каждого стр из ДочерниеУзлы Цикл
		Если НРег(стр.ИмяУзла)=НРег(ИмяУзла) И ИмяАтрибута="" Тогда
			Возврат стр;
		ИначеЕсли НРег(стр.ИмяУзла)=НРег(ИмяУзла) 
			И ЗначениеЗаполнено(ИмяАтрибута) 
			И НЕ стр.ПолучитьАтрибут(ИмяАтрибута)=Неопределено 
			И НРег(стр.ПолучитьАтрибут(ИмяАтрибута))=НРег(ЗначениеАтрибута) Тогда 
			Возврат стр;
		КонецЕсли;
	КонецЦикла;         
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция  ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Узел,ИмяНовогоУзла,ТекстовоеСодержимое="",ИмяАтрибута="",ЗначениеАтрибута="")
	новый_эл = ДокументDOM.СоздатьЭлемент(ИмяНовогоУзла);
	новый_эл.ТекстовоеСодержимое = ТекстовоеСодержимое;	
	Если ЗначениеЗаполнено(ИмяАтрибута) Тогда
		новый_эл.УстановитьАтрибут(ИмяАтрибута,ЗначениеАтрибута);
	КонецЕсли;
	Узел.ДобавитьДочерний(новый_эл);	
	Возврат новый_эл;
КонецФункции

#Область ПереводРусАнгд

&НаКлиенте
Функция ПодменитьНазваниеТипаТаблицы_Eng_В_Русский(Знач НазваниеEng)
	
	НазваниеРусский = "";
	РезультатПреобразования = НазваниеEng;
	Имя = НРег(НазваниеEng);  
	
	Если Найти(Имя,Нрег("EnumRef")) Тогда
		НазваниеРусский = "ПеречислениеСсылка";
		НазваниеEng = "EnumRef";
	ИначеЕсли Найти(Имя,Нрег("CatalogRef")) Тогда
		НазваниеРусский = "СправочникСсылка";
		НазваниеEng = "CatalogRef";
	ИначеЕсли Найти(Имя,Нрег("DocumentRef")) Тогда
		НазваниеРусский = "ДокументСсылка";
		НазваниеEng = "DocumentRef";
	ИначеЕсли Найти(Имя,Нрег("BusinessProcessRef")) Тогда
		НазваниеРусский = "БизнесПроцессСсылка";
		НазваниеEng = "BusinessProcessRef";
	ИначеЕсли Найти(Имя,Нрег("TaskRef")) Тогда
		НазваниеРусский = "ЗадачаСсылка";		 
		НазваниеEng = "TaskRef";
	ИначеЕсли Найти(Имя,Нрег("ChartOfAccountsRef")) Тогда
		НазваниеРусский = "ПланСчетовСсылка";		 
		НазваниеEng = "ChartOfAccountsRef";
	ИначеЕсли Найти(Имя,Нрег("ChartOfCalculationTypesRef")) Тогда
		НазваниеРусский = "ПланВидовРасчетаСсылка";		 
		НазваниеEng = "ChartOfCalculationTypesRef";
	ИначеЕсли Найти(Имя,Нрег("ChartOfCharacteristicTypesRef")) Тогда
		НазваниеРусский = "ПланВидовХарактеристикСсылка";		 
		НазваниеEng = "ChartOfCharacteristicTypesRef";
	ИначеЕсли Найти(Имя,Нрег("ExchangePlanRef")) Тогда
		НазваниеРусский = "ПланОбменаСсылка";		 
		НазваниеEng = "ExchangePlanRef";
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(НазваниеРусский) Тогда
		РезультатПреобразования = СтрЗаменить(РезультатПреобразования,НазваниеEng,НазваниеРусский);		
	КонецЕсли;
	
	Возврат РезультатПреобразования;
КонецФункции 

&НаКлиенте
Функция ПолучитьСинонимМетаданныхEng(Знач ТипМетаданныхСтрокой)
	Синоним = ТипМетаданныхСтрокой;
	
	Если ТипМетаданныхСтрокой="ОбщийМодуль" Тогда
		Синоним = "CommonModule";
	ИначеЕсли ТипМетаданныхСтрокой="Константа" Тогда
		Синоним = "Constant";		
	ИначеЕсли ТипМетаданныхСтрокой="Справочник" Тогда
		Синоним = "Catalog";
	ИначеЕсли ТипМетаданныхСтрокой="Перечисление" Тогда
		Синоним = "Enum";
	ИначеЕсли ТипМетаданныхСтрокой="Документ" Тогда
		Синоним = "Document";
	ИначеЕсли ТипМетаданныхСтрокой="РегистрНакопления" Тогда
		Синоним = "AccumulationRegister";
	ИначеЕсли ТипМетаданныхСтрокой="РегистрСведений" Тогда
		Синоним = "InformationRegister";
	ИначеЕсли ТипМетаданныхСтрокой="Задача" Тогда
		Синоним = "Task";
	ИначеЕсли ТипМетаданныхСтрокой="БизнесПроцесс" Тогда
		Синоним = "BusinessProcess";
	ИначеЕсли ТипМетаданныхСтрокой="ПланОбмена" Тогда
		Синоним = "ExchangePlan";
	ИначеЕсли ТипМетаданныхСтрокой="ВнешнийИсточникДанных" Тогда
		Синоним = "ExternalDataSource";
	ИначеЕсли ТипМетаданныхСтрокой="ПланВидовХарактеристик" Тогда
		Синоним = "ChartOfCharacteristicTypes";
	ИначеЕсли ТипМетаданныхСтрокой="Обработка" Тогда
		Синоним = "DataProcessor";
	ИначеЕсли ТипМетаданныхСтрокой="Отчет" Тогда
		Синоним = "Report";   
	ИначеЕсли ТипМетаданныхСтрокой="ОбщаяФорма" Тогда
		Синоним = "CommonForm";	
	ИначеЕсли ТипМетаданныхСтрокой="ОпределяемыйТип" Тогда
		Синоним = "DefinedType";			
	ИначеЕсли ТипМетаданныхСтрокой="ВнешнийОтчет" Тогда
		Синоним = "ExternalReport";   		                           
	ИначеЕсли ТипМетаданныхСтрокой="ВнешняяОбработка" Тогда
		Синоним = "ExternalDataProcessor";   		                           
		
		
	ИначеЕсли ТипМетаданныхСтрокой="НумераторДокументов" Тогда       
		Синоним = "DocumentNumerator";                           
		
		
	ИначеЕсли ТипМетаданныхСтрокой="ОбщийМакет" Тогда
		Синоним = "CommonTemplate";		
	ИначеЕсли ТипМетаданныхСтрокой="Подсистема" Тогда
		Синоним = "Subsystem";
	ИначеЕсли ТипМетаданныхСтрокой="ПодпискаНаСобытие" Тогда
		Синоним = "EventSubscription";
	ИначеЕсли ТипМетаданныхСтрокой="ОбщаяКартинка" Тогда
		Синоним = "CommonPicture";
	ИначеЕсли ТипМетаданныхСтрокой="ОбщаяКоманда" Тогда
		Синоним = "CommonCommand";
	ИначеЕсли ТипМетаданныхСтрокой="Роль" Тогда
		Синоним = "Role";
	ИначеЕсли ТипМетаданныхСтрокой="ГруппаКоманд" Тогда
		Синоним = "CommandGroup";
	ИначеЕсли ТипМетаданныхСтрокой="HTTPСервис" Тогда
		Синоним = "HTTPService";
	ИначеЕсли ТипМетаданныхСтрокой="Стиль" Тогда
		Синоним = "Style";
	ИначеЕсли ТипМетаданныхСтрокой="ЭлементСтиля" Тогда
		Синоним = "StyleItem";
	ИначеЕсли ТипМетаданныхСтрокой="КритерийОтбора" Тогда
		Синоним = "FilterCriterion";
	ИначеЕсли ТипМетаданныхСтрокой="РегламентноеЗадание" Тогда
		Синоним = "ScheduledJob";
	ИначеЕсли ТипМетаданныхСтрокой="ПараметрСеанса" Тогда
		Синоним = "SessionParameter";
	ИначеЕсли ТипМетаданныхСтрокой="ФункциональнаяОпция" Тогда
		Синоним = "FunctionalOption";
	ИначеЕсли ТипМетаданныхСтрокой="" Тогда
		Синоним = "";
		
		
	КонецЕсли;
	
	Возврат Синоним;
КонецФункции

&НаКлиенте
Функция ПолучитьСинонимEngИзКаталога(Знач ТипМетаданныхСтрокой)
	Синоним = ТипМетаданныхСтрокой;
	
	Если ТипМетаданныхСтрокой="CommonModules" Тогда
		Синоним = "CommonModule";
	ИначеЕсли ТипМетаданныхСтрокой="Catalogs" Тогда
		Синоним = "Catalog";
	ИначеЕсли ТипМетаданныхСтрокой="Documents" Тогда
		Синоним = "Document";  
	ИначеЕсли ТипМетаданныхСтрокой="Subsystems" Тогда
		Синоним = "Subsystem";  		
	ИначеЕсли ТипМетаданныхСтрокой="AccumulationRegisters" Тогда
		Синоним = "AccumulationRegister";
	ИначеЕсли ТипМетаданныхСтрокой="InformationRegisters" Тогда
		Синоним = "InformationRegister";
	ИначеЕсли ТипМетаданныхСтрокой="Tasks" Тогда
		Синоним = "Task";
	ИначеЕсли ТипМетаданныхСтрокой="BusinessProcesses" Тогда
		Синоним = "BusinessProcess";
	ИначеЕсли ТипМетаданныхСтрокой="DataProcessors" Тогда
		Синоним = "DataProcessor";
	ИначеЕсли ТипМетаданныхСтрокой="Reports" Тогда
		Синоним = "Report";   
	ИначеЕсли ТипМетаданныхСтрокой="CommonForms" Тогда
		Синоним = "CommonForm";	
	ИначеЕсли ТипМетаданныхСтрокой="ExternalReports" Тогда
		Синоним = "ExternalReport";   		                           
	ИначеЕсли ТипМетаданныхСтрокой="ExternalDataProcessors" Тогда
		Синоним = "ExternalDataProcessor";   		                           
	ИначеЕсли ТипМетаданныхСтрокой="Roles" Тогда
		Синоним = "Role";  		
	ИначеЕсли ТипМетаданныхСтрокой="WebServices" Тогда
		Синоним = "WebService";  		
	ИначеЕсли ТипМетаданныхСтрокой="HTTPServices" Тогда
		Синоним = "HTTPService";  		
	ИначеЕсли ТипМетаданныхСтрокой="Constants" Тогда
		Синоним = "Constant";  		
	ИначеЕсли ТипМетаданныхСтрокой="Enums" Тогда
		Синоним = "Enum";  		
	ИначеЕсли ТипМетаданныхСтрокой="DocumentJournals" Тогда
		Синоним = "DocumentJournal";  		        
	ИначеЕсли ТипМетаданныхСтрокой="ExternalDataSources" Тогда
		Синоним = "ExternalDataSource";  		
	ИначеЕсли ТипМетаданныхСтрокой="FunctionalOptions" Тогда
		Синоним = "FunctionalOption";  		
	ИначеЕсли ТипМетаданныхСтрокой="FunctionalOptionsParameters" Тогда
		Синоним = "FunctionalOptionsParameter";  		
	ИначеЕсли ТипМетаданныхСтрокой="DefinedTypes" Тогда
		Синоним = "DefinedType";  		
	ИначеЕсли ТипМетаданныхСтрокой="CommonCommands" Тогда
		Синоним = "CommonCommand";  		
	ИначеЕсли ТипМетаданныхСтрокой="CommandGroups" Тогда
		Синоним = "CommandGroup";  		
	ИначеЕсли ТипМетаданныхСтрокой="xdtopackages" Тогда
		Синоним = "xdtopackage";  		
	ИначеЕсли ТипМетаданныхСтрокой="StyleItems" Тогда
		Синоним = "StyleItem";  		
	ИначеЕсли ТипМетаданныхСтрокой="SessionParameters" Тогда
		Синоним = "SessionParameter";  		
	ИначеЕсли ТипМетаданныхСтрокой="ScheduledJobs" Тогда
		Синоним = "ScheduledJob";  		
	ИначеЕсли ТипМетаданныхСтрокой="ExchangePlans" Тогда
		Синоним = "ExchangePlan";  		
	ИначеЕсли ТипМетаданныхСтрокой="EventSubscriptions" Тогда
		Синоним = "EventSubscription";  		
	ИначеЕсли ТипМетаданныхСтрокой="CommonTemplates" Тогда
		Синоним = "CommonTemplate";  		
	ИначеЕсли ТипМетаданныхСтрокой="CommonPictures" Тогда
		Синоним = "CommonPicture";  		
	ИначеЕсли ТипМетаданныхСтрокой="ChartsOfCharacteristicTypes" Тогда
		Синоним = "ChartOfCharacteristicTypes";  		
	ИначеЕсли ТипМетаданныхСтрокой="" Тогда
		Синоним = "";  		
	ИначеЕсли ТипМетаданныхСтрокой="" Тогда
		Синоним = "";  		
	ИначеЕсли ТипМетаданныхСтрокой="" Тогда
		Синоним = "";  		
	ИначеЕсли ТипМетаданныхСтрокой="" Тогда
		Синоним = "";  		
	ИначеЕсли ТипМетаданныхСтрокой="" Тогда
		Синоним = "";  		
	ИначеЕсли ТипМетаданныхСтрокой="" Тогда
		Синоним = "";  		
		
	КонецЕсли;
	
	Возврат Синоним;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Обработка

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_ВводНаОсновании(ДокументDOM, Знач стр2, ДанныеДляПоиска)

	Ключ = стр2.ПолучитьАтрибут("fullName");
	
	Если Ключ=Неопределено Тогда
		Возврат;
	КонецЕсли; 	 	
	
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда          
			
			BasedOn = НайтиУзлаПоИмениИАтрибуту(стр3.ДочерниеУзлы,"Property","name","BasedOn");
			
			Если НЕ BasedOn=Неопределено Тогда
				MergeRule = НайтиУзлаПоИмениИАтрибуту(BasedOn.ДочерниеУзлы,"MergeRule");
				Если MergeRule=Неопределено Тогда
					MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,BasedOn,"MergeRule","MergePrioritizingMainConfiguration");
				Иначе
					MergeRule.ТекстовоеСодержимое="MergePrioritizingMainConfiguration";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры      

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_БизнесПроцессы(ДокументDOM, Знач стр2, ДанныеДляПоиска)

	//Ключ = стр2.ПолучитьАтрибут("fullName");
	//
	//Если Ключ=Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 	 	
	//
	//// изменим свойство
	//Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
	//	Если стр3.ИмяУзла="Properties" Тогда          
	//		
	//		BasedOn = НайтиУзлаПоИмениИАтрибуту(стр3.ДочерниеУзлы,"Property","name","BasedOn");
	//		
	//		Если НЕ BasedOn=Неопределено Тогда
	//			MergeRule = НайтиУзлаПоИмениИАтрибуту(BasedOn.ДочерниеУзлы,"MergeRule");
	//			Если MergeRule=Неопределено Тогда
	//				MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,BasedOn,"MergeRule","MergePrioritizingMainConfiguration");
	//			Иначе
	//				MergeRule.ТекстовоеСодержимое="MergePrioritizingMainConfiguration";
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_Индексы(ДокументDOM, Знач стр2, ДанныеДляПоиска)
	
	Если стр2.ПолучитьАтрибут("fullName")=Неопределено Тогда
		Возврат;
	КонецЕсли; 	 
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда          
			
			Indexing = НайтиУзлаПоИмениИАтрибуту(стр3.ДочерниеУзлы,"Property","name","Indexing");
			
			Если НЕ Indexing=Неопределено Тогда
				MergeRule = НайтиУзлаПоИмениИАтрибуту(Indexing.ДочерниеУзлы,"MergeRule");
				Если MergeRule=Неопределено Тогда
					MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Indexing,"MergeRule","GetFromSecondConfiguration");
				Иначе
					MergeRule.ТекстовоеСодержимое="GetFromSecondConfiguration";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры        

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_Типы(ДокументDOM, Знач стр2, ДанныеДляПоиска)
	
	Если стр2.ПолучитьАтрибут("fullName")=Неопределено Тогда
		Возврат;
	КонецЕсли; 	 
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	СтруктураДанных = ДанныеДляПоиска.Получить(НРег(Ключ));
	
	Если СтруктураДанных=Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ДанныеТипы = Неопределено;  
	ДанныеТипыСовпадения = Неопределено;    
	StringLength = Неопределено;
	
	СтруктураДанных.Свойство("StringLength",StringLength); 
	// обработаем изменение длины
	Если НЕ StringLength=Неопределено Тогда
		Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
			Если стр3.ИмяУзла="Properties" Тогда
				Для каждого стр4 из стр3.ДочерниеУзлы Цикл
					Если стр4.ИмяУзла="Property" И стр4.ПолучитьАтрибут("name")="Type" Тогда
						MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
						Если MergeRule=Неопределено Тогда
							ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
						Иначе
							MergeRule.ТекстовоеСодержимое = "GetFromSecondConfiguration";
						КонецЕсли;
					КонецЕсли;		
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	СтруктураДанных.Свойство("Types",ДанныеТипы);  
	
	Если ДанныеТипы=Неопределено Тогда
		Возврат;
	КонецЕсли;     
	
	СтруктураДанных.Свойство("Types_equal",ДанныеТипыСовпадения);
	
	
	СуществуетObjectOrder = Ложь;
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда
			Для каждого стр4 из стр3.ДочерниеУзлы Цикл
				Если стр4.ИмяУзла="Property" И стр4.ПолучитьАтрибут("name")="Type" Тогда
					
					// ищем правило
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Types = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"Types");   
					
					Если MergeRule=Неопределено Тогда      
						MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingMainConfiguration");
					Иначе   
						MergeRule.ТекстовоеСодержимое = "MergePrioritizingMainConfiguration";
					КонецЕсли;
					//Ищем      
					
					// Types 
					Если Types=Неопределено Тогда   
						Types = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"Types","");
					КонецЕсли;  
					
					МассивТипов = СтрРазделить(ДанныеТипы,Символы.ПС,Ложь);
					Для каждого иск_тип из МассивТипов Цикл      
						// "+" отсуствует во второй конфигурации
						// "-" отсуствует в первой конфигурации
						Если Найти(иск_тип,"+") Тогда
							ИскКлюч = иск_тип;
							ИскКлюч = СокрЛП(СтрЗаменить(ИскКлюч,"-",""));
							ИскКлюч = СокрЛП(СтрЗаменить(ИскКлюч,"+","")); 
							ИскКлючРусский = ПодменитьНазваниеТипаТаблицы_Eng_В_Русский(ИскКлюч);
							ИскУзел = НайтиУзлаПоИмениИАтрибуту(Types.ДочерниеУзлы,"Type","Name",ИскКлючРусский);
							
							MergeRule_ТекстовоеСодержимое = "GetFromSecondConfiguration"; //"MergePrioritizingSecondConfiguration"
							
							Если ИскУзел=Неопределено Тогда
								// добавляем
								НовыйType = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Types,"Type","","Name",ИскКлючРусский);
								ДобавитьУзелИТекстовоеЗначение(ДокументDOM,НовыйType,"MergeRule",MergeRule_ТекстовоеСодержимое);
							Иначе
								MergeRule_Type = НайтиУзлаПоИмениИАтрибуту(ИскУзел.ДочерниеУзлы,"MergeRule");
								Если НЕ MergeRule_Type=Неопределено Тогда
									MergeRule_Type.ТекстовоеСодержимое = MergeRule_ТекстовоеСодержимое;
								Иначе
									ДобавитьУзелИТекстовоеЗначение(ДокументDOM,ИскУзел,"MergeRule",MergeRule_ТекстовоеСодержимое);		
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					//Типы для удаления
					МассивТипов = СтрРазделить(ДанныеТипыСовпадения,Символы.ПС,Ложь);
					Для каждого иск_тип из МассивТипов Цикл      
						// "+" отсуствует во второй конфигурации
						// "-" отсуствует в первой конфигурации
						Если Найти(иск_тип,"=") Тогда
							ИскКлюч = иск_тип;
							ИскКлюч = СокрЛП(СтрЗаменить(ИскКлюч,"=",""));
							ИскКлючРусский = ПодменитьНазваниеТипаТаблицы_Eng_В_Русский(ИскКлюч);
							ИскУзел = НайтиУзлаПоИмениИАтрибуту(Types.ДочерниеУзлы,"Type","Name",ИскКлючРусский);
							
							Если ДанныеДляПоиска.Получить(НРег(СтрЗаменить(ИскКлюч,"Ref",""))+"/удалить")=Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							MergeRule_ТекстовоеСодержимое = "DoNotMerge";

							
							Если ИскУзел=Неопределено Тогда
								// добавляем
								НовыйType = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Types,"Type","","Name",ИскКлючРусский);
								ДобавитьУзелИТекстовоеЗначение(ДокументDOM,НовыйType,"MergeRule",MergeRule_ТекстовоеСодержимое);
							Иначе
								MergeRule_Type = НайтиУзлаПоИмениИАтрибуту(ИскУзел.ДочерниеУзлы,"MergeRule");
								Если НЕ MergeRule_Type=Неопределено Тогда
									MergeRule_Type.ТекстовоеСодержимое = MergeRule_ТекстовоеСодержимое;
								Иначе
									ДобавитьУзелИТекстовоеЗначение(ДокументDOM,ИскУзел,"MergeRule",MergeRule_ТекстовоеСодержимое);		
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры   

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_Движения(ДокументDOM, Знач стр2, ДанныеДляПоиска)
	
	Если стр2.ПолучитьАтрибут("fullName")=Неопределено Тогда
		Возврат;
	КонецЕсли; 	 
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	СтруктураДанных = ДанныеДляПоиска.Получить(НРег(Ключ));
	
	Если СтруктураДанных=Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ДанныеДвижения = Неопределено;  

	СтруктураДанных.Свойство("RegisterRecords",ДанныеДвижения);  
	
	Если ДанныеДвижения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	СуществуетObjectOrder = Ложь;
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда          
			
			RegisterRecords = НайтиУзлаПоИмениИАтрибуту(стр3.ДочерниеУзлы,"Property","name","RegisterRecords");
			
			Если RegisterRecords=Неопределено Тогда
				// добавляем
				RegisterRecords = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр3,"Property","","name","RegisterRecords");
				// добавляем                
				MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,RegisterRecords,"MergeRule","MergePrioritizingSecondConfiguration");
			Иначе 				
				MergeRule = НайтиУзлаПоИмениИАтрибуту(RegisterRecords.ДочерниеУзлы,"MergeRule");				
				Если MergeRule=Неопределено Тогда
					MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,RegisterRecords,"MergeRule","MergePrioritizingSecondConfiguration");
				Иначе
					MergeRule.ТекстовоеСодержимое = "MergePrioritizingSecondConfiguration";
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры   

&НаКлиенте
Процедура Обработать_МетаданныеСвойства(ДокументDOM, стр2, ДанныеДляПоиска)
	
	// для fullName будут типы
	// а для  fullNameInSecondConfiguration целиком получить
	
	Ключ = стр2.ПолучитьАтрибут("fullName")+".StandartAttribute";
	
	Если Ключ=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанных = ДанныеДляПоиска.Получить(НРег(Ключ));
	
	Если СтруктураДанных=Неопределено Тогда
		Возврат;
	КонецЕсли;      
	
	DescriptionLength = Неопределено;
	CodeLength = Неопределено;      
	Hierarchical = Неопределено;
	HierarchyType = Неопределено; 
	CheckUnique = Неопределено; 
	Autonumbering = Неопределено; 
	StandardAttributes = Неопределено;    
	BasedOn = Неопределено;
	СтруктураДанных.Свойство("DescriptionLength",DescriptionLength);
	СтруктураДанных.Свойство("CodeLength",CodeLength);
	СтруктураДанных.Свойство("Hierarchical",Hierarchical);
	СтруктураДанных.Свойство("HierarchyType",HierarchyType);
	СтруктураДанных.Свойство("CheckUnique",CheckUnique);
	СтруктураДанных.Свойство("Autonumbering",Autonumbering);
	СтруктураДанных.Свойство("StandardAttributes",StandardAttributes);
	СтруктураДанных.Свойство("BasedOn",BasedOn);
	
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда
			Для каждого стр4 из стр3.ДочерниеУзлы Цикл
				Если стр4.ИмяУзла="Property" И стр4.ПолучитьАтрибут("name")="DescriptionLength" И НЕ DescriptionLength=Неопределено Тогда
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Если MergeRule=Неопределено Тогда
						ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
					Иначе
						MergeRule.ТекстовоеСодержимое = "GetFromSecondConfiguration";
					КонецЕсли;
				ИначеЕсли стр4.ИмяУзла="Property" И стр4.ПолучитьАтрибут("name")="CodeLength" И НЕ CodeLength=Неопределено Тогда
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Если MergeRule=Неопределено Тогда
						ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
					Иначе
						MergeRule.ТекстовоеСодержимое = "GetFromSecondConfiguration";
					КонецЕсли; 
					
					
					
				ИначеЕсли стр4.ИмяУзла="Property" И стр4.ПолучитьАтрибут("name")="Hierarchical" И НЕ Hierarchical=Неопределено Тогда
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Если MergeRule=Неопределено Тогда
						ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
					Иначе
						MergeRule.ТекстовоеСодержимое = "GetFromSecondConfiguration";
					КонецЕсли;
				ИначеЕсли стр4.ИмяУзла="Property" И стр4.ПолучитьАтрибут("name")="HierarchyType" И НЕ HierarchyType=Неопределено Тогда
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Если MergeRule=Неопределено Тогда
						ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
					Иначе
						MergeRule.ТекстовоеСодержимое = "GetFromSecondConfiguration";
					КонецЕсли;
				ИначеЕсли стр4.ИмяУзла="Property" И стр4.ПолучитьАтрибут("name")="CheckUnique" И НЕ CheckUnique=Неопределено Тогда
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Если MergeRule=Неопределено Тогда
						ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
					Иначе
						MergeRule.ТекстовоеСодержимое = "GetFromSecondConfiguration";
					КонецЕсли;
				ИначеЕсли стр4.ИмяУзла="Property" И стр4.ПолучитьАтрибут("name")="Autonumbering" И НЕ Autonumbering=Неопределено Тогда
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Если MergeRule=Неопределено Тогда
						ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
					Иначе
						MergeRule.ТекстовоеСодержимое = "GetFromSecondConfiguration";
					КонецЕсли;
				ИначеЕсли стр4.ИмяУзла="Property" И Нрег(стр4.ПолучитьАтрибут("name"))=НРег("StandardAttributes") И НЕ StandardAttributes=Неопределено Тогда
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Если MergeRule=Неопределено Тогда
						ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
					Иначе
						MergeRule.ТекстовоеСодержимое = "GetFromSecondConfiguration";
					КонецЕсли;
				ИначеЕсли стр4.ИмяУзла="Property" И Нрег(стр4.ПолучитьАтрибут("name"))=НРег("BasedOn") И НЕ BasedOn=Неопределено Тогда
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Если MergeRule=Неопределено Тогда
						ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
					Иначе
						MergeRule.ТекстовоеСодержимое = "MergePrioritizingMainConfiguration";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;                                       
	КонецЦикла;
	
КонецПроцедуры 


&НаКлиенте
Процедура ОбработатьСостав_Метаданные(ДокументDOM, стр2, ДанныеДляПоиска)
	
	// для fullName будут типы
	// а для  fullNameInSecondConfiguration целиком получить
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	
	Если Ключ=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанных = ДанныеДляПоиска.Получить(НРег(Ключ));
	
	Если СтруктураДанных=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Данные = Неопределено;
	
	СтруктураДанных.Свойство("Metadata",Данные);
	
	Если Данные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда
			Для каждого стр4 из стр3.ДочерниеУзлы Цикл
				Если стр4.ИмяУзла="Property" И стр4.ПолучитьАтрибут("name")="Content" Тогда
					MergeRule = НайтиУзлаПоИмениИАтрибуту(стр4.ДочерниеУзлы,"MergeRule");
					Если MergeRule=Неопределено Тогда
						ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр4,"MergeRule","MergePrioritizingSecondConfiguration");
					Иначе
						MergeRule.ТекстовоеСодержимое = "MergePrioritizingSecondConfiguration";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьОбъекты_Метаданные(ДокументDOM, стр2, ДанныеДляПоиска)
	
	// если нет тега во внешней, тогда не надо
	Если стр2.ПолучитьАтрибут("fullNameInSecondConfiguration")=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	МассивЧастей =  СтрРазделить(стр2.ПолучитьАтрибут("fullNameInSecondConfiguration"),".",Истина);
	
	Если МассивЧастей.Количество()>1 Тогда
		Ключ = МассивЧастей[0]+"."+МассивЧастей[1];
	Иначе     
		Ключ = стр2.ПолучитьАтрибут("fullNameInSecondConfiguration");
	КонецЕсли;       
	
	СтруктураДанных = ДанныеДляПоиска.Получить(НРег(Ключ));
	
	Если СтруктураДанных=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Данные = Неопределено;
	
	СтруктураДанных.Свойство("Metadata",Данные);
	
	Если Данные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуществуетObjectOrder = Ложь;
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="MergeRule" Тогда
			стр3.ТекстовоеСодержимое = "GetFromSecondConfiguration";
		ИначеЕсли стр3.ИмяУзла="ObjectOrder" Тогда
			стр3.ТекстовоеСодержимое = "GetFromMainConfiguration";
			//стр3.ТекстовоеСодержимое = "GetFromSecondConfiguration";
			СуществуетObjectOrder = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ СуществуетObjectOrder Тогда
		новый_эл = ДокументDOM.СоздатьЭлемент("ObjectOrder");
		новый_эл.ТекстовоеСодержимое = "GetFromMainConfiguration";
		стр2.ДобавитьДочерний(новый_эл);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьРеквизиты_Метаданные(ДокументDOM, стр2, ДанныеДляПоиска)
	
	// для fullName будут типы
	// а для  fullNameInSecondConfiguration целиком получить
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	Если Ключ=Неопределено Тогда            
		Ключ = стр2.ПолучитьАтрибут("fullNameInSecondConfiguration");
	КонецЕсли;
	
	Если Ключ=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// у реквизитов больше одной точки
	Если СтрЧислоВхождений(Ключ,".")=1 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ДанныеДляПоиска.Получить(НРег(Ключ));
	
	Если СтруктураДанных=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Данные = Неопределено;
	
	СтруктураДанных.Свойство("Metadata",Данные);
	
	Если Данные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуществуетObjectOrder = Ложь;
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="MergeRule" Тогда
			//стр3.ТекстовоеСодержимое = "GetFromMainConfiguration";
			стр3.ТекстовоеСодержимое = "GetFromSecondConfiguration";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_Права(ДокументDOM, Знач стр2, ДанныеДляПоиска)
	
	Если стр2.ПолучитьАтрибут("fullName")=Неопределено Тогда
		Возврат;
	КонецЕсли; 	 
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	СтруктураДанных = ДанныеДляПоиска.Получить(НРег(Ключ));
	
	Если СтруктураДанных=Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ДанныеПрава = Неопределено;  

	СтруктураДанных.Свойство("Rights",ДанныеПрава);  
	
	Если ДанныеПрава=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	СуществуетObjectOrder = Ложь;
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда          
			
			Rights = НайтиУзлаПоИмениИАтрибуту(стр3.ДочерниеУзлы,"Property","name","Rights");
			
			Если Rights=Неопределено Тогда
				// добавляем
				Rights = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр3,"Property","","name","Rights");
				// добавляем                
				MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Rights,"MergeRule","MergePrioritizingMainConfiguration");
			Иначе 				
				MergeRule = НайтиУзлаПоИмениИАтрибуту(Rights.ДочерниеУзлы,"MergeRule");				
				Если MergeRule=Неопределено Тогда
					MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Rights,"MergeRule","MergePrioritizingMainConfiguration");
				Иначе
					MergeRule.ТекстовоеСодержимое = "MergePrioritizingMainConfiguration";
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры   

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_Предопределенные(ДокументDOM, Знач стр2, ДанныеДляПоиска)
	
	Если стр2.ПолучитьАтрибут("fullName")=Неопределено Тогда
		Возврат;
	КонецЕсли; 	 
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	СтруктураДанных = ДанныеДляПоиска.Получить(НРег(Ключ));
	
	Если СтруктураДанных=Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	Данные = Неопределено;  

	СтруктураДанных.Свойство("Predefined",Данные);  
	
	Если Данные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	СуществуетObjectOrder = Ложь;
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда          
			
			Predefined = НайтиУзлаПоИмениИАтрибуту(стр3.ДочерниеУзлы,"Property","name","Predefined");
			
			Если Predefined=Неопределено Тогда
				// добавляем
				Predefined = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,стр3,"Property","","name","Predefined");
				// добавляем                
				MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Predefined,"MergeRule","MergePrioritizingMainConfiguration");
			Иначе 				
				MergeRule = НайтиУзлаПоИмениИАтрибуту(Predefined.ДочерниеУзлы,"MergeRule");				
				Если MergeRule=Неопределено Тогда
					MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Predefined,"MergeRule","MergePrioritizingMainConfiguration");
				Иначе
					MergeRule.ТекстовоеСодержимое = "MergePrioritizingMainConfiguration";
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры   

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_Нумератор(ДокументDOM, Знач стр2, ДанныеДляПоиска)
	
	Если стр2.ПолучитьАтрибут("fullName")=Неопределено Тогда
		Возврат;
	КонецЕсли; 	 
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда          
			
			Numerator = НайтиУзлаПоИмениИАтрибуту(стр3.ДочерниеУзлы,"Property","name","Numerator");
			
			Если НЕ Numerator=Неопределено Тогда
				MergeRule = НайтиУзлаПоИмениИАтрибуту(Numerator.ДочерниеУзлы,"MergeRule");
				Если MergeRule=Неопределено Тогда
					MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Numerator,"MergeRule","GetFromSecondConfiguration");
				Иначе
					MergeRule.ТекстовоеСодержимое="GetFromSecondConfiguration";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_Состав(ДокументDOM, Знач стр2, ДанныеДляПоиска)
	
	Если стр2.ПолучитьАтрибут("fullName")=Неопределено Тогда
		Возврат;
	КонецЕсли; 	 
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда          
			
			Content = НайтиУзлаПоИмениИАтрибуту(стр3.ДочерниеУзлы,"Property","name","Content");
			
			Если НЕ Content=Неопределено Тогда
				MergeRule = НайтиУзлаПоИмениИАтрибуту(Content.ДочерниеУзлы,"MergeRule");
				Если MergeRule=Неопределено Тогда
					MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Content,"MergeRule","MergePrioritizingMainConfiguration");
				Иначе
					MergeRule.ТекстовоеСодержимое="MergePrioritizingMainConfiguration";
				КонецЕсли;					
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры   

&НаКлиенте
Процедура ОбработатьРеквизитыОбъекты_Источник(ДокументDOM, Знач стр2, ДанныеДляПоиска)
	
	Ключ = стр2.ПолучитьАтрибут("fullName");
	
	Если Ключ=Неопределено Тогда
		Возврат;
	КонецЕсли; 	 
	
	
	// изменим свойство
	Для каждого стр3 из стр2.ДочерниеУзлы Цикл 
		Если стр3.ИмяУзла="Properties" Тогда          
			
			Source = НайтиУзлаПоИмениИАтрибуту(стр3.ДочерниеУзлы,"Property","name","Source");
			
			Если НЕ Source=Неопределено Тогда
				MergeRule = НайтиУзлаПоИмениИАтрибуту(Source.ДочерниеУзлы,"MergeRule");
				Если MergeRule=Неопределено Тогда
					MergeRule = ДобавитьУзелИТекстовоеЗначение(ДокументDOM,Source,"MergeRule","MergePrioritizingMainConfiguration");
				Иначе
					MergeRule.ТекстовоеСодержимое="MergePrioritizingMainConfiguration";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 





#КонецОбласти


#КонецОбласти