&НаКлиенте
Перем КомБазаПерваяКонфигурация;
&НаКлиенте
Перем КомБазаВтораяКонфигурация;
&НаКлиенте
Перем ВспомогательныеДанные;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВспомогательныеДанные = Новый Структура;
	ВспомогательныеДанные.Вставить("ТаблицаИсточник1",Новый Массив);
	ВспомогательныеДанные.Вставить("ТаблицаИсточник2",Новый Массив);
	ВспомогательныеДанные.Вставить("ТаблицаВыборка",Новый Массив);
	
	НеПоказыватьТаблицыИсточникиНаФормеПриИзменении(Неопределено);
	
	Элементы.ТипЗапроса.СписокВыбора.Добавить("РегистрыНакопленияОСтатки","РН Остатки");
	Элементы.ТипЗапроса.СписокВыбора.Добавить("СсылочныйТип","Ссылки");   
	
	Если НЕ ЗначениеЗаполнено(ТипЗапроса) Тогда
		ТипЗапроса = "РегистрыНакопленияОСтатки";
	КонецЕсли;    
	
	СформироватьДерево();
	
КонецПроцедуры   


&НаКлиенте
Функция ПолучитьКомПодключение(КомБаза,БазаДанных)
	Попытка                                                 
		СтрокаПодключения = ОбщегоНазначенияКлиентСервер.ЗначениеРеквизитаОбъекта(БазаДанных,"СтрокаПодключения");
		Если НЕ ЗначениеЗаполнено(СтрокаПодключения) Тогда
			ВызватьИсключение "Не заполнена строка соединения в базе: "+БазаДанных;
		КонецЕсли;
		Если КомБаза=Неопределено Тогда
			КомОбъект = Новый COMОбъект("V83.COMConnector");
			КомБаза = КомОбъект.Connect(СтрокаПодключения);
		КонецЕсли;
	Исключение                                                       
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = "Ошибка при создании COM объекта по причине: " + ИнформацияОбОшибке.Описание;
		Если НЕ ИнформацияОбОшибке.Причина=Неопределено Тогда
			ТекстСообщения = ТекстСообщения+Символы.ПС+"Причина: "+ИнформацияОбОшибке.Причина.Описание
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки; 	
	Возврат КомБаза;
КонецФункции


&НаКлиенте
Процедура КонструкторЗапроса(Команда)     

	Зафиксировать = Истина;
	
	ТекстЗапроса = "";
	ИмяПоля="";
	
	Если ЭтаФорма.ТекущийЭлемент.Имя="КонструкторЗапросаИсточник1" ИЛИ 
		ЭтаФорма.ТекущийЭлемент.Имя="КонструкторЗапросаИсточник_1"
		Тогда
		ТекстЗапроса = ТекстЗапросаИсточник1;
		ИмяПоля = "ТекстЗапросаИсточник1";
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя="КонструкторЗапросаИсточник2" ИЛИ 
		ЭтаФорма.ТекущийЭлемент.Имя="КонструкторЗапросаИсточник_2"
		Тогда
		ТекстЗапроса = ТекстЗапросаИсточник2;
		ИмяПоля = "ТекстЗапросаИсточник2";
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя="КонструкторЗапросаВыборка" ИЛИ
		ЭтаФорма.ТекущийЭлемент.Имя="КонструкторЗапросаВыборка_" Тогда
		ТекстЗапроса = ТекстЗапросаВыборка;
		ИмяПоля = "ТекстЗапросаВыборка";
	КонецЕсли;
	
	КонструкторЗапроса = Новый КонструкторЗапроса();
	КонструкторЗапроса.Текст = ТекстЗапроса;
	
	ДопПараметры = Новый Структура("ИмяПоля",ИмяПоля);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаТекстаЗапроса",ЭтаФорма,ДопПараметры);
	КонструкторЗапроса.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаТекстаЗапроса(Текст,ДополнительныеПараметры) Экспорт
	Если Текст=Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	ЭтаФорма[ДополнительныеПараметры.ИмяПоля] = Текст;
	
КонецПроцедуры       


// Процедура - Создать динамические колонки таблицы
//
// Параметры:
//  ИмяТаблицы					 - строка	 - имя таблицы на форме строкой
//  МассивСтруктурКолонок		 - 	 - описание создаваемых колонок
//  МассивСтруктурТекущихКолонок - 	 - описание текущих колонок для удаления из текущей таблицы
&НаСервере
Процедура СоздатьДинамическиеКолонкиТаблицы(ИмяТаблицы,МассивСтруктурКолонок,МассивСтруктурТекущихКолонок)
	
	МассивУдаляемыхЭлементов = новый Массив;
	МассивДобавляемыхЭлементов = новый Массив;       
	
	Для каждого Колонка из МассивСтруктурТекущихКолонок Цикл
		МассивУдаляемыхЭлементов.Добавить(ИмяТаблицы+"."+Колонка.Имя);
		Элементы.Удалить(Элементы[ИмяТаблицы+Колонка.Имя]);    
	КонецЦикла;   
	
	КвСтроки = Новый КвалификаторыСтроки(150);
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("ТаблицаЗначений"));           
	ОписаниеТиповТаблица = Новый ОписаниеТипов(МассивТипов);
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("Строка"));          
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов,,КвСтроки);
	
	Для каждого Колонка из МассивСтруктурКолонок Цикл
		Если Колонка.ТипЗначения = "строка" Тогда
			ОписаниеТипов = ОписаниеТиповСтрока;
		Иначе
			ОписаниеТипов = новый ОписаниеТипов(Колонка.ТипЗначения);
		КонецЕсли;
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, ОписаниеТипов, ИмяТаблицы, Колонка.Имя, Ложь);
		МассивДобавляемыхЭлементов.Добавить(НовыйРеквизит);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхЭлементов,МассивУдаляемыхЭлементов);
	
	
	Для каждого Колонка из МассивСтруктурКолонок Цикл                       
		НовыйЭлемент = Элементы.Вставить(Элементы[ИмяТаблицы].Имя+Колонка.Имя, Тип("Полеформы"), Элементы[ИмяТаблицы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Видимость = Истина;
		НовыйЭлемент.Доступность = Истина;
		НовыйЭлемент.ТолькоПросмотр = Ложь;   
		НовыйЭлемент.Высота = 0;
		НовыйЭлемент.Ширина = Колонка.Ширина;                
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.Подсказка = Колонка.Имя;
		НовыйЭлемент.ПутьКДанным = ИмяТаблицы+"."+Колонка.Имя;    
	КонецЦикла;
	
	
КонецПроцедуры         

&НаКлиенте
Процедура ВыполнитьПолучениеДанных(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИсточники.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Проверка и подключение com...Первая");
	КомБазаПерваяКонфигурация = ПолучитьКомПодключение(КомБазаПерваяКонфигурация,БазаДанныхПерваяКонфигурация);
	
	Если КомБазаПерваяКонфигурация=Неопределено Тогда
		Сообщить("Не удалось установить COM соединение с базой источником!");
		Возврат;
	КонецЕсли;

	
	Состояние("Проверка и подключение com...Вторая");
	КомБазаВтораяКонфигурация = ПолучитьКомПодключение(КомБазаВтораяКонфигурация,БазаДанныхВтораяКонфигурация);
	
	Если КомБазаВтораяКонфигурация=Неопределено Тогда
		Сообщить("Не удалось установить COM соединение с базой источником!");
		Возврат;
	КонецЕсли;   
	
	
	// выполняем запрос из первой базы
	ВыполнитьЗапросCom(КомБазаПерваяКонфигурация,"ТаблицаИсточник1",ТекстЗапросаИсточник1);
	
	// выполняем запрос из второй базы
	ВыполнитьЗапросCom(КомБазаВтораяКонфигурация,"ТаблицаИсточник2",ТекстЗапросаИсточник2);
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЗапросCom(КомБаза,Знач ИмяТаблицы,Знач ТекстЗапроса)
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;                            
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"__",".");
	
	// 1 выполняем запрос    
	ЗапросCOM = КомБаза.NewObject("Запрос");
	ЗапросCOM.Текст = ТекстЗапроса;
	
	Попытка	
		ТаблицаДанных = ЗапросCOM.Выполнить().Выгрузить();
	Исключение                   		
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;                                      
	
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КвЧисла = Новый КвалификаторыЧисла(15, 3);
	КвСтроки = Новый КвалификаторыСтроки(36,ДопустимаяДлина.Переменная);

	ДопустимыеТипы = Новый ОписаниеТипов(Массив,КвЧисла,КвСтроки);
	
	
	МассивКолонок = Новый Массив;     
	ИменаКолонокСсылочныхТипов = Новый Массив;

	// 2 выполняем создание таблицы значений
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл  
		Структура = ПолучитьСтруктуруТипов(КомБаза,Колонка.ТипЗначения);   
		ТипыСтрокой = "";              
		МассивДоступныхТипов = Новый Массив;
		Если НЕ Структура.СоответствиеТипов.Получить("строка")=Неопределено 
			или НЕ Структура.СоответствиеТипов.Получить("string")=Неопределено Тогда
			МассивДоступныхТипов.Добавить("строка");
		КонецЕсли;
		Если НЕ Структура.СоответствиеТипов.Получить("число")=Неопределено 
			или НЕ Структура.СоответствиеТипов.Получить("number")=Неопределено 
			или НЕ Структура.СоответствиеТипов.Получить("decimal")=Неопределено Тогда
			МассивДоступныхТипов.Добавить("число");
		КонецЕсли;
		Если НЕ Структура.СоответствиеТипов.Получить("булево")=Неопределено 
			или НЕ Структура.СоответствиеТипов.Получить("boolean")=Неопределено Тогда
			МассивДоступныхТипов.Добавить("булево");
		КонецЕсли;
		Если НЕ Структура.СоответствиеТипов.Получить("дата")=Неопределено 
			или НЕ Структура.СоответствиеТипов.Получить("date")=Неопределено Тогда
			МассивДоступныхТипов.Добавить("дата");
		КонецЕсли;
		Если МассивДоступныхТипов.Количество()=0 Тогда
			МассивДоступныхТипов.Добавить("строка");
		КонецЕсли;
		ТипыСтрокой = СтрСоединить(МассивДоступныхТипов,",");
		
		МассивКолонок.Добавить(Новый Структура("Имя,ТипЗначения,Заголовок,Ширина",Колонка.Имя,ТипыСтрокой,Колонка.Заголовок,10));
		
		Если Структура.ЕстьСсылки=Истина Тогда
			ИменаКолонокСсылочныхТипов.Добавить(Колонка.Имя);
		КонецЕсли;
		
	КонецЦикла;      
	
	
	СоздатьДинамическиеКолонкиТаблицы(ИмяТаблицы,МассивКолонок,ВспомогательныеДанные[ИмяТаблицы]);
	
	// сохраним старые колонки
	ВспомогательныеДанные[ИмяТаблицы] = МассивКолонок;
	
	ЭтаФорма[ИмяТаблицы].Очистить();
	
	// 3 выполняем заполнение таблицы
	Для каждого стр из ТаблицаДанных Цикл
		стр_н = ЭтаФорма[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
		
		//ссылки
		Для каждого ИмяКолонки из ИменаКолонокСсылочныхТипов Цикл
			Если ТипЗнч(стр_н[ИмяКолонки])=Тип("Строка") Тогда
				стр_н[ИмяКолонки] = КомБаза.XMLСтрока(стр[ИмяКолонки]); 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры    


&НаКлиенте
Функция ПолучитьСтруктуруТипов(КомБаза, ТипЗначения)
	
	// типы
	МассивТипов = Новый Массив;                       
	ЕстьСсылки = Ложь;
	СоответствиеТипов = Новый Соответствие;
	Попытка           
		ш=0;
		Для каждого стр из  ТипЗначения.Типы() Цикл      
			ИмяТипа = НРег(КомБаза.XMLТип(стр).ИмяТипа);
			МассивТипов.Добавить(ИмяТипа);
			СоответствиеТипов.Вставить(ИмяТипа,ИмяТипа);
			Если Найти(ИмяТипа,"ref.") Тогда
				ЕстьСсылки=Истина;
			КонецЕсли;
			ш=ш+1;
		КонецЦикла;
	Исключение
	КонецПопытки;

	Возврат Новый Структура("МассивТипов,СоответствиеТипов,ЕстьСсылки",МассивТипов,СоответствиеТипов,ЕстьСсылки);
	
КонецФункции

&НаКлиенте
Процедура БазаДанныхПерваяКонфигурацияПриИзменении(Элемент)
	КомБазаПерваяКонфигурация = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура БазаДанныхВтораяКонфигурацияПриИзменении(Элемент)
	КомБазаВтораяКонфигурация = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	ТаблицаВыборка.Очистить();
	
	ВыполнитьЗапросСервер(ТекстЗапросаВыборка,ВспомогательныеДанные);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросСервер(ТекстЗапроса,ВспомогательныеДанные)
	
	
	Запрос = Новый Запрос;    
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Источник1",ТаблицаИсточник1.Выгрузить());
	Запрос.УстановитьПараметр("Источник2",ТаблицаИсточник2.Выгрузить());
	
	Результат = Запрос.Выполнить();

	МассивКолонок = Новый Массив;	
	Для каждого Колонка ИЗ Результат.Колонки Цикл
		ТипыСтрокой = СтрСоединить(Колонка.ТипЗначения.Типы(),",");
		МассивКолонок.Добавить(Новый Структура("Имя,ТипЗначения,Заголовок,Ширина",Колонка.Имя,ТипыСтрокой,Колонка.Имя,10));
	КонецЦикла;	
	
	СоздатьДинамическиеКолонкиТаблицы("ТаблицаВыборка",МассивКолонок,ВспомогательныеДанные.ТаблицаВыборка);	
	
	ВспомогательныеДанные.ТаблицаВыборка = МассивКолонок;
	
	Выборка = Результат.Выбрать(); 
		
	Пока Выборка.Следующий() Цикл
		
		стр_н = ТаблицаВыборка.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НеПоказыватьТаблицыИсточникиНаФормеПриИзменении(Элемент)
	Элементы.СтраницаДанныеИсточник1.Видимость = НЕ НеПоказыватьТаблицыИсточникиНаФорме;
	Элементы.СтраницаДанныеИсточник2.Видимость = НЕ НеПоказыватьТаблицыИсточникиНаФорме;
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДеревоИсточников(Команда)
	СформироватьДерево();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьИзмененияТекстаЗапросаНаСервере(Источник,ТекстЗапроса)
	
	ТекстЗапроса = СокрЛП(ТекстЗапроса);
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Сообщить("Текст запроса пустой! Отказ.");
		Возврат;
	КонецЕсли;

	Попытка                        
		
		ИсточникОбъект = Источник.ПолучитьОбъект();
		
		Если НЕ ИсточникОбъект.ТекстЗапроса=ТекстЗапроса Тогда
			ИсточникОбъект.ТекстЗапроса=ТекстЗапроса;
			ИсточникОбъект.Записать();
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры       

&НаСервереБезКонтекста
Процедура СохранитьИзмененияПакетно(СтруктураПакета)
	
	Если НЕ ЗначениеЗаполнено(СтруктураПакета.Ссылка) Тогда
		Сообщить("Не указана ссылка! Отказ.");
		Возврат;
	КонецЕсли; 
	
	ЗаписыватьОсновнойИсточник = Ложь;
	
	
	Попытка                     
		
		Если СтруктураПакета.Ссылка.ЭтоГруппа=Истина Тогда           
			ИсточникОбъект = Справочники.ИсточникиДанных.СоздатьЭлемент();
			ИсточникОбъект.Родитель = СтруктураПакета.Ссылка;
			ИсточникОбъект.Наименование = ""+СтруктураПакета.Метаданные+" сравнение данных"; 
			ИсточникОбъект.УстановитьСсылкуНового(Справочники.ИсточникиДанных.ПолучитьСсылку(Новый UUID()));
		Иначе		
			ИсточникОбъект = СтруктураПакета.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		// обновляем текст запроса
		Если НЕ ИсточникОбъект.ТекстЗапроса=СтруктураПакета.ТекстЗапроса Тогда
			ИсточникОбъект.ТекстЗапроса=СтруктураПакета.ТекстЗапроса;
			ЗаписыватьОсновнойИсточник = Истина;
		КонецЕсли;    
		
		// обновляем требуемые источники
		Если ИсточникОбъект.ТребуемыеИсточникиДанных.Количество()=0 Тогда
			// создадим запросы     
			Если СтруктураПакета.Источник1.ТекстЗапроса = СтруктураПакета.Источник2.ТекстЗапроса 
				И ЗначениеЗаполнено(СтруктураПакета.Источник1.ТекстЗапроса) Тогда
				
				НовыйИсточникПодчиненный = СоздатьНовыйИсточникПодчиненный(ИсточникОбъект, СтруктураПакета.Источник1);
				
				стр_н = ИсточникОбъект.ТребуемыеИсточникиДанных.Добавить();
				стр_н.ИсточникДанных = НовыйИсточникПодчиненный.Ссылка;
				стр_н.ИмяВременнойТаблицы = "Источник1";
				стр_н.БазаДанных = СтруктураПакета.Источник1.БазаДанных;
				
				стр_н = ИсточникОбъект.ТребуемыеИсточникиДанных.Добавить();
				стр_н.ИсточникДанных = НовыйИсточникПодчиненный.Ссылка;
				стр_н.ИмяВременнойТаблицы = "Источник2";
				стр_н.БазаДанных = СтруктураПакета.Источник2.БазаДанных;
				
				ЗаписыватьОсновнойИсточник = Истина;
				
			ИначеЕсли ЗначениеЗаполнено(СтруктураПакета.Источник1.ТекстЗапроса) Тогда
				
				НовыйИсточникПодчиненный = СоздатьНовыйИсточникПодчиненный(ИсточникОбъект, СтруктураПакета.Источник1);
				
				стр_н = ИсточникОбъект.ТребуемыеИсточникиДанных.Добавить();
				стр_н.ИсточникДанных = НовыйИсточникПодчиненный.Ссылка;
				стр_н.ИмяВременнойТаблицы = "Источник1";
				стр_н.БазаДанных = СтруктураПакета.Источник1.БазаДанных;

				НовыйИсточникПодчиненный = СоздатьНовыйИсточникПодчиненный(ИсточникОбъект, СтруктураПакета.Источник2);
				
				стр_н = ИсточникОбъект.ТребуемыеИсточникиДанных.Добавить();
				стр_н.ИсточникДанных = НовыйИсточникПодчиненный.Ссылка;
				стр_н.ИмяВременнойТаблицы = "Источник2";
				стр_н.БазаДанных = СтруктураПакета.Источник2.БазаДанных;				
				
			КонецЕсли;
		ИначеЕсли  ИсточникОбъект.ТребуемыеИсточникиДанных.Количество()=1 Тогда                                                                         
			
			СохранитьИзмененияТекстаЗапросаНаСервере(ИсточникОбъект.ТребуемыеИсточникиДанных[0].ИсточникДанных,СтруктураПакета.Источник1.ТекстЗапроса);
			
		ИначеЕсли  ИсточникОбъект.ТребуемыеИсточникиДанных.Количество()=2 Тогда
			
			СохранитьИзмененияТекстаЗапросаНаСервере(ИсточникОбъект.ТребуемыеИсточникиДанных[0].ИсточникДанных,СтруктураПакета.Источник1.ТекстЗапроса);
			СохранитьИзмененияТекстаЗапросаНаСервере(ИсточникОбъект.ТребуемыеИсточникиДанных[1].ИсточникДанных,СтруктураПакета.Источник2.ТекстЗапроса);
			
		КонецЕсли;
		
		
		Если ЗаписыватьОсновнойИсточник=Истина Тогда			
			ИсточникОбъект.Записать();                  
		КонецЕсли;
		
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНовыйИсточникПодчиненный(Знач ИсточникОбъект, Знач СтруктураИсточник)
	
	Перем НовыйИсточникПодчиненный;
	
	НовыйИсточникПодчиненный = Справочники.ИсточникиДанных.СоздатьЭлемент();
	НовыйИсточникПодчиненный.Родитель = ИсточникОбъект.Родитель;
	НовыйИсточникПодчиненный.ТребуетсяCOM = Истина;
	НовыйИсточникПодчиненный.ТекстЗапроса = СтруктураИсточник.ТекстЗапроса;
	НовыйИсточникПодчиненный.Наименование = СтруктураИсточник.Метаданные;
	НовыйИсточникПодчиненный.БазаДанных = СтруктураИсточник.БазаДанных;
	НовыйИсточникПодчиненный.Записать();
	Возврат НовыйИсточникПодчиненный;

КонецФункции	

&НаКлиенте
Процедура СохранитьИзмененияТекстаЗапроса(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИсточники.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	Структура = Новый Структура;  
	Структура.Вставить("Метаданные",Метаданные);
	Структура.Вставить("Источник1",Новый Структура("ТекстЗапроса,БазаДанных,Метаданные",ТекстЗапросаИсточник1,БазаДанныхПерваяКонфигурация,Строка(Метаданные)+" ист. 1"));
	Структура.Вставить("Источник2",Новый Структура("ТекстЗапроса,БазаДанных,Метаданные",ТекстЗапросаИсточник2,БазаДанныхВтораяКонфигурация,Строка(Метаданные)+" ист. 1"));
	Структура.Вставить("Ссылка",ВыбранныйИсточник);
	Структура.Вставить("ТекстЗапроса",ТекстЗапросаВыборка);
	СохранитьИзмененияПакетно(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюСборку(Команда)
	СоздатьНовуюСборкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюСборкуНаСервере()
	НоваяСборкаОбъект = Справочники.Сборки.СоздатьЭлемент();
	НоваяСборкаОбъект.Записать();
	Сборка = НоваяСборкаОбъект.Ссылка;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеРасчета(Команда) 
	
	ТекущиеДанные = Элементы.ДеревоИсточники.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьДанныеРасчетаНаСервере(Сборка, ТекущиеДанные.Ссылка);    
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРасчетаНаСервере(КлючСборки,КлючАналитики)
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Выборка",ТаблицаВыборка.Выгрузить());
	СтруктураДанных.Вставить("Источник1",ТаблицаИсточник1.Выгрузить());
	СтруктураДанных.Вставить("Источник2",ТаблицаИсточник2.Выгрузить());
	Значение = Новый ХранилищеЗначения(СтруктураДанных);
	
	НаборЗаписей = РегистрыСведений.ДанныеПоСборке.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сборка.Установить(КлючСборки);
	НаборЗаписей.Отбор.КлючАналитики.Установить(КлючАналитики);
	
	Запись = НаборЗаписей.Добавить();
	Запись.КлючАналитики = КлючАналитики;
	Запись.Сборка = КлючСборки;
	Запись.ДатаСобытия = ТекущаяДата();
	Запись.ХранилищеЗначения = Значение;	
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеРасчета(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИсточники.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеРасчетаНаСервере(Сборка, ТекущиеДанные.Ссылка, ВспомогательныеДанные);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеРасчетаНаСервере(КлючСборки,КлючАналитики, ВспомогательныеДанные)

	НаборЗаписей = РегистрыСведений.ДанныеПоСборке.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сборка.Установить(КлючСборки);
	НаборЗаписей.Отбор.КлючАналитики.Установить(КлючАналитики);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Значение = НаборЗаписей[0].ХранилищеЗначения;
	
	Если ТипЗнч(Значение)=Тип("ХранилищеЗначения") Тогда
		СтруктураДанных = Значение.Получить();
		ЗагрузитьДанныеВТаблицу(СтруктураДанных,"ТаблицаВыборка","Выборка",ВспомогательныеДанные);
		ЗагрузитьДанныеВТаблицу(СтруктураДанных,"ТаблицаИсточник1","Источник1",ВспомогательныеДанные);
		ЗагрузитьДанныеВТаблицу(СтруктураДанных,"ТаблицаИсточник2","Источник2",ВспомогательныеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВТаблицу(Знач СтруктураДанных,ИмяТаблицы,ИмяИсточника,ВспомогательныеДанные)
	
	Перем Выгрузка, Массив;
	
	Если СтруктураДанных.Свойство(ИмяИсточника) Тогда  
		Если ЭтаФорма[ИмяТаблицы].Количество()=0 Тогда
			Таблица = ЭтаФорма[ИмяТаблицы].Выгрузить(); 
		Иначе                          
			Массив = Новый Массив;
			Массив.Добавить(ЭтаФорма[ИмяТаблицы][0]);
			Таблица = ЭтаФорма[ИмяТаблицы].Выгрузить(Массив); 
		КонецЕсли;                      
		ВспомогательныеДанные[ИмяТаблицы]=Новый Массив;
		Для каждого Колонка из Таблица.Колонки Цикл
			ВспомогательныеДанные[ИмяТаблицы].Добавить(Новый Структура("Имя",Колонка.Имя));
		КонецЦикла;
		СоздатьДинамическиеКолонкиТаблицы(ИмяТаблицы,СтруктураДанных[ИмяИсточника].Колонки,Таблица.Колонки);
		ЭтаФорма[ИмяТаблицы].Загрузить(СтруктураДанных[ИмяИсточника]);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьШаблоныЗапросов(Команда)

	Зафиксировать = Истина;
	
	// очистим
	ТекстЗапросаИсточник1 = "";
	ТекстЗапросаИсточник2 = "";
	ТекстЗапросаВыборка = "";
	
	ПолноеИмя = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Метаданные,"ПолноеИмя");
	
	Состояние("Проверка и подключение com...Первая");
	КомБазаПерваяКонфигурация = ПолучитьКомПодключение(КомБазаПерваяКонфигурация,БазаДанныхПерваяКонфигурация);
	
	Если КомБазаПерваяКонфигурация=Неопределено Тогда
		Сообщить("Не удалось установить COM соединение с базой источником!");
		Возврат;
	КонецЕсли;
	
	Состояние("Проверка и подключение com...Вторая");
	КомБазаВтораяКонфигурация = ПолучитьКомПодключение(КомБазаВтораяКонфигурация,БазаДанныхВтораяКонфигурация);
	
	Если КомБазаВтораяКонфигурация=Неопределено Тогда
		Сообщить("Не удалось установить COM соединение с базой источником!");
		Возврат;
	КонецЕсли;          
	
	Если ТипЗапроса="РегистрыНакопленияОСтатки" Тогда
		
		// генерим  по остаткам           
		СтруктураЗапросаИсточник1 = ПолучитьОписаниеЗапроса(КомБазаПерваяКонфигурация,ПолноеИмя);
		СтруктураЗапросаИсточник2 = ПолучитьОписаниеЗапроса(КомБазаВтораяКонфигурация,ПолноеИмя);
		
		ТекстЗапросаИсточник1 = СоздатьОписаниеЗапросаИсточникаВиртуальнаяТаблицаОстатки(СтруктураЗапросаИсточник1);
		ТекстЗапросаИсточник2 = СоздатьОписаниеЗапросаИсточникаВиртуальнаяТаблицаОстатки(СтруктураЗапросаИсточник2);
		ТекстЗапросаВыборка = СоздатьОписаниеЗапросаСравненияДанныхИзИсточников(СтруктураЗапросаИсточник1,СтруктураЗапросаИсточник2);
		
	ИначеЕсли ТипЗапроса="СсылочныйТип" Тогда  
		
		// генерим по ссылкам
		СтруктураЗапросаИсточник1 = ПолучитьОписаниеЗапроса(КомБазаПерваяКонфигурация,ПолноеИмя);
		СтруктураЗапросаИсточник2 = ПолучитьОписаниеЗапроса(КомБазаВтораяКонфигурация,ПолноеИмя);
		
		ТекстЗапросаИсточник1 = СоздатьОписаниеЗапросаСсылочныйТип(СтруктураЗапросаИсточник1);
		ТекстЗапросаИсточник2 = СоздатьОписаниеЗапросаСсылочныйТип(СтруктураЗапросаИсточник2);
		ТекстЗапросаВыборка = СоздатьОписаниеЗапросаСравненияДанныхСсылочныйТипИзИсточников(СтруктураЗапросаИсточник1,СтруктураЗапросаИсточник2);
		
	КонецЕсли;
	
КонецПроцедуры  

Процедура Тест()
	
	
КонецПроцедуры 


&НаКлиенте
Функция СоздатьОписаниеЗапросаСсылочныйТип(СтруктураРеквизитов)
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 100000"+Символы.ПС;

	МассивПолей = Новый Массив;
	МассивПолей.Добавить("	ПРЕДСТАВЛЕНИЕ(Таб.Ссылка) КАК СсылкаСтр");	
	
	Для каждого Поле ИЗ СтруктураРеквизитов.СтандартныеРеквизиты Цикл
		МассивПолей.Добавить("	Таб."+Поле+" КАК "+Поле);	
	КонецЦикла;                               
	
	ТекстЗапроса = ТекстЗапроса+СтрСоединить(МассивПолей,","+Символы.ПС);
	
	ТекстЗапроса = ТекстЗапроса+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" ИЗ "+Символы.ПС;

	ТекстЗапроса = ТекстЗапроса+"	"+СтруктураРеквизитов.Тип+"__"+СтруктураРеквизитов.Имя+" КАК Таб "+Символы.ПС;
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Функция СоздатьОписаниеЗапросаИсточникаВиртуальнаяТаблицаОстатки(СтруктураРеквизитов)
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 100000"+Символы.ПС;
	
	МассивПолей = Новый Массив;
	Для каждого Поле ИЗ СтруктураРеквизитов.Измерения Цикл
		МассивПолей.Добавить("	РнОст."+Поле+" КАК "+Поле);	
		МассивПолей.Добавить("	ПРЕДСТАВЛЕНИЕ(РнОст."+Поле+") КАК "+Поле+"Стр");	
	КонецЦикла;                               
	
	Для каждого Поле ИЗ СтруктураРеквизитов.Ресурсы Цикл
		МассивПолей.Добавить("	РнОст."+Поле+"Остаток КАК "+Поле);	
	КонецЦикла;                               
	
	ТекстЗапроса = ТекстЗапроса+СтрСоединить(МассивПолей,","+Символы.ПС);
	
	ТекстЗапроса = ТекстЗапроса+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" ИЗ "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+"	"+СтруктураРеквизитов.Тип+"__"+СтруктураРеквизитов.Имя+"__Остатки КАК РнОст "+Символы.ПС;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Функция СоздатьОписаниеЗапросаВременнойТаблицыИсточника(СтруктураРеквизитов,ИмяТзИсточника,ИмяВт)
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = "ВЫБРАТЬ "+Символы.ПС;
	
	МассивПолей = Новый Массив;
	Для каждого Поле ИЗ СтруктураРеквизитов.Измерения Цикл
		МассивПолей.Добавить("	ТзРнОст."+Поле+" КАК "+Поле);	
		МассивПолей.Добавить("	ТзРнОст."+Поле+"Стр"+" КАК "+Поле+"Стр");	
	КонецЦикла;                               
	
	Для каждого Поле ИЗ СтруктураРеквизитов.Ресурсы Цикл
		МассивПолей.Добавить("	ТзРнОст."+Поле+" КАК "+Поле);	
	КонецЦикла;                               
	
	ТекстЗапроса = ТекстЗапроса+СтрСоединить(МассивПолей,","+Символы.ПС);
	
	ТекстЗапроса = ТекстЗапроса+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" ПОМЕСТИТЬ "+ИмяВт+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" ИЗ "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+"	&"+ИмяТзИсточника+" КАК ТзРнОст "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+";"+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+"/////////////////////////////////////////////////////////"+Символы.ПС;	
	
	Возврат ТекстЗапроса;
	
КонецФункции


&НаКлиенте
Функция СоздатьОписаниеЗапросаВременнойТаблицыСсылочногоИсточника(СтруктураРеквизитов,ИмяТзИсточника,ИмяВт)
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = "ВЫБРАТЬ "+Символы.ПС;
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("	Таб.Ссылка КАК Ссылка");	
	МассивПолей.Добавить("	Таб.СсылкаСтр КАК СсылкаСтр");	
	
	ТекстЗапроса = ТекстЗапроса+СтрСоединить(МассивПолей,","+Символы.ПС);
	
	ТекстЗапроса = ТекстЗапроса+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" ПОМЕСТИТЬ "+ИмяВт+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" ИЗ "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+"	&"+ИмяТзИсточника+" КАК Таб "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+";"+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+"/////////////////////////////////////////////////////////"+Символы.ПС;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Функция СоздатьОписаниеЗапросаСравненияДанныхСсылочныйТипИзИсточников(СтруктураРеквизитовИсточник1,СтруктураРеквизитовИсточник2)
	
	ТекстЗапроса = "";
	ИмяВтИсточник1 = "ВтИсточник1";
	ИмяВтИсточник2 = "ВтИсточник2";
	
	// первая ВТ
	ТекстЗапроса = ТекстЗапроса+СоздатьОписаниеЗапросаВременнойТаблицыСсылочногоИсточника(СтруктураРеквизитовИсточник1,"Источник1",ИмяВтИсточник1);
	// вторая ВТ
	ТекстЗапроса = ТекстЗапроса+СоздатьОписаниеЗапросаВременнойТаблицыСсылочногоИсточника(СтруктураРеквизитовИсточник2,"Источник2",ИмяВтИсточник2);
	
	// таблица сравнения
	ТекстЗапроса = ТекстЗапроса+"ВЫБРАТЬ "+Символы.ПС;    
	
	ТекстЗапроса = ТекстЗапроса+"	ВЫБОР
	|		КОГДА "+ИмяВтИсточник1+".Ссылка ЕСТЬ NULL
	|			ТОГДА ""Нет в 1 источнике""
	|		КОГДА "+ИмяВтИсточник2+".Ссылка ЕСТЬ NULL
	|			ТОГДА ""Нет в 2 источнике""
	|		ИНАЧЕ ""Разница""
	|	КОНЕЦ КАК Ситуация,"+Символы.ПС;
	
	ТекстЗапроса = ТекстЗапроса+"	"+ИмяВтИсточник1+".СсылкаСтр КАК СсылкаСтр1,"+Символы.ПС;     
	ТекстЗапроса = ТекстЗапроса+"	"+ИмяВтИсточник2+".СсылкаСтр КАК СсылкаСтр2"+Символы.ПС;     
	
	ТекстЗапроса = ТекстЗапроса+" ИЗ "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" "+ИмяВтИсточник1+" КАК "+ИмяВтИсточник1+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+"  ПОЛНОЕ СОЕДИНЕНИЕ "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" "+ИмяВтИсточник2+" КАК "+ИмяВтИсточник2+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" ПО "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" "+ИмяВтИсточник1+".Ссылка = "+ИмяВтИсточник2+".Ссылка "+Символы.ПС;
	
	ТекстЗапроса = ТекстЗапроса+" ГДЕ "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+"	"+ИмяВтИсточник1+".Ссылка ЕСТЬ NULL ИЛИ "+ИмяВтИсточник2+".Ссылка ЕСТЬ NULL"+Символы.ПС;
	
	ТекстЗапроса = ТекстЗапроса+Символы.ПС;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Функция СоздатьОписаниеЗапросаСравненияДанныхИзИсточников(СтруктураРеквизитовИсточник1,СтруктураРеквизитовИсточник2)
	
	ТекстЗапроса = "";
	ИмяВтИсточник1 = "ВтИсточник1";
	ИмяВтИсточник2 = "ВтИсточник2";
	
	// первая ВТ
	ТекстЗапроса = ТекстЗапроса+СоздатьОписаниеЗапросаВременнойТаблицыИсточника(СтруктураРеквизитовИсточник1,"Источник1",ИмяВтИсточник1);
	// вторая ВТ
	ТекстЗапроса = ТекстЗапроса+СоздатьОписаниеЗапросаВременнойТаблицыИсточника(СтруктураРеквизитовИсточник2,"Источник2",ИмяВтИсточник2);

	МассивПолей = Новый Массив;
	
	// таблица сравнения
	ТекстЗапроса = ТекстЗапроса+"ВЫБРАТЬ "+Символы.ПС;    
	
	ИмяПоля1 = СтруктураРеквизитовИсточник1.Измерения[0]; 
	ИмяПоля2 = СтруктураРеквизитовИсточник2.Измерения[0]; 
	
	МассивПолей.Добавить("ВЫБОР
	|	КОГДА "+ИмяВтИсточник1+"."+ИмяПоля1+" ЕСТЬ NULL
	|		ТОГДА ""Нет в 1 источнике""
	|	КОГДА "+ИмяВтИсточник2+"."+ИмяПоля1+" ЕСТЬ NULL
	|		ТОГДА ""Нет в 2 источнике""
	|	ИНАЧЕ ""Разница""
	|КОНЕЦ КАК Ситуация"); 
	
	// поля по 1 таблице
	Для каждого Поле ИЗ СтруктураРеквизитовИсточник1.Измерения Цикл
		МассивПолей.Добавить("	ЕстьNULL("+ИмяВтИсточник1+"."+Поле+"Стр,"+ИмяВтИсточник2+"."+Поле+"Стр) КАК "+Поле+"Стр");	
	КонецЦикла;                               
	
	// из 1 ВТ
	Для каждого Поле ИЗ СтруктураРеквизитовИсточник1.Ресурсы Цикл
		МассивПолей.Добавить("	ЕстьNULL("+ИмяВтИсточник1+"."+Поле+",0) КАК "+Поле+"1");	
	КонецЦикла;                               
	
	// из 2 ВТ
	Для каждого Поле ИЗ СтруктураРеквизитовИсточник2.Ресурсы Цикл
		МассивПолей.Добавить("	ЕстьNULL("+ИмяВтИсточник2+"."+Поле+",0) КАК "+Поле+"2");	
	КонецЦикла;                               
	
	ТекстЗапроса = ТекстЗапроса+СтрСоединить(МассивПолей,","+Символы.ПС);	
	ТекстЗапроса = ТекстЗапроса+Символы.ПС;
	
	ТекстЗапроса = ТекстЗапроса+" ИЗ "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" "+ИмяВтИсточник1+" КАК "+ИмяВтИсточник1+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+"  ПОЛНОЕ СОЕДИНЕНИЕ "+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" "+ИмяВтИсточник2+" КАК "+ИмяВтИсточник2+Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+" ПО "+Символы.ПС;
	
	МассивПолей = Новый Массив;
	// из 1 ВТ
	Для каждого Поле ИЗ СтруктураРеквизитовИсточник1.Измерения Цикл
		МассивПолей.Добавить("	"+ИмяВтИсточник1+"."+Поле+" = "+ИмяВтИсточник2+"."+Поле+" ");	
	КонецЦикла;                               
	
	ТекстЗапроса = ТекстЗапроса+СтрСоединить(МассивПолей," И "+Символы.ПС);	
	ТекстЗапроса = ТекстЗапроса+Символы.ПС;
	
	ТекстЗапроса = ТекстЗапроса+" ГДЕ "+Символы.ПС;
	
	МассивПолей = Новый Массив;
	// из 1 ВТ
	Для каждого Поле ИЗ СтруктураРеквизитовИсточник1.Ресурсы Цикл
		МассивПолей.Добавить("	ЕстьNULL("+ИмяВтИсточник1+"."+Поле+",0) <> "+"	ЕстьNULL("+ИмяВтИсточник2+"."+Поле+",0)");	
	КонецЦикла;                               
	
	ТекстЗапроса = ТекстЗапроса+СтрСоединить(МассивПолей," ИЛИ "+Символы.ПС);	
	ТекстЗапроса = ТекстЗапроса+Символы.ПС;
	
	
	Возврат ТекстЗапроса;
	
КонецФункции





&НаКлиенте
Функция ПолучитьОписаниеЗапроса(БазаДанных, ПолноеИмя)

	МассивЧастей = СтрРазделить(ПолноеИмя,".",Ложь);

	СтруктураЗапроса = Новый Структура;             
	СтруктураЗапроса.Вставить("Измерения",Новый Массив);
	СтруктураЗапроса.Вставить("Ресурсы",Новый Массив);
	СтруктураЗапроса.Вставить("Реквизиты",Новый Массив);
	СтруктураЗапроса.Вставить("СтандартныеРеквизиты",Новый Массив);
	СтруктураЗапроса.Вставить("ПолноеИмя",ПолноеИмя);
	СтруктураЗапроса.Вставить("Имя",МассивЧастей[1]);
	СтруктураЗапроса.Вставить("Тип",МассивЧастей[0]);
	ТипМетаданных = "";   
	
	Если Найти(НРег(ПолноеИмя),"регистр")
		И Найти(НРег(ПолноеИмя),"накопления") Тогда
		ТипМетаданных = "РегистрыНакопления";
	ИначеЕсли Найти(НРег(ПолноеИмя),"документ") Тогда                          
		ТипМетаданных = "Документы";
	ИначеЕсли Найти(НРег(ПолноеИмя),"справочник") Тогда                          
		ТипМетаданных = "Справочники";
	ИначеЕсли Найти(НРег(ПолноеИмя),"план") 
		И Найти(НРег(ПолноеИмя),"характеристик") Тогда
		ТипМетаданных = "ПланыВидовХарактеристик";
	КонецЕсли;
		
	МетаданныеОбъектаCOM = БазаДанных.Метаданные[ТипМетаданных][МассивЧастей[1]];
	
	Попытка
		Для каждого Поле из МетаданныеОбъектаCOM.Измерения Цикл
			СтруктураЗапроса.Измерения.Добавить(Поле.Имя);
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Попытка
		Для каждого Поле из МетаданныеОбъектаCOM.Ресурсы Цикл
			СтруктураЗапроса.Ресурсы.Добавить(Поле.Имя);
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Попытка
		Для каждого Поле из МетаданныеОбъектаCOM.СтандартныеРеквизиты Цикл
			СтруктураЗапроса.СтандартныеРеквизиты.Добавить(Поле.Имя);
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Попытка
		Для каждого Поле из МетаданныеОбъектаCOM.Реквизиты Цикл
			СтруктураЗапроса.Реквизиты.Добавить(Поле.Имя);
		КонецЦикла;
	Исключение
	КонецПопытки;
		
	
	Возврат СтруктураЗапроса;
	
КонецФункции


&НаКлиенте
Процедура ОбработатьИзменениеСтроки()
	
	Если Зафиксировать=Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоИсточники.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;               
	
	ВыбранныйИсточник = ТекущиеДанные.Ссылка;
	
	ЭтоГруппа = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Ссылка,"ЭтоГруппа");
	
	Если ЭтоГруппа=Истина Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Ссылка,"ТекстЗапроса");
	
	// если это начальный запрос тогда
	Если ТекущиеДанные.ТребуетсяCOM=Истина Тогда
		ТекстЗапросаИсточник1 = ТекстЗапроса;
		Элементы.ГруппаГенераторИсточник2.Видимость = Ложь;
		Элементы.ГруппаГенераторВыборка.Видимость = Ложь;
	Иначе
		Элементы.ГруппаГенераторИсточник2.Видимость = Истина;
		Элементы.ГруппаГенераторВыборка.Видимость = Истина;
		ТекстЗапросаВыборка = ТекстЗапроса;
		// И добавим подчиненные
		СтруктураДанных = ПолучитьПодчиненныеДанные(ТекущиеДанные.Ссылка);
		Источник1 = СтруктураДанных.Получить("Источник1");
		Если НЕ Источник1=Неопределено Тогда
			ТекстЗапросаИсточник1 = Источник1.ТекстЗапроса;
		КонецЕсли;                                        
		Источник2 = СтруктураДанных.Получить("Источник2");
		Если НЕ Источник2=Неопределено Тогда
			ТекстЗапросаИсточник2 = Источник2.ТекстЗапроса;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры                  


&НаСервереБезКонтекста
Функция ПолучитьПодчиненныеДанные(ИсточникСсылка)
	
	СтруктураДанных = Новый Соответствие();
	
	Запрос = Новый Запрос;                
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсточникиДанныхТребуемыеИсточникиДанных.ИсточникДанных КАК ИсточникДанных,
	|	ИсточникиДанныхТребуемыеИсточникиДанных.ИмяВременнойТаблицы КАК ИмяВременнойТаблицы,
	|	ИсточникиДанныхТребуемыеИсточникиДанных.БазаДанных КАК БазаДанных,
	|	ИсточникиДанных.ТребуетсяCOM КАК ТребуетсяCOM,
	|	ИсточникиДанных.ТекстЗапроса КАК ТекстЗапроса
	|ИЗ
	|	Справочник.ИсточникиДанных.ТребуемыеИсточникиДанных КАК ИсточникиДанныхТребуемыеИсточникиДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанных КАК ИсточникиДанных
	|		ПО ИсточникиДанныхТребуемыеИсточникиДанных.ИсточникДанных = ИсточникиДанных.Ссылка
	|ГДЕ
	|	ИсточникиДанныхТребуемыеИсточникиДанных.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиДанных.Ссылка КАК Ссылка,
	|	ИсточникиДанных.ТекстЗапроса КАК ТекстЗапроса,
	|	ИсточникиДанных.ТребуетсяCOM КАК ТребуетсяCOM
	|ИЗ
	|	Справочник.ИсточникиДанных КАК ИсточникиДанных
	|ГДЕ
	|	ИсточникиДанных.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ИсточникСсылка);
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатПакет[0].Выбрать();
	
	ш=0;
	
	Пока Выборка.Следующий() Цикл
		
		ш=ш+1;                               
		Ключ = "Источник"+XMLСтрока(ш);
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("ТекстЗапроса",Выборка.ТекстЗапроса);
		СтруктураЗапроса.Вставить("ТребуетсяCOM",Выборка.ТребуетсяCOM);
		СтруктураЗапроса.Вставить("БазаДанных",Выборка.БазаДанных);
		СтруктураЗапроса.Вставить("ИмяВременнойТаблицы",Выборка.ИмяВременнойТаблицы);
		СтруктураДанных.Вставить(Ключ,СтруктураЗапроса);		
		
	КонецЦикла;
	
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросЦеликом(Команда)
	ВыполнитьПолучениеДанных(Неопределено);
	ВыполнитьЗапрос(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВременныеТаблицы(Команда)
	ТаблицаИсточник1.Очистить();
	ТаблицаИсточник2.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыборку(Команда)
	ТаблицаВыборка.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсточник1(Команда)
	ТаблицаИсточник1.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсточник2(Команда)
	ТаблицаИсточник2.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИерархиюИточников()
	
	СоответствиеИерархии = Новый Соответствие;
	
	
	Запрос = Новый Запрос;     
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсточникиДанных.Ссылка КАК Ссылка,
	|	ИсточникиДанных.Наименование КАК Наименование,
	|	ИсточникиДанных.ТребуетсяCOM КАК ТребуетсяCOM,
	|	ИсточникиДанных.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА ИсточникиДанных.ЭтоГруппа
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	Справочник.ИсточникиДанных КАК ИсточникиДанных
	|ГДЕ
	|	НЕ ИсточникиДанных.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивДетей = СоответствиеИерархии.Получить(Выборка.Родитель);
		
		Если МассивДетей=Неопределено Тогда
			МассивДетей = Новый Массив;
		КонецЕсли;
		
		Струкутра = Новый Структура("Ссылка,Наименование,Родитель,ТребуетсяCOM,ИндексКартинки");
		ЗаполнитьЗначенияСвойств(Струкутра,Выборка);
		МассивДетей.Добавить(Струкутра);
		
		СоответствиеИерархии.Вставить(Выборка.Родитель,МассивДетей);
		
	КонецЦикла;
	
	Возврат СоответствиеИерархии;
	
КонецФункции

&НаКлиенте
Процедура СформироватьДерево()
	
	ДеревоИсточники.ПолучитьЭлементы().Очистить();
	
	СоответствиеИерархии = ПолучитьИерархиюИточников();
	ДобавитьДетей(ДеревоИсточники,ПредопределенноеЗначение("Справочник.ИсточникиДанных.ПустаяСсылка"),СоответствиеИерархии);
	
	Для каждого стр из ДеревоИсточники.ПолучитьЭлементы() Цикл
		Элементы.ДеревоИсточники.Развернуть(стр.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры   

&НаКлиенте
Процедура ДобавитьДетей(УзелРодитель,РодительСсылка,СоответствиеИерархии)
	
	МассивДетей = СоответствиеИерархии.Получить(РодительСсылка);
	
	Если МассивДетей=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеИсточника Из МассивДетей Цикл    
		
		УзелДерева = УзелРодитель.ПолучитьЭлементы().Добавить();	
		ЗаполнитьЗначенияСвойств(УзелДерева,ДанныеИсточника);    
		
		ДобавитьДетей(УзелДерева,ДанныеИсточника.Ссылка,СоответствиеИерархии);
		
	КонецЦикла;
	
КонецПроцедуры   

&НаКлиенте
Процедура ДеревоИсточникиПриАктивизацииСтроки(Элемент)
		ОбработатьИзменениеСтроки();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыЭлемент(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
