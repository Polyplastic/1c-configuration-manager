&НаКлиенте
Перем СобытияСформированы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВерсияОбработки="1.1.1.2";
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереОсновнойФормы(ЗагружатьОбщиеМодули=Ложь) Экспорт

	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	//ВерсияОбработки = ОбработкаОбъект.СведенияОВнешнейОбработке().Версия;
	
	АдресМакетаРедактораКода1С = ПоместитьВоВременноеХранилище(ПолучитьМакет("БиблиотекаРедактированияКода1С"), Новый УникальныйИдентификатор());
	
	Если ЗагружатьОбщиеМодули=Истина Тогда
		КоллекцияОбщихМодулей = ПолучитьКоллекциюОбщихМодулей();
		АдресОбщихМодулей = СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей);
		ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииОсновнойФормы() Экспорт
	
	Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
		ЭтотОбъект=ЭтаФорма;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	ОпределитьРазделительПути();
	
	
КонецПроцедуры



&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	
	Возврат ПолучитьОбщийМакет(ИмяМакета);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписатьОбщиеМодули(Коллекция, ФильтрГлобальный = Ложь)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		Если ОбъектМетаданных.Глобальный = ФильтрГлобальный Тогда
			ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоллекциюОбщихМодулей()
	
	КоллекцияОбщихМодулей = Новый Структура();
	КоллекцияОбщихМодулей.Вставить("Общие"     , ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Ложь));
	КоллекцияОбщихМодулей.Вставить("Глобальные", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Истина));
	
	Возврат КоллекцияОбщихМодулей;
	
КонецФункции

&НаСервере
Функция СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей)
	
	Файл = Новый ЗаписьJSON();
	Файл.УстановитьСтроку();
	Попытка
	   ЗаписатьJSON(Файл, КоллекцияОбщихМодулей.Общие);
	Исключение
	   ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	ЗначениеКоллекции = Файл.Закрыть();
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеКоллекции, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей)
	
	// Соответствие между именем общего неглобального модуля в нижнем регистре
	// и именем модуля, как оно задано в конфигураторе для правильной загрузки
	// текстов общих модулей
	ОбщиеМодули = Новый Соответствие();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Общие Цикл
		ОбщиеМодули.Вставить(НРег(Обход.Ключ), Обход.Ключ);
	КонецЦикла;
	
	ИменаОбщихМодулей = Новый ФиксированноеСоответствие(ОбщиеМодули);
	
	// Именя глобальных модулей для загрузки текстов
	Модули = Новый Массив();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Глобальные Цикл
		Модули.Добавить(Обход.Ключ);
	КонецЦикла;
	
	ГлобальныйМодули = Новый ФиксированныйМассив(Модули);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРазделительПути()
	
	РазделительПути = ПолучитьРазделительПути();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		
		//УстановитьПометкуТемы("СветлаяТема");
		//УправлениеВозможностьюРедактирования();
		//УправлениеЯзыкомПодсказок();
		ИзвлечьИсходники();
		
	Иначе
		
		#Если ВебКлиент Тогда

			Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
				ЭтотОбъект=ЭтаФорма;
			КонецЕсли;
			
			Если ДопПараметры = Неопределено Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтотОбъект);
				НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
			Иначе
				ПоказатьПредупреждение(, "К сожалению работа в веб-клиенте невозможна!");
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();

		Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
			ЭтотОбъект=ЭтаФорма;
		КонецЕсли;

		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПараметрыОповещения = Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль);
	Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
		ЭтотОбъект=ЭтаФорма;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
		ЭтотОбъект=ЭтаФорма;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект);
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакетаРедактораКода1С);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
		ЭтотОбъект=ЭтаФорма;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект);
	НачатьУдалениеФайлов(Оповещение, КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда	
		Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
			ЭтотОбъект=ЭтаФорма;
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
			ЭтотОбъект=ЭтаФорма;
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе		
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
		ЭтотОбъект=ЭтаФорма;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "bsl_console\";
	Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
		ЭтотОбъект=ЭтаФорма;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	#Если ВебКлиент Тогда
		HTML = "https://salexdv.github.io/bsl_console/src/index.html";
		ИсходникиЗагружены = Истина;
	#Иначе
		Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
			ЭтотОбъект=ЭтаФорма;
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда		
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		Если ПроверитьВерсиюПлатформыКонфигурации()=Ложь Тогда
			ЭтотОбъект=ЭтаФорма;
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция View(ФормаРедактора,ИмяРедактора)
	
	Если НЕ ФормаРедактора.Элементы[ИмяРедактора].Документ=Неопределено Тогда
		Возврат ФормаРедактора.Элементы[ИмяРедактора].Документ.defaultView;
	Иначе     
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьТекст(ФормаРедактора, ИмяРедактора, Текст, Позиция, УчитыватьОтступПервойСтроки) Экспорт
	
	Если РедакторИнициализирован(ИмяРедактора)=Ложь Тогда
		Возврат;
	КонецЕсли;
	View(ФормаРедактора,ИмяРедактора).setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекст(ФормаРедактора, ИмяРедактора, Текст, Позиция, УчитыватьОтступПервойСтроки) Экспорт
	
	Если РедакторИнициализирован(ИмяРедактора)=Ложь Тогда
		Возврат;
	КонецЕсли;                                                          
	
	View = View(ФормаРедактора,ИмяРедактора);
	Если НЕ View=Неопределено Тогда
		View(ФормаРедактора,ИмяРедактора).updateText(Текст, Ложь, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекст(ФормаРедактора, ИмяРедактора) Экспорт
	
	Возврат View(ФормаРедактора,ИмяРедактора).getText();
	
КонецФункции

&НаКлиенте
Процедура УстановитьРежимРедактора(ФормаРедактора,ИмяРедактора,Режим="bsl") Экспорт
	
	//// Переключение в режим языка запросов
	//setLanguageMode('bsl_query');
	//// Переключение в режим языка СКД
	//setLanguageMode('dcs_query');
	//// Переключение в режим XML
	//setLanguageMode('xml');
	//// Переключение в режим встроенного языка
	//setLanguageMode('bsl');
	
	Если НЕ РедакторИнициализирован(ИмяРедактора) Тогда
		Возврат;
	КонецЕсли;
	View = View(ФормаРедактора,ИмяРедактора);
	Если НЕ View=Неопределено Тогда
		View(ФормаРедактора,ИмяРедактора).setLanguageMode(Режим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодРедактора() Экспорт
	Возврат HTML;
КонецФункции	

&НаКлиенте
Процедура  УстановитьВидимостьКартыКода(ФормаРедактора,ИмяРедактора,ВидимостьКартыКода=Ложь) Экспорт
	
	View(ФормаРедактора,ИмяРедактора).minimap(ВидимостьКартыКода);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТемуРедактораКода(ФормаРедактора,ИмяРедактора,Тема="СветлаяТема") Экспорт

	Имена = Новый Соответствие();
	Имена.Вставить("СветлаяТема", "bsl-white");
	Имена.Вставить("ТемнаяТема", "bsl-dark");
	
	Если НЕ Имена.Получить(Тема)=Неопределено Тогда		
		View(ФормаРедактора,ИмяРедактора).monaco.editor.setTheme(Имена.Получить(Тема));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора(ФормаРедактора,ИмяРедактора) Экспорт
	
	Инфо = Новый СистемнаяИнформация();
	
	View(ФормаРедактора,ИмяРедактора).init(Инфо.ВерсияПриложения);
	View(ФормаРедактора,ИмяРедактора).setOption("autoResizeEditorLayout", Истина);
	View(ФормаРедактора,ИмяРедактора).setOption("renderQueryDelimiters", Истина);
	View(ФормаРедактора,ИмяРедактора).hideScrollX();
	View(ФормаРедактора,ИмяРедактора).hideScrollY();
	View(ФормаРедактора,ИмяРедактора).enableModificationEvent(Истина);
	
	//ПодключитьОбработчикОжидания("ОбнулитьМетаданные", 1, Истина);
	//ВосстановитьСохраненныеДанные();
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьДокументСформирован(Знач ИмяРедактора) Экспорт
	Если СобытияСформированы=Неопределено Тогда
		СобытияСформированы = Новый Соответствие;
	КонецЕсли;
	СобытияСформированы.Вставить(ИмяРедактора,Истина);
КонецПроцедуры

&НаКлиенте
Функция РедакторИнициализирован(Знач ИмяРедактора) Экспорт
	Если СобытияСформированы=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СобытияСформированы.Получить(ИмяРедактора)=Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура УстановитьРежимТолькоПросмотр(ФормаРедактора,ИмяРедактора,Знач ТолькоПросмотр=Истина) Экспорт
	
	Если НЕ РедакторИнициализирован(ИмяРедактора) Тогда
		Возврат;
	КонецЕсли;       
	
	View = View(ФормаРедактора,ИмяРедактора);
	Если НЕ View=Неопределено Тогда
		View(ФормаРедактора,ИмяРедактора).setReadOnly(ТолькоПросмотр);
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьФайлыБиблиотекиПроизвольной(ФормаРедактора,ИмяРедактора,КаталогМодулей) Экспорт
	Файлы = НайтиФайлы(КаталогМодулей, "Ext" + РазделительПути + "*.bsl", Истина);
	
	Для Каждого Файл Из Файлы Цикл
		ОбщийМодуль = ПолучитьМодульИзИсходников(Файл.ПолноеИмя);
		View(ФормаРедактора,ИмяРедактора).parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла)
	
	СмещениеИмениВПути = 3;
	
	Путь = xСтрРазделить(ПолноеИмяФайла, РазделительПути, Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПолноеИмяФайла);
	ТекстМодуля = Текст.ПолучитьТекст();
	
	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВерсиюПлатформыКонфигурации()
	
	ПоддержкаСтрРазделить = Неопределено;
	
	Если ПоддержкаСтрРазделить=Неопределено Тогда
		СистемнаяИнформация = новый СистемнаяИнформация;
		Если Найти(СистемнаяИнформация.ВерсияПриложения,"8.2.")
			ИЛИ Найти(СистемнаяИнформация.ВерсияПриложения,"8.3.2.") 
			ИЛИ Найти(СистемнаяИнформация.ВерсияПриложения,"8.3.3.")
			ИЛИ Найти(СистемнаяИнформация.ВерсияПриложения,"8.3.4.")
			ИЛИ Найти(СистемнаяИнформация.ВерсияПриложения,"8.3.5.")	 Тогда
			ПоддержкаСтрРазделить=Ложь;
		Иначе 
			// теперь совместимость
			РежимСовместимостиСтрокой = Строка(Метаданные.РежимСовместимости);
			РежимСовместимостиСтрокой = СтрЗаменить(РежимСовместимостиСтрокой,"Версия","");
			РежимСовместимостиСтрокой = СтрЗаменить(РежимСовместимостиСтрокой,"Version","");
			Если Найти(РежимСовместимостиСтрокой,"8_2_")
				ИЛИ РежимСовместимостиСтрокой = "8_3_2" 
				ИЛИ РежимСовместимостиСтрокой = "8_3_3"
				ИЛИ РежимСовместимостиСтрокой = "8_3_4"
				ИЛИ РежимСовместимостиСтрокой = "8_3_5"	 Тогда 
					ПоддержкаСтрРазделить=Ложь;
			Иначе
				ПоддержкаСтрРазделить=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ПоддержкаСтрРазделить;
	
КонецФункции

#Область СтрРазделить

&НаКлиентеНаСервереБезКонтекста
Функция xСтрРазделить(Знач Строка, Знач Разделитель, Знач ВключатьПустые=Истина) Экспорт
	
	Массив = новый Массив;

	ПоддержкаСтрРазделить = ПроверитьВерсиюПлатформыКонфигурации();	
	
	Если ПоддержкаСтрРазделить=Истина Тогда
		Выполнить("Массив = СтрРазделить(Строка,Разделитель,ВключатьПустые);");
	Иначе
		Массив = old_СтрРазделить(Строка,Разделитель,ВключатьПустые);
	КонецЕсли;
	
	Возврат Массив;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция old_СтрРазделить(Знач Строка,Знач Разделитель,Знач ВключатьПустые = Истина) Экспорт
	Результат = Новый Массив;
	
	Если Строка = "" Тогда 
		Если ВключатьПустые Тогда
			Результат.Добавить(Строка);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если ВключатьПустые ИЛИ НЕ Подстрока = "" Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если ВключатьПустые ИЛИ НЕ Строка = "" Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

#КонецОбласти
