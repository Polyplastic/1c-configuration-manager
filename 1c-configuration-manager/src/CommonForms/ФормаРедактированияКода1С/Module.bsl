&НаКлиенте
Перем Модуль_РедактораКода1С;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьHTMLРедакторКода = Истина;
	
	Сценарий = Параметры.Сценарий;
	Ключ = Параметры.Ключ;
	КлючФормы = Параметры.КлючФормы;
	ТекстовыйБлок = Параметры.ТекстФайла;
	
	Если Параметры.Свойство("ЗаголовокФормы") Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                          
	//++ html редактор
	Модуль_РедактораКода1С = ПолучитьФорму("ОбщаяФорма.Модуль_РедактораКода1С");
	Модуль_РедактораКода1С.ПриСозданииНаСервереОсновнойФормы();
	Модуль_РедактораКода1С.ПриОткрытииОсновнойФормы();
	УстановитьВидимостьHtmlРедактора(ИспользоватьHTMLРедакторКода);
	ПодключитьОбработчикОжидания("ЖдемГотовностиЗагрузкиРедактораКода1С",1,Истина);
	Модуль_РедактораКода1С.УстановитьРежимРедактора(ЭтаФорма,"HtmlРедактор","bsl");
	Модуль_РедактораКода1С.УстановитьТекст(ЭтаФорма,"HtmlРедактор",ТекстовыйБлок,Неопределено,Ложь);
	//-- html редактор            
КонецПроцедуры



#Область РедакторHtmlКода1С

&НаКлиенте
Процедура ЖдемГотовностиЗагрузкиРедактораКода1С() Экспорт 

	HtmlРедактор = Модуль_РедактораКода1С.ПолучитьКодРедактора();          
	Если НЕ ЗначениеЗаполнено(HtmlРедактор) Тогда
		ПодключитьОбработчикОжидания("ЖдемГотовностиЗагрузкиРедактораКода1С",1,Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура HtmlРедакторДокументСформирован(Элемент)
	Модуль_РедактораКода1С.ИнициализацияРедактора(ЭтаФорма,"HtmlРедактор");
	// преднасроим
	Модуль_РедактораКода1С.УстановитьВидимостьКартыКода(ЭтаФорма,"HtmlРедактор",Ложь);
	Модуль_РедактораКода1С.УстановитьТемуРедактораКода(ЭтаФорма,"HtmlРедактор","СветлаяТема");
	Модуль_РедактораКода1С.УстановитьДокументСформирован("HtmlРедактор");
	//TODO: добавить подгрузку основных функций БСП и других полезностей
	//Модуль_РедактораКода1С.ЗагрузитьФайлыБиблиотекиПроизвольной(ЭтаФорма,"HtmlРедактор",КаталогМодулей);
	Модуль_РедактораКода1С.УстановитьТекст(ЭтаФорма,"HtmlРедактор",ТекстовыйБлок,Неопределено,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура HtmlРедакторПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ОбработатьСобытиеРедактора("HtmlРедактор",ДанныеСобытия.Event.eventData1C);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(ИмяПоля,Событие)
	
	Если Событие <> Неопределено Тогда
			
		
		Если Событие.event = "EVENT_GET_METADATA" Тогда
			//ОбработкаСобытияПолученияМетаданных(Событие);
		КонецЕсли;
		
		Если Событие.event = "EVENT_CONTENT_CHANGED" Тогда

			
			Если ИмяПоля="HtmlРедактор" И ИспользоватьHTMLРедакторКода=Истина Тогда
				ТекстовыйБлок = Модуль_РедактораКода1С.ПолучитьТекст(ЭтаФорма,ИмяПоля);
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьHtmlРедактора(ВидимостьHTML)
	
	Элементы.ТекстовыйБлок.Видимость=НЕ ВидимостьHTML;
	Элементы.HtmlРедактор.Видимость=ВидимостьHTML;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьHTMLРедакторКодаПриИзменении(Элемент)
	УстановитьВидимостьHtmlРедактора(ИспользоватьHTMLРедакторКода);
КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	СохранитьИзмененияСервер(Сценарий,Ключ,ТекстовыйБлок);
КонецПроцедуры  

&НаСервереБезКонтекста
Процедура СохранитьИзмененияСервер(Сценарий,Ключ,ТекстФайла)
	
	// 1. Сначала найдем запрос в старом регистре
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетРуками.Сценарий КАК Сценарий,
	|	РасчетРуками.Ключ КАК Ключ,
	|	РасчетРуками.КлючИзменения КАК КлючИзменения,
	|	РасчетРуками.Текст КАК Текст,
	|	РасчетРуками.ТипИзменений КАК ТипИзменений,
	|	РасчетРуками.ОтНачалаФайла КАК ОтНачалаФайла,
	|	РасчетРуками.ИмяФункции КАК ИмяФункции,
	|	РасчетРуками.ОтНачалаФункции КАК ОтНачалаФункции,
	|	РасчетРуками.ИмяПредыдущейФункции КАК ИмяПредыдущейФункции,
	|	РасчетРуками.ОтОкончанияФункции КАК ОтОкончанияФункции,
	|	РасчетРуками.Длина КАК Длина,
	|	РасчетРуками.ВероятностьУспеха КАК ВероятностьУспеха,
	|	РасчетРуками.Проблема КАК Проблема,
	|	РасчетРуками.ЯкорьПеред КАК ЯкорьПеред,
	|	РасчетРуками.ЯкорьПосле КАК ЯкорьПосле,
	|	РасчетРуками.МодульИсходнойКонфигурации КАК МодульИсходнойКонфигурации,
	|	РасчетРуками.МодульЦелевойКонфигурации КАК МодульЦелевойКонфигурации,
	|	РасчетРуками.ТипПроблемы КАК ТипПроблемы,
	|	РасчетРуками.Комментарий КАК Комментарий,
	|	РасчетРуками.UID КАК UID
	|ИЗ
	|	РегистрСведений.РасчетИзмененийКонфигурацийРучнаяПравка КАК РасчетРуками
	|ГДЕ
	|	РасчетРуками.Сценарий = &Сценарий
	|	И РасчетРуками.Ключ = &Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчет.Сценарий КАК Сценарий,
	|	Расчет.Ключ КАК Ключ,
	|	Расчет.КлючИзменения КАК КлючИзменения,
	|	Расчет.Текст КАК Текст,
	|	Расчет.ТипИзменений КАК ТипИзменений,
	|	Расчет.ОтНачалаФайла КАК ОтНачалаФайла,
	|	Расчет.ИмяФункции КАК ИмяФункции,
	|	Расчет.ОтНачалаФункции КАК ОтНачалаФункции,
	|	Расчет.ИмяПредыдущейФункции КАК ИмяПредыдущейФункции,
	|	Расчет.ОтОкончанияФункции КАК ОтОкончанияФункции,
	|	Расчет.Длина КАК Длина,
	|	Расчет.ВероятностьУспеха КАК ВероятностьУспеха,
	|	Расчет.Проблема КАК Проблема,
	|	Расчет.ЯкорьПеред КАК ЯкорьПеред,
	|	Расчет.ЯкорьПосле КАК ЯкорьПосле,
	|	Расчет.МодульИсходнойКонфигурации КАК МодульИсходнойКонфигурации,
	|	Расчет.МодульЦелевойКонфигурации КАК МодульЦелевойКонфигурации,
	|	Расчет.ТипПроблемы КАК ТипПроблемы,
	|	Расчет.Комментарий КАК Комментарий,
	|	Расчет.UID КАК UID
	|ИЗ
	|	РегистрСведений.РасчетИзмененийКонфигураций КАК Расчет
	|ГДЕ
	|	Расчет.Сценарий = &Сценарий
	|	И Расчет.Ключ = &Ключ";
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("Ключ",Ключ);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	// сначала посмотрим были ли изменения уже вручную
	Выборка = РезультатПакет[0].Выбрать();
	
	НаборДанныхЕсть = Ложь;
	НаборДанных = Новый Массив;
	
	// упрощенно, пока только новый текст
	Если Выборка.Следующий() Тогда
		
		// берем первую запись    
		СтруктураЗаписи = Новый Структура("Сценарий,Ключ,КлючИзменения,Длина,Текст,ТипИзменений,МодульИсходнойКонфигурации,МодульЦелевойКонфигурации,Комментарий,Автор");
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи,Выборка);
		СтруктураЗаписи.КлючИзменения = "eq/1";
		СтруктураЗаписи.ТипИзменений = Перечисления.ТипыИзменений.Совпадение;
		СтруктураЗаписи.Автор = Пользователи.ТекущийПользователь();
		СтруктураЗаписи.Текст = ТекстФайла;
		СтруктураЗаписи.Длина = СтрЧислоСтрок(ТекстФайла);
		НаборДанных.Добавить(СтруктураЗаписи);
		
		НаборДанныхЕсть = Истина;
	КонецЕсли;                    
	
	// теперь если новые, то возьмем из истории
	Если НаборДанныхЕсть=Ложь Тогда
		
		Выборка = РезультатПакет[1].Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			// берем первую запись    
			СтруктураЗаписи = Новый Структура("Сценарий,Ключ,КлючИзменения,Длина,Текст,ТипИзменений,МодульИсходнойКонфигурации,МодульЦелевойКонфигурации,Комментарий,Автор");
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи,Выборка);
			СтруктураЗаписи.КлючИзменения = "eq/1";
			СтруктураЗаписи.ТипИзменений = Перечисления.ТипыИзменений.Совпадение;
			СтруктураЗаписи.Автор = Пользователи.ТекущийПользователь();
			СтруктураЗаписи.Текст = ТекстФайла;
			СтруктураЗаписи.Длина = СтрЧислоСтрок(ТекстФайла);
			НаборДанных.Добавить(СтруктураЗаписи);
			
			НаборДанныхЕсть = Истина;
		КонецЕсли; 		
		
	КонецЕсли;   
	
	Если НаборДанныхЕсть=Истина Тогда
		
		НаборЗаписей = РегистрыСведений.РасчетИзмененийКонфигурацийРучнаяПравка.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		НаборЗаписей.Отбор.Ключ.Установить(Ключ);		
		
		Для каждого стр из НаборДанных Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись,стр);
		КонецЦикла;   
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
	
	Сообщить("Успешно!");
	
КонецПроцедуры

&НаСервере
Процедура ОткатитьВсеИзмененияНаСервере()
	
	НаборЗаписей = РегистрыСведений.РасчетИзмененийКонфигурацийРучнаяПравка.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	НаборЗаписей.Отбор.Ключ.Установить(Ключ);		
	
	НаборЗаписей.Записать(Истина);
	
	Сообщить("Успешно!");
КонецПроцедуры

&НаКлиенте
Процедура ОткатитьВсеИзменения(Команда)
	ОткатитьВсеИзмененияНаСервере();
КонецПроцедуры
